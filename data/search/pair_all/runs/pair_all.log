>>> t = 0 ===================================================================================================
(pair) len(F.columns) = 116
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 257
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:,10:5,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,125:,250:] 
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:,10:5,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,125:,250:] 
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd)
            & index[2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo|vp1dd|vp5dd|Volatility)
            & [10:,10:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.25, 2011.0, 2012.5, 2009.75, 2013.25, 2014.0, 2009.25, 2010.0, 2011.5, 2012.25, 2013.75, 2014.75, 2015.0}), frozenset({2010.75, 2011.75, 2012.75, 2009.0, 2013.5, 2014.25, 2009.5, 2010.5, 2011.25, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (243, 52)
train = (1.1839463096147405, 0.8756617600801947)
scores = (0.26687738112090309, 0.36059797246926056)
score = 0.3137376767950818
>>> t = 1 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 257
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:,10:5,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,125:,250:] 
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:,10:5,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,125:,250:] 
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd)
            & index[2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo|vp1dd|vp5dd|Volatility)
            & [10:,10:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.75, 2010.0, 2012.25, 2012.0, 2009.0, 2013.0, 2009.25, 2010.25, 2011.25, 2012.75, 2013.25, 2014.0, 2015.25}), frozenset({2011.5, 2011.75, 2009.75, 2013.75, 2014.5, 2014.25, 2009.5, 2010.5, 2011.0, 2012.5, 2013.5, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (66, 139)
train = (0.87508180186556395, 1.2101296933232513)
scores = (0.47157293228631508, 0.43729693124548497)
score = 0.4544349317659
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (105, 273)
train = (1.0047461779562399, 1.50072313132614)
scores = (0.46443603628689428, 0.48730247819996358)
score = 0.47586925724342893
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (110, 293)
train = (0.96812009562923573, 1.3227264566790684)
scores = (0.45320642829409025, 0.42998453244732354)
score = 0.4415954803707069
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (105, 273)
train = (1.0047461779562399, 1.50072313132614)
scores = (0.46443603628689428, 0.48730247819996358)
score = 0.47586925724342893
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (106, 174)
train = (1.1306570004635728, 1.4585773163914051)
scores = (0.46490593801037061, 0.44991098187255796)
score = 0.4574084599414643
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 157)
train = (0.75008281222689621, 1.58380350218762)
scores = (0.46390181513441903, 0.47529352633837352)
score = 0.46959767073639624
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (137, 194)
train = (1.0695035008968197, 1.3081080191125589)
scores = (0.46485372406392655, 0.43777904166920628)
score = 0.4513163828665664
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (2, 157)
train = (0.75008281222689621, 1.58380350218762)
scores = (0.46390181513441903, 0.47529352633837352)
score = 0.46959767073639624
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (89, 135)
train = (1.1490336507462982, 1.5011772164343351)
scores = (0.46309577271375174, 0.45639213588176231)
score = 0.45974395429775705
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 192)
train = (0.84238627637294272, 1.9500404024083449)
scores = (0.49617647527167269, 0.47973243093050372)
score = 0.4879544531010882
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (120, 162)
train = (1.1199279468681209, 1.3452581594033568)
scores = (0.47628707533454256, 0.4429795060287357)
score = 0.45963329068163916
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (1, 192)
train = (0.84238627637294272, 1.9500404024083449)
scores = (0.49617647527167269, 0.47973243093050372)
score = 0.4879544531010882
>>> t = 2 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 257
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:,10:5,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,125:,250:] 
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:,10:5,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,125:,250:] 
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd)
            & index[2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo|vp1dd|vp5dd|Volatility)
            & [10:,10:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2011.75, 2012.0, 2009.25, 2009.75, 2014.75, 2014.0, 2009.0, 2010.0, 2011.0, 2012.5, 2013.75, 2014.5, 2015.0}), frozenset({2010.5, 2010.75, 2011.5, 2012.75, 2013.25, 2013.5, 2009.5, 2010.25, 2011.25, 2012.25, 2013.0, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (211, 151)
train = (1.1401134739797825, 1.4732504571539429)
scores = (0.54568036484849292, 0.46229387886482004)
score = 0.5039871218566565
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (5, 172)
train = (0.66881026185442416, 1.6421879965519199)
scores = (0.43212195357636357, 0.42837754339209333)
score = 0.4302497484842285
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (220, 183)
train = (1.1012216222223445, 1.4149543343736561)
scores = (0.51333303221800752, 0.48495811317376947)
score = 0.4991455726958885
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (211, 151)
train = (1.1401134739797825, 1.4732504571539429)
scores = (0.54568036484849292, 0.46229387886482004)
score = 0.5039871218566565
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (194, 137)
train = (1.2378666727716414, 1.6418926762219899)
scores = (0.53295518860127156, 0.44793220258874267)
score = 0.4904436955950071
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (258, 148)
train = (1.4787485009823358, 1.8851442601740855)
scores = (0.54464773386014753, 0.41141596681210546)
score = 0.4780318503361265
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (184, 91)
train = (1.1665918132130295, 1.2631796180917327)
scores = (0.49866815416801824, 0.4778528738671689)
score = 0.48826051401759357
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (194, 137)
train = (1.2378666727716414, 1.6418926762219899)
scores = (0.53295518860127156, 0.44793220258874267)
score = 0.4904436955950071
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (140, 151)
train = (1.2680565589252573, 1.804844306409364)
scores = (0.52764683040037086, 0.45660223113611725)
score = 0.49212453076824403
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (156, 191)
train = (1.5042949737310298, 2.2459926062015181)
scores = (0.53326170605571355, 0.41514976290739841)
score = 0.474205734481556
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (307, 89)
train = (1.3446209356215248, 1.3555816298305063)
scores = (0.50663250986591113, 0.48621027439946418)
score = 0.49642139213268766
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (307, 89)
train = (1.3446209356215248, 1.3555816298305063)
scores = (0.50663250986591113, 0.48621027439946418)
score = 0.49642139213268766
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (174, 107)
train = (1.4012647024500489, 1.7786449496830175)
scores = (0.52889641336222426, 0.45820419993130007)
score = 0.49355030664676214
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (159, 138)
train = (1.6316877776767895, 2.281310066563921)
scores = (0.51775699111795326, 0.42199663899465684)
score = 0.4698768150563051
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (308, 110)
train = (1.4013688600147847, 1.5007945462895078)
scores = (0.51654122602948349, 0.48215460143279315)
score = 0.4993479137311383
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (308, 110)
train = (1.4013688600147847, 1.5007945462895078)
scores = (0.51654122602948349, 0.48215460143279315)
score = 0.4993479137311383
>>> t = 100 ===================================================================================================
(pair) len(F.columns) = 53
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 160
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|daoc)
            & index[0,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [10:5,15:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Drawup[1:, 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|daoc)
            & index[0,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [10:5,15:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Drawup[1:, 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2015.0, 2011.25, 2011.5, 2011.75, 2012.0, 2014.5, 2009.25, 2010.75, 2011.0, 2009.0, 2013.5, 2014.0, 2015.25}), frozenset({2010.25, 2010.5, 2012.5, 2012.75, 2009.75, 2013.25, 2013.75, 2014.25, 2009.5, 2010.0, 2012.25, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (188, 287)
train = (1.0582649024103612, 1.3438918095681038)
scores = (0.44799122586972168, 0.55849954109450173)
score = 0.5032453834821117
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (130, 169)
train = (1.0490928843279819, 1.3016444795064335)
scores = (0.4575191495610651, 0.46943349821205804)
score = 0.46347632388656157
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (187, 430)
train = (1.0627677035431238, 1.3691409440675699)
scores = (0.45005198694174475, 0.5706864276404513)
score = 0.510369207291098
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (187, 430)
train = (1.0627677035431238, 1.3691409440675699)
scores = (0.45005198694174475, 0.5706864276404513)
score = 0.510369207291098
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (143, 304)
train = (1.1480791455991686, 1.5785740093908014)
scores = (0.46213351227905125, 0.56319679138496725)
score = 0.5126651518320092
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (157, 229)
train = (1.3272371751796328, 1.7784894825147979)
scores = (0.48183135536556709, 0.47416803779488442)
score = 0.4779996965802258
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (357, 528)
train = (1.3040609974821586, 1.574961963622308)
scores = (0.47297901676420778, 0.58369368540635214)
score = 0.52833635108528
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (357, 528)
train = (1.3040609974821586, 1.574961963622308)
scores = (0.47297901676420778, 0.58369368540635214)
score = 0.52833635108528
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (115, 323)
train = (1.2046257404977614, 1.7348562393045421)
scores = (0.46679980353080841, 0.5660443325575637)
score = 0.516422068044186
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (102, 201)
train = (1.3699563854957177, 2.0220938475501944)
scores = (0.49099408049976018, 0.47883780486797112)
score = 0.4849159426838656
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (381, 379)
train = (1.4204534242324753, 1.5634156252999656)
scores = (0.48367380558337109, 0.5827246640570054)
score = 0.5331992348201883
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (381, 379)
train = (1.4204534242324753, 1.5634156252999656)
scores = (0.48367380558337109, 0.5827246640570054)
score = 0.5331992348201883
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (90, 262)
train = (1.1961204183600787, 1.7673196858320477)
scores = (0.46417964262899425, 0.58890269750735735)
score = 0.5265411700681758
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (92, 38)
train = (1.4934843109132998, 1.6185425986634874)
scores = (0.49781561177777378, 0.42504478704497195)
score = 0.46143019941137287
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (120, 389)
train = (1.1860632136893803, 1.6612983444732898)
scores = (0.45508757919851073, 0.59517946377752184)
score = 0.5251335214880163
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (90, 262)
train = (1.1961204183600787, 1.7673196858320477)
scores = (0.46417964262899425, 0.58890269750735735)
score = 0.5265411700681758
>>> t = 101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 160
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|daoc)
            & index[0,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [10:5,15:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Drawup[1:, 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|daoc)
            & index[0,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [10:5,15:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Drawup[1:, 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2011.25, 2011.5, 2012.5, 2009.5, 2009.75, 2013.75, 2009.25, 2010.75, 2011.0, 2012.75, 2013.25, 2014.25, 2015.0}), frozenset({2010.25, 2010.5, 2012.25, 2013.5, 2014.5, 2014.0, 2009.0, 2010.0, 2011.75, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (31, 1)
train = (0.81616592405976207, 0.66388330837994447)
scores = (0.3164539992227608, 0.25151115792512307)
score = 0.28398257857394194
>>> t = 102 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 160
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|daoc)
            & index[0,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [10:5,15:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Drawup[1:, 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|daoc)
            & index[0,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [10:5,15:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Drawup[1:, 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.5, 2010.25, 2012.25, 2012.5, 2009.75, 2009.0, 2009.5, 2010.75, 2011.5, 2012.0, 2013.75, 2014.5, 2015.25}), frozenset({2011.25, 2011.75, 2013.25, 2013.5, 2014.25, 2014.0, 2009.25, 2010.0, 2011.0, 2012.75, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (198, 1)
train = (1.1261893602002084, 0.67346151033760848)
scores = (0.44386530425651194, 0.28339458431644771)
score = 0.3636299442864798
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (122, 1)
train = (1.0645988213038642, 0.60536350435092889)
scores = (0.43879925740009201, 0.25162044745387041)
score = 0.3452098524269812
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (301, 1)
train = (1.1711591855941053, 0.62843473742209077)
scores = (0.45239782382295929, 0.2801099775195387)
score = 0.36625390067124897
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (301, 1)
train = (1.1711591855941053, 0.62843473742209077)
scores = (0.45239782382295929, 0.2801099775195387)
score = 0.36625390067124897
>>> t = 103 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 160
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|daoc)
            & index[0,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [10:5,15:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Drawup[1:, 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|daoc)
            & index[0,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [10:5,15:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Drawup[1:, 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2011.0, 2011.75, 2012.75, 2012.5, 2013.75, 2014.5, 2009.25, 2010.5, 2011.5, 2012.25, 2013.0, 2014.0, 2015.25}), frozenset({2010.25, 2010.75, 2009.0, 2009.75, 2013.5, 2014.25, 2009.5, 2010.0, 2011.25, 2012.0, 2013.25, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (94, 28)
train = (1.057092581176609, 0.8404372566406747)
scores = (0.27944531615736384, 0.41157849509996008)
score = 0.34551190562866196
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (159, 152)
train = (1.3267848534580777, 1.1415943285866987)
scores = (0.24506161296116186, 0.41760212198207813)
score = 0.33133186747162
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (70, 26)
train = (0.97399486902684485, 0.77832656266369149)
scores = (0.33999139172574455, 0.37361076563367629)
score = 0.35680107867971045
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (70, 26)
train = (0.97399486902684485, 0.77832656266369149)
scores = (0.33999139172574455, 0.37361076563367629)
score = 0.35680107867971045
>>> t = 200 ===================================================================================================
(pair) len(F.columns) = 103
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 214
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:,20:10] 
                | Since{Max&index[0]} 
                | Drawup[ 10:5] 
                | Since{Min&index[0,5]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[10:]
            & (
                | Since{Max & index[5,20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & ( Volatility)
        & [5:,10:] 
      }
    | 
        Time{long}
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[1,10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2011.0, 2011.75, 2011.25, 2012.25, 2009.25, 2009.5, 2013.0, 2013.25, 2009.0, 2011.5, 2012.0, 2013.5, 2014.5}), frozenset({2010.0, 2010.5, 2010.75, 2015.0, 2012.75, 2014.25, 2014.0, 2009.75, 2010.25, 2012.5, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (30, 15)
train = (0.67365901626507585, 0.7755406674263795)
scores = (0.24917662499116297, 0.28649352076484597)
score = 0.26783507287800445
>>> t = 201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 214
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:,20:10] 
                | Since{Max&index[0]} 
                | Drawup[ 10:5] 
                | Since{Min&index[0,5]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[10:]
            & (
                | Since{Max & index[5,20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & ( Volatility)
        & [5:,10:] 
      }
    | 
        Time{long}
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[1,10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.5, 2011.25, 2012.0, 2009.75, 2013.0, 2013.5, 2009.0, 2010.0, 2011.75, 2012.5, 2013.25, 2014.5, 2015.0}), frozenset({2010.75, 2011.5, 2012.75, 2009.25, 2014.25, 2014.0, 2009.5, 2010.25, 2011.0, 2012.25, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (28, 196)
train = (0.96894173609910716, 1.0931009450423135)
scores = (0.27392507688587914, 0.1857301564766129)
score = 0.22982761668124602
>>> t = 300 ===================================================================================================
(pair) len(F.columns) = 22
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 46
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|daoc|vp1dd)
            & index[1, 0:1,1:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                | Drawdown[20:,20:10] 
                | Since{Max&index[0,20]} 
                | Since{Min&index[0,5,10,20]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | Return{rr} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.75, 2011.25, 2012.5, 2012.25, 2009.0, 2013.0, 2009.75, 2010.5, 2011.5, 2012.0, 2013.5, 2014.0, 2015.0}), frozenset({2010.25, 2011.75, 2009.25, 2013.75, 2014.5, 2014.25, 2009.5, 2010.0, 2011.0, 2012.75, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 1)
train = (0.60310638196675415, 0.44558617957077412)
scores = (0.22162400140900451, 0.22417712262352821)
score = 0.22290056201626635
>>> t = 301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 46
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|daoc|vp1dd)
            & index[1, 0:1,1:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                | Drawdown[20:,20:10] 
                | Since{Max&index[0,20]} 
                | Since{Min&index[0,5,10,20]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | Return{rr} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.5, 2011.25, 2011.75, 2012.0, 2013.5, 2014.75, 2009.75, 2010.0, 2011.5, 2012.5, 2013.25, 2014.25, 2015.0}), frozenset({2010.75, 2012.75, 2009.0, 2009.25, 2013.75, 2014.0, 2009.5, 2010.25, 2011.0, 2012.25, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (7, 5)
train = (0.69629556868818654, 0.27672410803266467)
scores = (0.24422391443155778, 0.18775436344127833)
score = 0.21598913893641805
>>> t = 400 ===================================================================================================
(pair) len(F.columns) = 41
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 64
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo|doc|vp1dd)
            & index[0,2, 0:1,1:2] 
          }
      )
    | 
        Time{long}
#<>#
    <>~Market & (
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                | Since{Max & index[0,10]} 
                | Drawup[20:10] 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2011.25, 2011.75, 2011.5, 2012.0, 2009.75, 2014.75, 2009.25, 2010.25, 2011.0, 2012.25, 2013.5, 2014.0, 2015.0}), frozenset({2010.5, 2010.75, 2012.75, 2009.0, 2013.25, 2013.75, 2014.25, 2009.5, 2010.0, 2012.5, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (73, 3)
train = (1.2742689606721085, 0.65216066647107795)
scores = (0.16576321206986327, 0.20374334370649377)
score = 0.18475327788817852
>>> t = 401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 64
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo|doc|vp1dd)
            & index[0,2, 0:1,1:2] 
          }
      )
    | 
        Time{long}
#<>#
    <>~Market & (
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                | Since{Max & index[0,10]} 
                | Drawup[20:10] 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2012.0, 2009.25, 2009.5, 2013.0, 2014.5, 2014.25, 2009.0, 2010.25, 2011.5, 2012.25, 2013.5, 2014.75}), frozenset({2010.0, 2015.0, 2011.25, 2011.75, 2012.75, 2013.75, 2009.75, 2010.5, 2011.0, 2012.5, 2013.25, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 2)
train = (0.70372969085222059, 0.53862662710670506)
scores = (0.079877868709571989, 0.14555764808865296)
score = 0.11271775839911247
>>> t = 500 ===================================================================================================
(pair) len(F.columns) = 14
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 28
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(Volatility)
            & [10:5,15:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[20:, 10:5,20:10] 
                | Since{Max&index[5]} 
                | Since{Min&index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [1:,5:,10:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.75, 2011.5, 2011.75, 2012.75, 2013.75, 2013.0, 2009.0, 2010.0, 2011.0, 2012.5, 2013.5, 2014.75, 2015.0}), frozenset({2010.5, 2012.25, 2009.25, 2009.75, 2014.25, 2014.0, 2009.5, 2010.25, 2011.25, 2012.0, 2013.25, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (11, 283)
train = (0.75831846272794368, 1.006714803079273)
scores = (0.28859033584807692, 0.23582007650433801)
score = 0.26220520617620746
>>> t = 501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 28
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(Volatility)
            & [10:5,15:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[20:, 10:5,20:10] 
                | Since{Max&index[5]} 
                | Since{Min&index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [1:,5:,10:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.0, 2012.25, 2012.0, 2009.75, 2013.25, 2014.25, 2009.0, 2010.5, 2011.75, 2012.5, 2013.75, 2014.0, 2015.25}), frozenset({2010.75, 2011.25, 2011.5, 2009.25, 2013.5, 2014.5, 2009.5, 2010.25, 2011.0, 2012.75, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (119, 305)
train = (1.0743860602866642, 1.1344031910996148)
scores = (0.27157148186032348, 0.20803041978272191)
score = 0.2398009508215227
>>> t = 600 ===================================================================================================
(pair) len(F.columns) = 34
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 74
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|daoc|vp1dd)
            & index[1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd)
            & [3:,9:,15:,6:3,12:9,15:12,21:18,9:3,12:6,            15:9,18:12,21:15,12:3,15:6,18:9,21:12,18:6,21:9,18:3] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                | Drawdown[1:,20:, 10:5,20:10] 
                | Since{Max & index[0]} 
                | Drawup[20:10] 
                | Since{Min & index[0]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & ( Volatility)
        & [20:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2011.75, 2011.5, 2012.5, 2009.25, 2014.25, 2014.0, 2009.0, 2010.75, 2011.0, 2009.75, 2013.5, 2014.75, 2015.0}), frozenset({2010.25, 2010.5, 2012.25, 2012.75, 2013.25, 2013.75, 2009.5, 2010.0, 2011.25, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 23)
train = (0.52002999361814084, 0.8776305598294446)
scores = (0.30986820720322528, 0.32599867491923651)
score = 0.3179334410612309
>>> t = 601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 74
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|daoc|vp1dd)
            & index[1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd)
            & [3:,9:,15:,6:3,12:9,15:12,21:18,9:3,12:6,            15:9,18:12,21:15,12:3,15:6,18:9,21:12,18:6,21:9,18:3] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                | Drawdown[1:,20:, 10:5,20:10] 
                | Since{Max & index[0]} 
                | Drawup[20:10] 
                | Since{Min & index[0]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & ( Volatility)
        & [20:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.5, 2011.75, 2012.0, 2012.75, 2009.75, 2014.0, 2009.0, 2010.75, 2011.25, 2009.5, 2013.75, 2014.75, 2015.0}), frozenset({2010.25, 2011.5, 2012.5, 2013.25, 2013.5, 2014.25, 2009.25, 2010.0, 2011.0, 2012.25, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (104, 2)
train = (1.0572948028063172, 0.63509846221110311)
scores = (0.31262593567955721, 0.24948702251089483)
score = 0.281056479095226
>>> t = 700 ===================================================================================================
(pair) len(F.columns) = 58
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 115
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo|vp1dd|vp5dd|Volatility)
            & [5:,10:,15:,15:10,20:15,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,10:] 
      }
    | 
    | 
        <>AssetEnc{InUni} 
    | 
        <>FaceValue{Volume| Close} 
        | Return{mix[4,7,14,15,17,18]}
        | Return{ af} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.75, 2015.0, 2011.25, 2012.5, 2009.75, 2009.0, 2010.5, 2011.5, 2012.0, 2013.75, 2014.0, 2015.25}), frozenset({2011.75, 2012.75, 2009.25, 2013.25, 2013.5, 2014.25, 2014.75, 2009.5, 2010.0, 2011.0, 2012.25, 2013.0, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (48, 1)
train = (0.97421874484837567, 0.67585812847906868)
scores = (0.40053203204303933, 0.21687069259355368)
score = 0.3087013623182965
>>> t = 701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 115
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo|vp1dd|vp5dd|Volatility)
            & [5:,10:,15:,15:10,20:15,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,10:] 
      }
    | 
    | 
        <>AssetEnc{InUni} 
    | 
        <>FaceValue{Volume| Close} 
        | Return{mix[4,7,14,15,17,18]}
        | Return{ af} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[20]
      }
len(samps) = 2
(frozenset({2015.0, 2011.75, 2012.25, 2013.25, 2014.75, 2014.0, 2009.75, 2010.0, 2011.5, 2012.5, 2013.0, 2014.25, 2015.25}), frozenset({2010.5, 2010.75, 2011.25, 2012.75, 2009.0, 2009.25, 2013.75, 2009.5, 2010.25, 2011.0, 2012.0, 2013.5, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (42, 350)
train = (1.0885364509782827, 1.227429378298065)
scores = (0.25868407151476347, 0.33027013193107346)
score = 0.29447710172291847
>>> t = 800 ===================================================================================================
(pair) len(F.columns) = 23
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 46
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|daoc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [5:,10:,15:,10:5,15:10,20:15,20:10,20:5] 
          }
      )
    | 
        Time{ short}
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.0, 2011.5, 2012.0, 2012.5, 2014.5, 2014.75, 2009.25, 2010.5, 2011.0, 2009.0, 2013.75, 2014.0, 2015.25}), frozenset({2010.75, 2011.75, 2012.75, 2009.75, 2013.25, 2013.5, 2009.5, 2010.25, 2011.25, 2012.25, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (107, 61)
train = (0.64323973966501125, 0.59829799736461353)
scores = (0.36395093531546546, 0.31493919413486782)
score = 0.33944506472516667
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (96, 252)
train = (0.65810126321284468, 1.1866140064123429)
scores = (0.36202833749181407, 0.32569187608276479)
score = 0.3438601067872894
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (166, 351)
train = (0.62043735532257693, 0.81124272345762394)
scores = (0.359433466199989, 0.32406432188745893)
score = 0.341748894043724
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (96, 252)
train = (0.65810126321284468, 1.1866140064123429)
scores = (0.36202833749181407, 0.32569187608276479)
score = 0.3438601067872894
>>> t = 801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 46
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|daoc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [5:,10:,15:,10:5,15:10,20:15,20:10,20:5] 
          }
      )
    | 
        Time{ short}
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2012.75, 2012.0, 2009.0, 2009.25, 2013.0, 2014.5, 2014.25, 2009.75, 2011.75, 2012.25, 2013.25, 2014.75, 2015.0}), frozenset({2010.25, 2010.5, 2010.75, 2011.25, 2011.5, 2013.75, 2009.5, 2010.0, 2011.0, 2012.5, 2013.5, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (112, 245)
train = (0.64599805688886347, 0.94136401321040419)
scores = (0.43184026911290324, 0.25712292716276802)
score = 0.34448159813783563
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (66, 77)
train = (0.63164174441920184, 0.85035486233589375)
scores = (0.44126729589294367, 0.24694040558251318)
score = 0.3441038507377284
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (87, 612)
train = (0.52297374394595109, 1.0271259812558586)
scores = (0.43115203053499074, 0.27228733551647882)
score = 0.35171968302573475
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (87, 612)
train = (0.52297374394595109, 1.0271259812558586)
scores = (0.43115203053499074, 0.27228733551647882)
score = 0.35171968302573475
>>> t = 900 ===================================================================================================
(pair) len(F.columns) = 54
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 54
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo)
            & index[2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|vp5dd)
            & [10:,15:,10:5,15:10,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Drawup[20:, 10:5] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.0, 2010.25, 2010.75, 2011.25, 2011.0, 2011.75, 2013.5, 2009.25, 2010.5, 2011.5, 2012.25, 2013.25, 2015.0}), frozenset({2012.5, 2012.75, 2009.0, 2009.75, 2013.75, 2014.5, 2014.25, 2014.0, 2009.5, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (133, 230)
train = (0.84443757915440132, 0.94329551814780233)
scores = (0.42504157628552741, 0.38253015385686856)
score = 0.40378586507119796
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (73, 211)
train = (0.85479217452976697, 0.9133003057426381)
scores = (0.39668657134667817, 0.36198239201340654)
score = 0.37933448168004236
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (193, 206)
train = (0.84519093038953208, 0.87457279991098991)
scores = (0.44195795145660338, 0.3952535185010046)
score = 0.418605734978804
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (193, 206)
train = (0.84519093038953208, 0.87457279991098991)
scores = (0.44195795145660338, 0.3952535185010046)
score = 0.418605734978804
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (90, 157)
train = (0.87946027148310291, 0.99475369913745759)
scores = (0.43426474848468294, 0.38515124016827307)
score = 0.409707994326478
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (70, 141)
train = (1.0378828989680324, 0.98027717949168702)
scores = (0.40065713772752809, 0.36645425805524562)
score = 0.3835556978913869
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (89, 190)
train = (0.77111612561720333, 0.9365446149787352)
scores = (0.44523444479516311, 0.39957476372313994)
score = 0.4224046042591515
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (89, 190)
train = (0.77111612561720333, 0.9365446149787352)
scores = (0.44523444479516311, 0.39957476372313994)
score = 0.4224046042591515
>>> t = 901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 54
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo)
            & index[2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|vp5dd)
            & [10:,15:,10:5,15:10,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Drawup[20:, 10:5] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2011.25, 2011.0, 2011.5, 2012.5, 2013.5, 2013.75, 2014.5, 2009.0, 2011.75, 2009.25, 2013.0, 2014.0, 2015.0}), frozenset({2010.25, 2010.5, 2010.75, 2012.25, 2012.75, 2009.75, 2014.25, 2009.5, 2010.0, 2012.0, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (195, 128)
train = (0.80704843672128534, 0.86551097443777825)
scores = (0.3442087443480345, 0.49126372738412261)
score = 0.41773623586607855
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (119, 90)
train = (0.77953168586933996, 0.96218357583371006)
scores = (0.33695639847362402, 0.49837745182959281)
score = 0.4176669251516084
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (283, 148)
train = (0.7919919400736487, 0.82245081246985441)
scores = (0.33913485395065079, 0.48930771681260304)
score = 0.41422128538162695
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (195, 128)
train = (0.80704843672128534, 0.86551097443777825)
scores = (0.3442087443480345, 0.49126372738412261)
score = 0.41773623586607855
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 248)
train = (0.67714683533892917, 1.1090203757913255)
scores = (0.33266402581022142, 0.50963359764282246)
score = 0.42114881172652197
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (452, 133)
train = (1.1407821663361741, 1.2192662301757049)
scores = (0.37784147923783945, 0.50728686495932007)
score = 0.4425641720985798
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (203, 176)
train = (0.81983142546516474, 0.92825193851208043)
scores = (0.34517001635995781, 0.49780710208325274)
score = 0.4214885592216053
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (452, 133)
train = (1.1407821663361741, 1.2192662301757049)
scores = (0.37784147923783945, 0.50728686495932007)
score = 0.4425641720985798
>>> t = 1000 ===================================================================================================
(pair) len(F.columns) = 36
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 74
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Drawup[1:] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[21:,62:] 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2011.25, 2012.25, 2009.75, 2009.0, 2014.5, 2014.25, 2009.5, 2010.5, 2011.75, 2012.5, 2013.0, 2014.0, 2015.25}), frozenset({2010.0, 2010.75, 2011.5, 2012.75, 2013.5, 2013.75, 2009.25, 2010.25, 2011.0, 2012.0, 2013.25, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (133, 45)
train = (1.0823955308501931, 0.76228442456327095)
scores = (0.21775896007271675, 0.17234409033349141)
score = 0.1950515252031041
>>> t = 1001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 74
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Drawup[1:] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[21:,62:] 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.5, 2010.75, 2015.0, 2011.5, 2009.0, 2009.5, 2009.75, 2010.25, 2011.75, 2012.0, 2014.5, 2015.25}), frozenset({2011.0, 2012.5, 2012.75, 2013.25, 2013.5, 2013.75, 2014.25, 2014.0, 2009.25, 2011.25, 2012.25, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (45, 1)
train = (0.73637661132692256, 0.68189441506942838)
scores = (0.18166482383664434, 0.13576387277796875)
score = 0.15871434830730655
>>> t = 1100 ===================================================================================================
(pair) len(F.columns) = 109
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 184
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp5dd|Volatility)
            & [5:,10:,10:5,15:10,20:15,15:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:]|doo[10:])} 
            & (
                | Drawdown[10:,20:,20:10] 
                | Since{Max&index[0,5,10]} 
                | Since{Min&index[5]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Drawdown[20:10] 
                | Since{Max & index[0,5]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP)
        & [10:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|dcc|doc|daoc|vp1dd)
            & index[1,2, 0:1,1:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[1:,20:10] 
                | Drawup[20:10] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        | FracRec[21:,125:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.25, 2010.0, 2012.75, 2009.75, 2013.25, 2014.5, 2009.5, 2010.5, 2011.0, 2012.0, 2013.0, 2014.25, 2015.25}), frozenset({2011.75, 2011.25, 2012.5, 2009.25, 2013.75, 2014.0, 2009.0, 2010.75, 2011.5, 2012.25, 2013.5, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (152, 124)
train = (1.2057291630938587, 1.0473963307134426)
scores = (0.41614187792995222, 0.44075817905943249)
score = 0.4284500284946924
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (214, 31)
train = (1.4035465659325994, 0.78802064058100862)
scores = (0.38801014997273453, 0.4152583415459945)
score = 0.4016342457593645
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (48, 2)
train = (0.98645542175472356, 0.7046286166681226)
scores = (0.40453205861625441, 0.40925089252528346)
score = 0.40689147557076893
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (152, 124)
train = (1.2057291630938587, 1.0473963307134426)
scores = (0.41614187792995222, 0.44075817905943249)
score = 0.4284500284946924
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (188, 87)
train = (1.3791204733736395, 1.1051476603710451)
scores = (0.42380680898505829, 0.44416782307934577)
score = 0.43398731603220203
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (300, 34)
train = (1.6620838216669793, 0.9982102105910482)
scores = (0.41562927793980986, 0.42566316553060696)
score = 0.4206462217352084
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (96, 3)
train = (1.1759723983619861, 0.81091262335007719)
scores = (0.42229077805626808, 0.42186769441382027)
score = 0.4220792362350442
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (188, 87)
train = (1.3791204733736395, 1.1051476603710451)
scores = (0.42380680898505829, 0.44416782307934577)
score = 0.43398731603220203
>>> t = 1101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 184
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp5dd|Volatility)
            & [5:,10:,10:5,15:10,20:15,15:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:]|doo[10:])} 
            & (
                | Drawdown[10:,20:,20:10] 
                | Since{Max&index[0,5,10]} 
                | Since{Min&index[5]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Drawdown[20:10] 
                | Since{Max & index[0,5]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP)
        & [10:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|dcc|doc|daoc|vp1dd)
            & index[1,2, 0:1,1:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[1:,20:10] 
                | Drawup[20:10] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        | FracRec[21:,125:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2011.0, 2011.5, 2012.5, 2012.75, 2013.25, 2013.0, 2014.25, 2009.25, 2010.75, 2011.25, 2009.5, 2013.75, 2014.75}), frozenset({2010.0, 2010.5, 2015.0, 2012.25, 2009.75, 2014.0, 2009.0, 2010.25, 2011.75, 2012.0, 2013.5, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (27, 53)
train = (0.78487133386892372, 0.93186580639150851)
scores = (0.32807893264247207, 0.40232396372790263)
score = 0.36520144818518735
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (99, 53)
train = (1.0861155967981901, 0.91859776787528713)
scores = (0.33341937296398444, 0.39796484276612898)
score = 0.3656921078650567
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (16, 33)
train = (0.74165305632997403, 0.78661276108629929)
scores = (0.35930670484686539, 0.40477566254337444)
score = 0.3820411836951199
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (16, 33)
train = (0.74165305632997403, 0.78661276108629929)
scores = (0.35930670484686539, 0.40477566254337444)
score = 0.3820411836951199
>>> t = 1200 ===================================================================================================
(pair) len(F.columns) = 65
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 111
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|acc|dcc|daoc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                | Drawdown[ 10:5] 
                | Since{Max & index[10]} 
                | Drawup[ 5:] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            | Volatility[10:]
            & (
                <>Drawdown[1:,20:] 
                | Since{Max & index[0,10]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|vp5dd)
            & [6:3,9:6,12:9,15:12,21:18,12:6,18:12,21:15,12:3,15:6,15:3,18:6,21:9,18:3] 
          }
        | ( 
            <>Return{(oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:, 10:5] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
    | 
        Time{ short}
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1,10]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2015.0, 2011.5, 2012.75, 2012.25, 2013.5, 2014.5, 2009.0, 2010.75, 2011.25, 2012.5, 2013.75, 2014.0, 2015.25}), frozenset({2010.25, 2010.5, 2011.75, 2009.25, 2009.75, 2013.25, 2014.25, 2009.5, 2010.0, 2011.0, 2012.0, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (14, 1)
train = (0.74500720131963583, 0.68546952180668608)
scores = (0.22477053710431133, 0.29755704123083992)
score = 0.26116378916757566
>>> t = 1201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 111
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|acc|dcc|daoc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                | Drawdown[ 10:5] 
                | Since{Max & index[10]} 
                | Drawup[ 5:] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            | Volatility[10:]
            & (
                <>Drawdown[1:,20:] 
                | Since{Max & index[0,10]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|vp5dd)
            & [6:3,9:6,12:9,15:12,21:18,12:6,18:12,21:15,12:3,15:6,15:3,18:6,21:9,18:3] 
          }
        | ( 
            <>Return{(oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:, 10:5] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
    | 
        Time{ short}
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1,10]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.25, 2011.25, 2012.5, 2009.75, 2013.75, 2013.25, 2014.0, 2009.25, 2010.75, 2011.5, 2012.25, 2013.5, 2014.5}), frozenset({2010.5, 2015.0, 2011.75, 2012.75, 2009.0, 2014.25, 2009.5, 2010.0, 2011.0, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (511, 57)
train = (1.5875376066857714, 0.82276671760397702)
scores = (0.31157494031354804, 0.39267692440323138)
score = 0.35212593235838974
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (592, 121)
train = (1.7862929655887954, 0.96923354702039832)
scores = (0.33815609350179249, 0.402748834938014)
score = 0.37045246421990324
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (683, 86)
train = (1.5791170353498225, 0.90754546994034202)
scores = (0.31156762791726605, 0.39990708244266637)
score = 0.3557373551799662
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (592, 121)
train = (1.7862929655887954, 0.96923354702039832)
scores = (0.33815609350179249, 0.402748834938014)
score = 0.37045246421990324
>>> t = 1300 ===================================================================================================
(pair) len(F.columns) = 9
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 22
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [15:,10:5,15:10,20:10] 
          }
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [60:] 
      }
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[62:,250:] 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2012.25, 2012.0, 2009.75, 2009.5, 2013.25, 2013.75, 2009.25, 2009.0, 2010.75, 2011.0, 2012.75, 2013.0, 2015.0}), frozenset({2010.25, 2010.5, 2011.5, 2011.75, 2014.5, 2014.25, 2014.0, 2010.0, 2011.25, 2012.5, 2013.5, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (119, 22)
train = (0.94208759027621236, 0.70838959066168772)
scores = (0.45161798420943272, 0.26310156014478769)
score = 0.35735977217711024
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (100, 14)
train = (0.92841442175909872, 0.73343814490531312)
scores = (0.48172161677306313, 0.27644203540994339)
score = 0.37908182609150326
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (107, 21)
train = (0.88254782130068243, 0.61466727531889198)
scores = (0.47707016200792485, 0.25039359616795998)
score = 0.3637318790879424
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (100, 14)
train = (0.92841442175909872, 0.73343814490531312)
scores = (0.48172161677306313, 0.27644203540994339)
score = 0.37908182609150326
>>> t = 1301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 22
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [15:,10:5,15:10,20:10] 
          }
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [60:] 
      }
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[62:,250:] 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.0, 2010.25, 2011.0, 2012.5, 2009.5, 2013.25, 2014.75, 2009.75, 2010.75, 2011.75, 2012.75, 2013.75, 2014.5}), frozenset({2015.0, 2011.5, 2012.25, 2009.25, 2013.5, 2014.0, 2009.0, 2010.5, 2011.25, 2012.0, 2013.0, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (64, 69)
train = (0.7665903577476425, 0.75988691750634441)
scores = (0.23709044682234576, 0.42976997641204484)
score = 0.3334302116171953
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (40, 100)
train = (0.81081619441597363, 0.90721956243229651)
scores = (0.24591355158590456, 0.41837301910494695)
score = 0.33214328534542575
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (175, 115)
train = (0.81940779047659462, 0.74678911821252192)
scores = (0.23313184162794376, 0.46434472411817918)
score = 0.34873828287306147
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (175, 115)
train = (0.81940779047659462, 0.74678911821252192)
scores = (0.23313184162794376, 0.46434472411817918)
score = 0.34873828287306147
>>> t = 1400 ===================================================================================================
(pair) len(F.columns) = 25
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 74
    <>~Market & (
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [10:,60:] 
      }
#<>#
    <>~Market & (
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [10:,60:] 
      }
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.0, 2010.25, 2010.5, 2015.0, 2011.0, 2012.75, 2012.5, 2012.25, 2009.75, 2010.75, 2011.75, 2009.0, 2015.25}), frozenset({2011.5, 2009.25, 2013.25, 2013.5, 2013.75, 2014.5, 2014.25, 2014.0, 2009.5, 2011.25, 2012.0, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (229, 22)
train = (1.2130517103748355, 0.62349012984820451)
scores = (0.10217787772797986, 0.061284408021769737)
score = 0.08173114287487479
>>> t = 1401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 74
    <>~Market & (
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [10:,60:] 
      }
#<>#
    <>~Market & (
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [10:,60:] 
      }
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.25, 2011.5, 2011.0, 2009.5, 2014.5, 2014.0, 2009.25, 2010.0, 2011.25, 2009.75, 2013.5, 2014.75, 2015.25}), frozenset({2010.5, 2012.25, 2012.5, 2012.75, 2013.25, 2013.75, 2009.0, 2010.75, 2011.75, 2012.0, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 79)
train = (0.51680686059000602, 0.78574703824513314)
scores = (0.13456499504158825, 0.15349788121039937)
score = 0.1440314381259938
>>> t = 1500 ===================================================================================================
(pair) len(F.columns) = 18
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 40
    <>~Market & (
        | ( 
            | Volatility[10:]
            & (
                | Since{Max & index[10,20]} 
                | Drawup[20:10] 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[21:,62:,125:,250:] 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.25, 2011.0, 2011.25, 2012.25, 2012.75, 2014.5, 2009.0, 2010.75, 2011.5, 2012.0, 2013.5, 2014.0}), frozenset({2015.0, 2009.25, 2009.75, 2013.25, 2013.75, 2014.25, 2009.5, 2010.5, 2011.75, 2012.5, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (5, 165)
train = (0.66278042792047565, 1.0404231388608216)
scores = (0.14874806134223389, 0.16455136798588213)
score = 0.15664971466405803
>>> t = 1501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 40
    <>~Market & (
        | ( 
            | Volatility[10:]
            & (
                | Since{Max & index[10,20]} 
                | Drawup[20:10] 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[21:,62:,125:,250:] 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2011.25, 2012.0, 2009.0, 2013.25, 2014.0, 2014.5, 2009.75, 2010.0, 2011.75, 2012.25, 2013.0, 2014.75}), frozenset({2010.5, 2015.0, 2011.5, 2012.75, 2009.25, 2013.75, 2009.5, 2010.25, 2011.0, 2012.5, 2013.5, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (103, 184)
train = (1.0414867549806837, 1.094944808041918)
scores = (0.16487659578036085, 0.18609248431622311)
score = 0.17548454004829198
>>> t = 1600 ===================================================================================================
(pair) len(F.columns) = 19
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 38
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doo|doc|daoc)
            & index[0,1,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:] 
                | Since{Max&index[10]} 
                | Since{Min&index[0,10]} 
              )
            & Since[21:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
    | 
        | Return{rr} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.5, 2012.5, 2012.0, 2009.75, 2013.75, 2013.0, 2009.0, 2010.25, 2011.0, 2012.25, 2013.25, 2014.5, 2015.0}), frozenset({2010.75, 2011.5, 2011.75, 2009.25, 2014.25, 2014.0, 2009.5, 2010.0, 2011.25, 2012.75, 2013.5, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (171, 442)
train = (0.91586079560088796, 1.1622650320905186)
scores = (0.36324712228643974, 0.32015951848189783)
score = 0.3417033203841688
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (225, 144)
train = (0.9103685791890227, 0.97598753664450177)
scores = (0.37160871238477255, 0.31031448573959647)
score = 0.3409615990621845
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (333, 1)
train = (0.92201619389230138, 0.45510098900557178)
scores = (0.36378057961007665, 0.23333948576740457)
score = 0.2985600326887406
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (171, 442)
train = (0.91586079560088796, 1.1622650320905186)
scores = (0.36324712228643974, 0.32015951848189783)
score = 0.3417033203841688
>>> t = 1601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 38
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doo|doc|daoc)
            & index[0,1,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:] 
                | Since{Max&index[10]} 
                | Since{Min&index[0,10]} 
              )
            & Since[21:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
    | 
        | Return{rr} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2011.75, 2011.5, 2009.5, 2013.75, 2013.25, 2013.5, 2014.75, 2009.0, 2011.0, 2009.25, 2013.0, 2014.25, 2015.25}), frozenset({2010.0, 2010.75, 2010.5, 2012.25, 2012.5, 2012.75, 2014.0, 2009.75, 2010.25, 2011.25, 2012.0, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (174, 138)
train = (0.838530866082142, 1.172037906718679)
scores = (0.30453815712445159, 0.36386716785668477)
score = 0.3342026624905682
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (197, 142)
train = (0.91175830388651535, 1.3790037696287509)
scores = (0.30781933298374675, 0.36252674645846772)
score = 0.33517303972110724
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (297, 206)
train = (0.80712227411312309, 1.0165065627692365)
scores = (0.29591358013156538, 0.36411586576788002)
score = 0.33001472294972267
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (197, 142)
train = (0.91175830388651535, 1.3790037696287509)
scores = (0.30781933298374675, 0.36252674645846772)
score = 0.33517303972110724
>>> t = 1700 ===================================================================================================
(pair) len(F.columns) = 18
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 18
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [5:,10:,15:,10:5,15:10,15:5,20:10,20:5] 
          }
      )
    | 
        | FracRec[21:] 
#<>#
0
#<>#
    <>0
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.5, 2010.25, 2011.0, 2011.5, 2012.25, 2009.5, 2014.0, 2009.0, 2010.0, 2011.25, 2012.5, 2013.75, 2014.5}), frozenset({2015.0, 2012.75, 2009.75, 2013.25, 2013.5, 2014.25, 2009.25, 2010.75, 2011.75, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (200, 27)
train = (0.57373705915515116, 0.47428531388967604)
scores = (0.2259119876006255, 0.39008978375485032)
score = 0.3080008856777379
>>> t = 1701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 18
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [5:,10:,15:,10:5,15:10,15:5,20:10,20:5] 
          }
      )
    | 
        | FracRec[21:] 
#<>#
0
#<>#
    <>0
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.25, 2012.75, 2012.25, 2009.5, 2009.0, 2013.5, 2009.75, 2010.75, 2011.5, 2012.0, 2013.75, 2014.5, 2015.0}), frozenset({2010.5, 2011.25, 2011.75, 2013.25, 2014.25, 2014.0, 2009.25, 2010.0, 2011.0, 2012.5, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (163, 90)
train = (0.57593411517733384, 0.48411013066057146)
scores = (0.29750176181480159, 0.321553103176274)
score = 0.3095274324955378
>>> t = 1800 ===================================================================================================
(pair) len(F.columns) = 25
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 38
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:, 10:5] 
                | Drawup[10:] 
                | Since{Min&index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [1:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp5dd|Volatility)
            & [10:,15:10,20:10] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[20]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.25, 2012.5, 2009.5, 2013.25, 2014.25, 2014.0, 2014.75, 2009.0, 2010.5, 2011.5, 2012.0, 2013.5, 2014.5}), frozenset({2010.0, 2015.0, 2011.25, 2011.75, 2012.75, 2009.75, 2013.75, 2009.25, 2010.75, 2011.0, 2012.25, 2013.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (7, 34)
train = (0.62741816187058452, 0.54386739394735473)
scores = (0.27805183886205687, 0.15150703922540529)
score = 0.2147794390437311
>>> t = 1801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 38
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:, 10:5] 
                | Drawup[10:] 
                | Since{Min&index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [1:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp5dd|Volatility)
            & [10:,15:10,20:10] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[20]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.25, 2011.25, 2012.5, 2012.0, 2009.25, 2009.0, 2009.75, 2010.5, 2011.5, 2012.25, 2013.5, 2014.75}), frozenset({2015.0, 2011.75, 2013.25, 2013.75, 2014.25, 2014.0, 2009.5, 2010.75, 2011.0, 2012.75, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (26, 33)
train = (0.70750619706587792, 0.87564455767590532)
scores = (0.38271036852228552, 0.33417403196062623)
score = 0.3584422002414559
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (15, 50)
train = (0.5924678023850859, 1.1086816213040172)
scores = (0.35896343702593536, 0.33056691883089506)
score = 0.3447651779284152
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (11, 35)
train = (0.64186039707534626, 0.79285517249506354)
scores = (0.37248459783770416, 0.34795063323068998)
score = 0.36021761553419707
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (11, 35)
train = (0.64186039707534626, 0.79285517249506354)
scores = (0.37248459783770416, 0.34795063323068998)
score = 0.36021761553419707
>>> t = 1900 ===================================================================================================
(pair) len(F.columns) = 108
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 109
0
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|daoc)
            & index[0,1,2,1:2] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Drawdown[1:,20:] 
                | Since{Max & index[0,10]} 
                | Since{Min & index[10]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[10:, 20:]
            & (
                | Since{Min & index[0,10]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [10:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.0, 2011.5, 2011.0, 2012.25, 2012.0, 2009.25, 2009.5, 2010.25, 2011.25, 2012.75, 2013.0, 2014.0, 2015.25}), frozenset({2010.5, 2009.75, 2013.5, 2013.75, 2014.5, 2014.25, 2009.0, 2010.75, 2011.75, 2012.5, 2013.25, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (8, 8)
train = (0.61061826187211821, 0.68997024484808422)
scores = (0.13753780114876646, 0.1822772424592056)
score = 0.15990752180398604
>>> t = 1901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 109
0
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|daoc)
            & index[0,1,2,1:2] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Drawdown[1:,20:] 
                | Since{Max & index[0,10]} 
                | Since{Min & index[10]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[10:, 20:]
            & (
                | Since{Min & index[0,10]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [10:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.25, 2012.25, 2012.5, 2009.0, 2014.0, 2014.5, 2009.5, 2010.0, 2011.0, 2012.75, 2014.75, 2015.25}), frozenset({2010.5, 2011.75, 2009.75, 2013.25, 2013.5, 2013.75, 2009.25, 2010.75, 2011.5, 2012.0, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (132, 40)
train = (0.91919166796991958, 0.95077523367233363)
scores = (0.18980223835891402, 0.23653718985676425)
score = 0.21316971410783914
>>> t = 2000 ===================================================================================================
(pair) len(F.columns) = 166
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 246
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp5dd)
            & [5:,10:,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max&index[10]} 
                | Drawup[20:10] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo|acc|dcc)
            & index[2, 0:1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd)
            & [15:,10:5,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|doo[10:])} 
            & (
                | Drawdown[1:,10:, 10:5,20:10] 
                | Since{Max&index[0,5,20]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[10]} 
                | Drawup[20:10] 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,5:,10:,60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2011.75, 2011.5, 2012.25, 2012.5, 2012.75, 2009.25, 2009.5, 2010.25, 2011.0, 2012.0, 2013.5, 2015.0}), frozenset({2010.75, 2013.25, 2013.75, 2014.5, 2014.25, 2014.0, 2009.0, 2010.5, 2011.25, 2009.75, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (16, 219)
train = (0.70943709319710035, 1.1007560010854469)
scores = (0.26815546073104263, 0.32869310861540862)
score = 0.2984242846732256
>>> t = 2001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 246
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp5dd)
            & [5:,10:,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max&index[10]} 
                | Drawup[20:10] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo|acc|dcc)
            & index[2, 0:1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd)
            & [15:,10:5,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|doo[10:])} 
            & (
                | Drawdown[1:,10:, 10:5,20:10] 
                | Since{Max&index[0,5,20]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[10]} 
                | Drawup[20:10] 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,5:,10:,60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.0, 2011.25, 2009.5, 2013.25, 2013.0, 2009.0, 2010.5, 2011.5, 2012.75, 2013.75, 2014.75, 2015.25}), frozenset({2010.0, 2012.25, 2012.5, 2009.75, 2014.25, 2014.0, 2009.25, 2010.75, 2011.75, 2012.0, 2013.5, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 14)
train = (0.68268844381048599, 0.64899686316760052)
scores = (0.32042349206067539, 0.30660717834827905)
score = 0.3135153352044772
>>> t = 2100 ===================================================================================================
(pair) len(F.columns) = 57
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 70
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [5:,15:,10:5,15:10,15:5,20:10] 
          }
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|dcc)
            & index[0,1,2,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd|Volatility)
            & [6:,15:,18:,6:3,21:18,9:3,21:15,15:6,15:3,18:3,21:6] 
          }
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Max & index[0]} 
                | Drawup[20:] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.5, 2011.75, 2011.0, 2013.25, 2013.0, 2014.5, 2009.5, 2010.25, 2011.5, 2012.5, 2013.5, 2014.0, 2015.0}), frozenset({2010.0, 2012.25, 2012.75, 2009.25, 2009.75, 2014.25, 2009.0, 2010.75, 2011.25, 2012.0, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 26)
train = (0.53365289085845891, 0.7781818039447832)
scores = (0.20740661904941157, 0.32091164833335367)
score = 0.2641591336913826
>>> t = 2101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 70
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [5:,15:,10:5,15:10,15:5,20:10] 
          }
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|dcc)
            & index[0,1,2,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd|Volatility)
            & [6:,15:,18:,6:3,21:18,9:3,21:15,15:6,15:3,18:3,21:6] 
          }
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Max & index[0]} 
                | Drawup[20:] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2012.0, 2009.0, 2013.0, 2013.75, 2013.25, 2014.75, 2014.25, 2009.5, 2011.0, 2012.25, 2013.5, 2014.5, 2015.25}), frozenset({2010.0, 2010.75, 2010.5, 2011.5, 2011.75, 2012.75, 2009.75, 2009.25, 2010.25, 2011.25, 2012.5, 2014.0, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (191, 1)
train = (0.91409494911651212, 0.50488229148495134)
scores = (0.29988478079734887, 0.29833433306985069)
score = 0.29910955693359975
>>> t = 2200 ===================================================================================================
(pair) len(F.columns) = 197
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 325
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [10:,15:,10:5,15:10,20:15,15:5,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:, 10:5,20:10] 
                | Since{Max&index[0,5,10]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Drawdown[ 10:5,20:10] 
                | Since{Max & index[10,20]} 
                | Drawup[10:, 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[0,10]} 
                | Drawup[1:, 10:5,20:10] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doo|doc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [6:,9:,12:,6:3,12:9,15:12,18:15,9:3,18:12,12:3,15:6,18:6,21:9,21:6] 
          }
        | ( 
            <>Return{dd} & VP[1:, 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Drawup[1,20:,20:10] 
                | Since{Min & index[0,10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | 
        | Return{ af} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.0, 2011.75, 2011.0, 2012.0, 2012.75, 2013.0, 2009.5, 2015.0, 2011.25, 2012.25, 2013.5, 2014.5, 2015.25}), frozenset({2010.25, 2010.75, 2009.25, 2009.75, 2013.75, 2014.25, 2014.0, 2009.0, 2010.5, 2011.5, 2012.5, 2013.25, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (96, 394)
train = (1.2837595036828751, 1.2603765635552235)
scores = (0.46403827036394224, 0.42645132764208915)
score = 0.4452447990030157
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (207, 393)
train = (1.549251062990739, 1.3593773544889369)
scores = (0.48827301462986888, 0.46504411095684234)
score = 0.4766585627933556
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (222, 305)
train = (1.3693503220524537, 1.1475070822863149)
scores = (0.46426312799119529, 0.43957025396197819)
score = 0.4519166909765867
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (207, 393)
train = (1.549251062990739, 1.3593773544889369)
scores = (0.48827301462986888, 0.46504411095684234)
score = 0.4766585627933556
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (172, 159)
train = (1.5391939574992248, 1.1703708704575086)
scores = (0.48942978599218884, 0.42182271656611858)
score = 0.4556262512791537
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (208, 376)
train = (1.7553902976164859, 1.6047172773231009)
scores = (0.51781855860195225, 0.48507092999036805)
score = 0.5014447442961601
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (53, 479)
train = (1.1641873654022072, 1.3462819479776)
scores = (0.44480647173062904, 0.46981542430189477)
score = 0.45731094801626193
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (208, 376)
train = (1.7553902976164859, 1.6047172773231009)
scores = (0.51781855860195225, 0.48507092999036805)
score = 0.5014447442961601
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (81, 1)
train = (1.4869315084982664, 0.91716740141000608)
scores = (0.48580122539967768, 0.3807569219976949)
score = 0.4332790736986863
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (106, 130)
train = (1.7464679760749466, 1.5021869932520246)
scores = (0.51481729099427498, 0.47715974050105531)
score = 0.4959885157476651
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (40, 376)
train = (1.1850960715758425, 1.3744890846854252)
scores = (0.45984702317793735, 0.46109421065557915)
score = 0.4604706169167583
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (106, 130)
train = (1.7464679760749466, 1.5021869932520246)
scores = (0.51481729099427498, 0.47715974050105531)
score = 0.4959885157476651
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (67, 1)
train = (1.5033740625278278, 0.9883650554616823)
scores = (0.47917692287134611, 0.39964535862993605)
score = 0.4394111407506411
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (53, 119)
train = (1.7187417504898985, 1.6053777013014099)
scores = (0.49111135406153195, 0.47229382206477777)
score = 0.48170258806315486
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (38, 291)
train = (1.2187353627469728, 1.3702142750559603)
scores = (0.47139870152924829, 0.45799815569064195)
score = 0.46469842860994515
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (53, 119)
train = (1.7187417504898985, 1.6053777013014099)
scores = (0.49111135406153195, 0.47229382206477777)
score = 0.48170258806315486
>>> t = 2201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 325
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [10:,15:,10:5,15:10,20:15,15:5,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:, 10:5,20:10] 
                | Since{Max&index[0,5,10]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Drawdown[ 10:5,20:10] 
                | Since{Max & index[10,20]} 
                | Drawup[10:, 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[0,10]} 
                | Drawup[1:, 10:5,20:10] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doo|doc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [6:,9:,12:,6:3,12:9,15:12,18:15,9:3,18:12,12:3,15:6,18:6,21:9,21:6] 
          }
        | ( 
            <>Return{dd} & VP[1:, 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Drawup[1,20:,20:10] 
                | Since{Min & index[0,10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | 
        | Return{ af} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.0, 2011.25, 2013.75, 2013.25, 2014.25, 2014.75, 2009.25, 2010.75, 2011.75, 2012.0, 2013.5, 2014.5, 2015.0}), frozenset({2010.5, 2011.5, 2012.5, 2012.75, 2009.0, 2009.75, 2009.5, 2010.25, 2011.0, 2012.25, 2013.0, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (71, 28)
train = (1.0328075751869148, 0.74916184433387312)
scores = (0.30925901141090228, 0.335945991047368)
score = 0.32260250122913514
>>> t = 2202 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 325
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [10:,15:,10:5,15:10,20:15,15:5,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:, 10:5,20:10] 
                | Since{Max&index[0,5,10]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Drawdown[ 10:5,20:10] 
                | Since{Max & index[10,20]} 
                | Drawup[10:, 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[0,10]} 
                | Drawup[1:, 10:5,20:10] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doo|doc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [6:,9:,12:,6:3,12:9,15:12,18:15,9:3,18:12,12:3,15:6,18:6,21:9,21:6] 
          }
        | ( 
            <>Return{dd} & VP[1:, 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Drawup[1,20:,20:10] 
                | Since{Min & index[0,10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | 
        | Return{ af} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.75, 2010.0, 2011.25, 2012.75, 2012.0, 2009.5, 2013.0, 2009.25, 2010.5, 2011.0, 2009.75, 2013.75, 2014.75}), frozenset({2015.0, 2011.75, 2012.5, 2013.5, 2014.25, 2014.0, 2009.0, 2010.25, 2011.5, 2012.25, 2013.25, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (66, 102)
train = (0.92375755412744309, 1.0689701947818295)
scores = (0.36048748649594536, 0.26799724973991762)
score = 0.3142423681179315
>>> t = 2300 ===================================================================================================
(pair) len(F.columns) = 36
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 47
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|vp1dd)
            & index[0,2, 0:1,0:2] 
          }
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|doc|vp1dd)
            & index[0, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [5:,10:,15:,15:5,20:10] 
          }
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                | Since{Max & index[0,10]} 
                | Since{Min & index[5,20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2012.25, 2012.5, 2009.0, 2013.75, 2013.25, 2014.0, 2009.25, 2010.0, 2011.0, 2012.0, 2013.0, 2014.75, 2015.0}), frozenset({2010.5, 2010.75, 2011.5, 2011.75, 2009.75, 2014.25, 2009.5, 2010.25, 2011.25, 2012.75, 2013.5, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (274, 301)
train = (0.8481909849439544, 0.97775253661927453)
scores = (0.41071482642933588, 0.29215042002414177)
score = 0.35143262322673885
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (198, 400)
train = (0.92501695129617678, 1.4113718715816201)
scores = (0.4075397127298136, 0.30131933486079898)
score = 0.3544295237953063
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (281, 643)
train = (0.6771833731097634, 0.99148905546819188)
scores = (0.40750745591778953, 0.28935728663487509)
score = 0.3484323712763323
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (198, 400)
train = (0.92501695129617678, 1.4113718715816201)
scores = (0.4075397127298136, 0.30131933486079898)
score = 0.3544295237953063
>>> t = 2301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 47
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|vp1dd)
            & index[0,2, 0:1,0:2] 
          }
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|doc|vp1dd)
            & index[0, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [5:,10:,15:,15:5,20:10] 
          }
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                | Since{Max & index[0,10]} 
                | Since{Min & index[5,20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2011.75, 2011.25, 2012.0, 2012.25, 2012.5, 2014.25, 2009.25, 2010.0, 2011.5, 2012.75, 2013.75, 2014.0, 2015.0}), frozenset({2010.5, 2010.75, 2009.75, 2013.25, 2013.5, 2014.5, 2009.5, 2010.25, 2011.0, 2009.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (135, 418)
train = (0.92294405940115798, 0.8788918134236241)
scores = (0.40823226655614253, 0.25216341690981031)
score = 0.3301978417329764
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (50, 290)
train = (0.92821919658581464, 0.93909652744752892)
scores = (0.40358330597188785, 0.24435301518076127)
score = 0.32396816057632455
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (7, 472)
train = (0.41308121660078317, 0.77081056046895857)
scores = (0.38154171921295088, 0.24091769595299228)
score = 0.3112297075829716
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (135, 418)
train = (0.92294405940115798, 0.8788918134236241)
scores = (0.40823226655614253, 0.25216341690981031)
score = 0.3301978417329764
>>> t = 2400 ===================================================================================================
(pair) len(F.columns) = 22
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 46
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|dcc)
            & index[1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd|Volatility)
            & [3:,6:,9:,12:,15:,9:6,18:12,18:9,21:12,15:3,18:6,21:9] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0]} 
                | Drawup[10:] 
                | Since{Min & index[0]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.75, 2011.5, 2012.25, 2012.0, 2009.75, 2014.5, 2009.25, 2010.0, 2011.0, 2012.75, 2013.0, 2014.75, 2015.25}), frozenset({2010.5, 2011.75, 2009.0, 2013.5, 2013.75, 2014.0, 2009.5, 2010.25, 2011.25, 2012.5, 2013.25, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (191, 72)
train = (1.0980163024825307, 0.75524026555209556)
scores = (0.3751538869636844, 0.2539808567591112)
score = 0.3145673718613978
>>> t = 2401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 46
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|dcc)
            & index[1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd|Volatility)
            & [3:,6:,9:,12:,15:,9:6,18:12,18:9,21:12,15:3,18:6,21:9] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0]} 
                | Drawup[10:] 
                | Since{Min & index[0]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2015.0, 2011.25, 2011.75, 2012.25, 2012.0, 2009.25, 2014.25, 2009.5, 2010.5, 2011.0, 2012.5, 2014.75, 2015.25}), frozenset({2010.0, 2010.75, 2009.75, 2013.25, 2013.5, 2013.75, 2014.0, 2009.0, 2010.25, 2011.5, 2012.75, 2013.0, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (71, 1)
train = (0.93371964831024479, 0.5751111070805508)
scores = (0.34341940539870547, 0.19427567284861319)
score = 0.26884753912365933
>>> t = 2500 ===================================================================================================
(pair) len(F.columns) = 81
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 142
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo)
            & index[1,2, 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:])} 
            & (
                | Drawdown[1:,20:,20:10] 
                | Since{Min&index[0,5]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[0,10]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [20:] 
      }
    | 
        <>Return{pure&~dd} & VP[10:] 
        | FracRec[21:,62:,125:,250:] 
    | 
        Time{ short}
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp1dd)
            & [3:,9:,12:,15:,18:,9:3,12:6,            15:9,21:15,12:3,15:6,15:3,21:9,21:6] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 125:] 
          )
      )
#<>#
0
#<>#
    <>0
len(samps) = 2
(frozenset({2010.5, 2011.75, 2012.0, 2012.5, 2013.0, 2013.25, 2014.0, 2010.75, 2011.0, 2012.75, 2013.75, 2014.5, 2015.0}), frozenset({2010.25, 2011.5, 2009.0, 2009.25, 2009.75, 2014.25, 2009.5, 2010.0, 2011.25, 2012.25, 2013.5, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (48, 601)
train = (1.1788199621186208, 1.2999568786371583)
scores = (0.48716538353454192, 0.42146706241061849)
score = 0.45431622297258023
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (111, 560)
train = (1.4757605367921733, 1.427097599630625)
scores = (0.45529736740624815, 0.4219143328002799)
score = 0.43860585010326403
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (205, 1)
train = (1.4779257804483432, 0.74463700306001834)
scores = (0.53596852349447444, 0.28806929700828682)
score = 0.4120189102513806
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (48, 601)
train = (1.1788199621186208, 1.2999568786371583)
scores = (0.48716538353454192, 0.42146706241061849)
score = 0.45431622297258023
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (50, 317)
train = (1.3422869333913037, 1.297544773283124)
scores = (0.51099855751176559, 0.4011914790756429)
score = 0.45609501829370425
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (60, 310)
train = (1.5103644423433282, 1.450863844549372)
scores = (0.47451546445225845, 0.42471117603081909)
score = 0.44961332024153877
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (95, 507)
train = (1.4146572502399444, 1.295855950478674)
scores = (0.52864932004090981, 0.40693931278666862)
score = 0.4677943164137892
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (95, 507)
train = (1.4146572502399444, 1.295855950478674)
scores = (0.52864932004090981, 0.40693931278666862)
score = 0.4677943164137892
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (50, 596)
train = (1.4811550724210123, 1.5201345336591923)
scores = (0.5163183204397146, 0.44758887982647005)
score = 0.4819536001330923
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (56, 416)
train = (1.6420550950890722, 1.7568165183174373)
scores = (0.47536005945508786, 0.43916809034717402)
score = 0.45726407490113097
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (101, 967)
train = (1.4695069227823185, 1.5018637991124115)
scores = (0.54682052261705894, 0.46628494857165959)
score = 0.5065527355943593
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (101, 967)
train = (1.4695069227823185, 1.5018637991124115)
scores = (0.54682052261705894, 0.46628494857165959)
score = 0.5065527355943593
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (37, 672)
train = (1.4824169336948307, 1.6335913211288164)
scores = (0.49233223612975957, 0.4614322455607382)
score = 0.4768822408452489
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (86, 253)
train = (1.8982496228373493, 1.7330434681693416)
scores = (0.51412380646732614, 0.45641095158178757)
score = 0.48526737902455686
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (82, 542)
train = (1.4586438666689416, 1.4435566877720876)
scores = (0.55232178760046757, 0.4458902284659087)
score = 0.49910600803318816
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (82, 542)
train = (1.4586438666689416, 1.4435566877720876)
scores = (0.55232178760046757, 0.4458902284659087)
score = 0.49910600803318816
>>> t = 2501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 142
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo)
            & index[1,2, 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:])} 
            & (
                | Drawdown[1:,20:,20:10] 
                | Since{Min&index[0,5]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[0,10]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [20:] 
      }
    | 
        <>Return{pure&~dd} & VP[10:] 
        | FracRec[21:,62:,125:,250:] 
    | 
        Time{ short}
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp1dd)
            & [3:,9:,12:,15:,18:,9:3,12:6,            15:9,21:15,12:3,15:6,15:3,21:9,21:6] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 125:] 
          )
      )
#<>#
0
#<>#
    <>0
len(samps) = 2
(frozenset({2010.5, 2012.25, 2012.5, 2013.25, 2013.5, 2014.5, 2009.75, 2010.75, 2011.75, 2012.0, 2013.0, 2014.0, 2015.0}), frozenset({2010.25, 2011.25, 2011.5, 2009.0, 2009.25, 2014.25, 2009.5, 2010.0, 2011.0, 2012.75, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (120, 2)
train = (1.4480693847807409, 0.61547111290228385)
scores = (0.44592798133149053, 0.32055936330883722)
score = 0.3832436723201639
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (103, 2)
train = (1.4839852007180079, 0.58620779514176258)
scores = (0.51988964583456088, 0.33062101247895503)
score = 0.42525532915675796
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (4, 382)
train = (0.77011186584295732, 1.0778167153485765)
scores = (0.437747287272371, 0.43837145788406406)
score = 0.43805937257821753
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (4, 382)
train = (0.77011186584295732, 1.0778167153485765)
scores = (0.437747287272371, 0.43837145788406406)
score = 0.43805937257821753
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (70, 313)
train = (1.4478592299099091, 1.2036241867904269)
scores = (0.44217062561649961, 0.45727140367905161)
score = 0.4497210146477756
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (158, 517)
train = (1.7775425133450398, 1.626975570341344)
scores = (0.5336309021949931, 0.48506146037086878)
score = 0.509346181282931
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (79, 289)
train = (1.3530474446173404, 1.1220868648815856)
scores = (0.47998122982246333, 0.43858688873030283)
score = 0.45928405927638305
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (158, 517)
train = (1.7775425133450398, 1.626975570341344)
scores = (0.5336309021949931, 0.48506146037086878)
score = 0.509346181282931
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (55, 315)
train = (1.4952792055934585, 1.2918271264535557)
scores = (0.47165845190627181, 0.4612414735350146)
score = 0.4664499627206432
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (104, 359)
train = (1.8033947333594609, 1.7006401494239012)
scores = (0.52426589097181431, 0.46998007286494364)
score = 0.497122981918379
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (87, 308)
train = (1.4576779318651456, 1.1861784395344506)
scores = (0.50033565056954243, 0.46320203543058991)
score = 0.48176884300006617
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (104, 359)
train = (1.8033947333594609, 1.7006401494239012)
scores = (0.52426589097181431, 0.46998007286494364)
score = 0.497122981918379
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (119, 253)
train = (1.6685263273824023, 1.3255517363420048)
scores = (0.486649892397157, 0.49217998634144389)
score = 0.4894149393693005
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (72, 275)
train = (1.8693715912232767, 1.7762559330584564)
scores = (0.51789240126985936, 0.4674353293855098)
score = 0.4926638653276846
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (68, 312)
train = (1.4487881814312071, 1.2576406314093898)
scores = (0.48622231238157804, 0.44290759867882612)
score = 0.46456495553020205
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (72, 275)
train = (1.8693715912232767, 1.7762559330584564)
scores = (0.51789240126985936, 0.4674353293855098)
score = 0.4926638653276846
>>> t = 2502 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 142
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo)
            & index[1,2, 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:])} 
            & (
                | Drawdown[1:,20:,20:10] 
                | Since{Min&index[0,5]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[0,10]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [20:] 
      }
    | 
        <>Return{pure&~dd} & VP[10:] 
        | FracRec[21:,62:,125:,250:] 
    | 
        Time{ short}
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp1dd)
            & [3:,9:,12:,15:,18:,9:3,12:6,            15:9,21:15,12:3,15:6,15:3,21:9,21:6] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 125:] 
          )
      )
#<>#
0
#<>#
    <>0
len(samps) = 2
(frozenset({2010.25, 2010.0, 2011.25, 2012.75, 2009.0, 2013.0, 2009.5, 2010.75, 2011.75, 2012.5, 2013.75, 2014.25, 2015.0}), frozenset({2011.5, 2012.25, 2009.75, 2013.5, 2014.5, 2014.0, 2009.25, 2010.5, 2011.0, 2012.0, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (111, 1)
train = (1.0422996492517271, 0.67669117169028947)
scores = (0.39289888923200111, 0.3097909889452915)
score = 0.3513449390886463
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (194, 1)
train = (1.2138183328473027, 0.52313555357629438)
scores = (0.40900628554615071, 0.27138278037418984)
score = 0.34019453296017027
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (177, 184)
train = (1.126219841675888, 1.0768877887436803)
scores = (0.40645954227926823, 0.35790520540182319)
score = 0.3821823738405457
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (177, 184)
train = (1.126219841675888, 1.0768877887436803)
scores = (0.40645954227926823, 0.35790520540182319)
score = 0.3821823738405457
>>> t = 2600 ===================================================================================================
(pair) len(F.columns) = 63
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 123
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 10:5] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [5:,10:,20:] 
      }
    | 
        <>FaceValue{ Open} 
        | Return{mix[1,3,4,5,6,7,11,16,17,18]}
        | Return{ af} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [3:,6:,9:,12:,15:,18:,6:3,9:6,15:12,18:12,12:3,21:12] 
          }
      )
    | 
        | FracRec[62:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2012.75, 2013.0, 2013.75, 2014.0, 2014.5, 2009.75, 2010.5, 2011.5, 2012.5, 2013.5, 2014.75, 2015.0}), frozenset({2010.25, 2011.25, 2011.75, 2012.25, 2009.0, 2009.25, 2009.5, 2010.0, 2011.0, 2012.0, 2013.25, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 60)
train = (0.72905648883917706, 0.90307181380360002)
scores = (0.22913617174492668, 0.39948800055219746)
score = 0.3143120861485621
>>> t = 2601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 123
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 10:5] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [5:,10:,20:] 
      }
    | 
        <>FaceValue{ Open} 
        | Return{mix[1,3,4,5,6,7,11,16,17,18]}
        | Return{ af} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [3:,6:,9:,12:,15:,18:,6:3,9:6,15:12,18:12,12:3,21:12] 
          }
      )
    | 
        | FracRec[62:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2011.25, 2011.5, 2012.25, 2009.0, 2013.75, 2014.0, 2009.25, 2015.0, 2011.0, 2012.0, 2013.0, 2014.5, 2015.25}), frozenset({2010.25, 2010.5, 2010.75, 2012.75, 2009.75, 2013.5, 2014.25, 2009.5, 2010.0, 2011.75, 2012.5, 2013.25, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (210, 157)
train = (1.2911628164675186, 1.1698670563866091)
scores = (0.43122299043870416, 0.33081386918311262)
score = 0.3810184298109084
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (182, 6)
train = (1.3419758563801127, 0.76657565196231503)
scores = (0.44244704056798623, 0.28146080599975493)
score = 0.36195392328387055
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (193, 420)
train = (1.2509705568966287, 1.4423354271869475)
scores = (0.40177800193662028, 0.40664972082552059)
score = 0.4042138613810704
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (193, 420)
train = (1.2509705568966287, 1.4423354271869475)
scores = (0.40177800193662028, 0.40664972082552059)
score = 0.4042138613810704
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (136, 234)
train = (1.3524680801759714, 1.5494642033058841)
scores = (0.44306717187814204, 0.36921230460731275)
score = 0.4061397382427274
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (154, 4)
train = (1.5348864608164456, 0.96992335045189981)
scores = (0.46603528557306761, 0.33632602996667593)
score = 0.4011806577698718
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (177, 370)
train = (1.3287003319759323, 1.5325828837202835)
scores = (0.39718421269375526, 0.41907732571795242)
score = 0.40813076920585384
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (177, 370)
train = (1.3287003319759323, 1.5325828837202835)
scores = (0.39718421269375526, 0.41907732571795242)
score = 0.40813076920585384
>>> t = 2700 ===================================================================================================
(pair) len(F.columns) = 44
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 62
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo|doc|daoc|vp1dd)
            & index[1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd)
            & [18:,6:3,9:6,15:12,21:18,            15:9,12:3,15:6,18:9,15:3,18:6,18:3,21:6] 
          }
      )
    | 
        <>AssetEnc{InUni} 
    | 
        Time{ short}
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(vp1dd)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{dd} & VP[1:, 10:] 
            & (
                | Drawdown[ 10:5] 
                | Since{Max & index[0,5,10]} 
                | Drawup[20:10] 
                | Since{Min & index[20]} 
              )
            & Since[21:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[1:,10:, 10:5,20:10] 
                | Since{Max & index[5]} 
                | Drawup[1:,20:] 
                | Since{Min & index[5,10]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return)
        & [1:,10:,60:] 
      }
    | 
        Time{long| short}
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.5, 2010.75, 2011.75, 2011.25, 2012.25, 2013.0, 2013.25, 2009.5, 2015.0, 2011.0, 2012.0, 2013.75, 2015.25}), frozenset({2010.0, 2012.75, 2009.25, 2009.75, 2014.5, 2014.25, 2014.0, 2009.0, 2010.25, 2011.5, 2012.5, 2013.5, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (455, 21)
train = (1.3979510730084752, 0.60323902563466991)
scores = (0.4717333166231425, 0.22099783862780281)
score = 0.34636557762547265
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (244, 43)
train = (1.2987021713798461, 0.69600222029132996)
scores = (0.47548912114875358, 0.21928983974698316)
score = 0.3473894804478684
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (412, 59)
train = (1.2390001477749357, 0.66232196309003133)
scores = (0.42659134510489005, 0.218986627352796)
score = 0.322788986228843
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (244, 43)
train = (1.2987021713798461, 0.69600222029132996)
scores = (0.47548912114875358, 0.21928983974698316)
score = 0.3473894804478684
>>> t = 2701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 62
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo|doc|daoc|vp1dd)
            & index[1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd)
            & [18:,6:3,9:6,15:12,21:18,            15:9,12:3,15:6,18:9,15:3,18:6,18:3,21:6] 
          }
      )
    | 
        <>AssetEnc{InUni} 
    | 
        Time{ short}
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(vp1dd)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{dd} & VP[1:, 10:] 
            & (
                | Drawdown[ 10:5] 
                | Since{Max & index[0,5,10]} 
                | Drawup[20:10] 
                | Since{Min & index[20]} 
              )
            & Since[21:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[1:,10:, 10:5,20:10] 
                | Since{Max & index[5]} 
                | Drawup[1:,20:] 
                | Since{Min & index[5,10]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return)
        & [1:,10:,60:] 
      }
    | 
        Time{long| short}
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[1]
      }
len(samps) = 2
(frozenset({2011.75, 2009.0, 2009.25, 2013.5, 2013.0, 2014.25, 2009.75, 2010.25, 2011.5, 2012.5, 2013.25, 2014.0, 2015.0}), frozenset({2010.5, 2010.75, 2011.25, 2012.25, 2012.75, 2014.5, 2009.5, 2010.0, 2011.0, 2012.0, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (4, 17)
train = (0.52093674952769475, 0.56547437261011124)
scores = (0.27961204433773301, 0.21670626713664859)
score = 0.2481591557371908
>>> t = 2800 ===================================================================================================
(pair) len(F.columns) = 51
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 111
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [12:,15:,9:6,9:3,            15:9,21:15,12:3,15:3,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Max & index[10]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [12:,15:,9:6,9:3,            15:9,21:15,12:3,15:3,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Max & index[10]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp1dd|vp5dd)
            & [3:,6:,12:9,15:12,18:15,9:3,            15:9,18:12,12:3,21:12,18:6,21:9,18:3] 
          }
        | ( 
            <>Return{dd} & VP[1:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 10:5,20:10] 
                | Since{Max & index[0,5]} 
                | Since{Min & index[0,5,10]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| Volatility)
        & [60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.5, 2010.0, 2010.75, 2012.0, 2012.75, 2009.0, 2014.25, 2014.5, 2009.75, 2010.25, 2011.75, 2012.5, 2014.75}), frozenset({2011.25, 2011.5, 2009.25, 2013.25, 2013.5, 2013.75, 2009.5, 2015.0, 2011.0, 2012.25, 2013.0, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 13)
train = (0.59375750445371878, 0.64568376805697758)
scores = (0.38169794099852311, 0.3554719388195598)
score = 0.36858493990904145
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (28, 40)
train = (0.76634296033449678, 0.67898665950015358)
scores = (0.36791098898652069, 0.27833293166966228)
score = 0.3231219603280915
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (107, 50)
train = (0.91413536978467302, 0.71423459553402124)
scores = (0.38639831650601214, 0.39280043907845691)
score = 0.3895993777922345
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (107, 50)
train = (0.91413536978467302, 0.71423459553402124)
scores = (0.38639831650601214, 0.39280043907845691)
score = 0.3895993777922345
>>> t = 2801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 111
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [12:,15:,9:6,9:3,            15:9,21:15,12:3,15:3,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Max & index[10]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [12:,15:,9:6,9:3,            15:9,21:15,12:3,15:3,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Max & index[10]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp1dd|vp5dd)
            & [3:,6:,12:9,15:12,18:15,9:3,            15:9,18:12,12:3,21:12,18:6,21:9,18:3] 
          }
        | ( 
            <>Return{dd} & VP[1:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 10:5,20:10] 
                | Since{Max & index[0,5]} 
                | Since{Min & index[0,5,10]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| Volatility)
        & [60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.25, 2011.75, 2012.0, 2012.5, 2009.0, 2013.75, 2009.5, 2010.0, 2011.0, 2012.25, 2013.5, 2014.75, 2015.25}), frozenset({2010.5, 2011.5, 2009.75, 2013.25, 2014.25, 2014.0, 2009.25, 2010.75, 2011.25, 2012.75, 2013.0, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (160, 4)
train = (0.96832847135841493, 0.61408030484345688)
scores = (0.38799474588173027, 0.40313378644558795)
score = 0.39556426616365914
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (56, 2)
train = (0.85214004675454036, 0.5289914447853945)
scores = (0.38288427417703308, 0.37211957326127898)
score = 0.37750192371915603
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 3)
train = (0.54791995001014693, 0.61915350564294636)
scores = (0.38963699947077329, 0.40103366670725149)
score = 0.39533533308901236
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (160, 4)
train = (0.96832847135841493, 0.61408030484345688)
scores = (0.38799474588173027, 0.40313378644558795)
score = 0.39556426616365914
>>> t = 2900 ===================================================================================================
(pair) len(F.columns) = 36
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 60
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo)
            & index[0,2, 0:1,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:] 
                | Since{Max&index[10]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        | Return{ it} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|acc|dcc|vp1dd)
            & index[2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd)
            & [3:,6:,9:,12:,18:,6:3,9:6,12:9,21:18,9:3,12:6,12:3,15:6,21:12,15:3,18:3,21:6,21:3] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.5, 2011.0, 2012.0, 2012.25, 2009.25, 2013.25, 2014.75, 2009.5, 2010.75, 2011.5, 2012.75, 2013.75, 2014.0}), frozenset({2010.25, 2015.0, 2011.75, 2009.75, 2013.5, 2014.25, 2009.0, 2010.0, 2011.25, 2012.5, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (111, 294)
train = (0.81013757720473734, 0.8682805492643646)
scores = (0.42723830310857552, 0.27937993060044841)
score = 0.35330911685451194
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (72, 159)
train = (0.75419685614033904, 0.76180567716811431)
scores = (0.41293892652241021, 0.28995916517431969)
score = 0.35144904584836495
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (139, 308)
train = (0.83043486552358037, 0.83218824103570121)
scores = (0.42374801191501504, 0.28278217832221147)
score = 0.35326509511861326
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (111, 294)
train = (0.81013757720473734, 0.8682805492643646)
scores = (0.42723830310857552, 0.27937993060044841)
score = 0.35330911685451194
>>> t = 2901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 60
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo)
            & index[0,2, 0:1,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:] 
                | Since{Max&index[10]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        | Return{ it} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|acc|dcc|vp1dd)
            & index[2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd)
            & [3:,6:,9:,12:,18:,6:3,9:6,12:9,21:18,9:3,12:6,12:3,15:6,21:12,15:3,18:3,21:6,21:3] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.25, 2009.5, 2009.0, 2013.25, 2014.75, 2014.0, 2009.25, 2010.0, 2011.25, 2012.5, 2013.0, 2014.25, 2015.0}), frozenset({2010.5, 2011.5, 2011.75, 2012.25, 2012.75, 2013.75, 2009.75, 2010.75, 2011.0, 2012.0, 2013.5, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (356, 219)
train = (0.82374994810798718, 1.1018814044465781)
scores = (0.38304258207681408, 0.42895317414176359)
score = 0.40599787810928883
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (170, 89)
train = (0.76449014386545489, 1.012712229876443)
scores = (0.37106565980472866, 0.41346716647254228)
score = 0.3922664131386355
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (219, 298)
train = (0.71067020312650953, 1.0283184511014547)
scores = (0.38122404535942817, 0.41056681602124134)
score = 0.3958954306903347
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (356, 219)
train = (0.82374994810798718, 1.1018814044465781)
scores = (0.38304258207681408, 0.42895317414176359)
score = 0.40599787810928883
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (71, 246)
train = (0.71791657304570999, 1.340598759524573)
scores = (0.37136059479007205, 0.42838758321350734)
score = 0.39987408900178967
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (121, 93)
train = (0.84651136995794996, 1.3369502891140737)
scores = (0.38711176582153162, 0.40814534669567082)
score = 0.3976285562586012
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (171, 333)
train = (0.73695149459958109, 1.1934619533859514)
scores = (0.38309715553321383, 0.42314152280837364)
score = 0.40311933917079373
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (171, 333)
train = (0.73695149459958109, 1.1934619533859514)
scores = (0.38309715553321383, 0.42314152280837364)
score = 0.40311933917079373
>>> t = 3000 ===================================================================================================
(pair) len(F.columns) = 137
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 160
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doc|daoc|vp1dd)
            & index[0,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|Volatility)
            & [9:,6:3,15:12,18:15,21:18,12:6,            15:9,18:12,12:3,15:6,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 10:5,20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 125:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo)
            & index[0,1,2,1:2,0:2] 
          }
        | ( 
            <> Volatility[20:] 
            | Volatility[10:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[0,5,10]} 
                | Drawup[ 5:,10:, 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.5, 2015.25, 2012.0, 2009.0, 2009.5, 2014.75, 2014.25, 2014.5, 2009.25, 2010.75, 2012.75, 2014.0, 2015.0}), frozenset({2010.0, 2011.25, 2011.5, 2011.75, 2012.5, 2013.25, 2013.5, 2013.75, 2009.75, 2010.25, 2011.0, 2012.25, 2013.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (677, 248)
train = (1.0394908309211055, 1.6216272136754424)
scores = (0.41462370212238447, 0.27971806198296723)
score = 0.3471708820526759
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (331, 199)
train = (0.95628475241149125, 1.6334320801351201)
scores = (0.39217848946607575, 0.26794354656753161)
score = 0.33006101801680365
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (399, 154)
train = (0.93247740507743471, 1.3075414516363042)
scores = (0.40726140314965004, 0.26886494899278784)
score = 0.33806317607121894
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (677, 248)
train = (1.0394908309211055, 1.6216272136754424)
scores = (0.41462370212238447, 0.27971806198296723)
score = 0.3471708820526759
>>> t = 3001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 160
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doc|daoc|vp1dd)
            & index[0,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|Volatility)
            & [9:,6:3,15:12,18:15,21:18,12:6,            15:9,18:12,12:3,15:6,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 10:5,20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 125:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo)
            & index[0,1,2,1:2,0:2] 
          }
        | ( 
            <> Volatility[20:] 
            | Volatility[10:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[0,5,10]} 
                | Drawup[ 5:,10:, 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.5, 2010.25, 2009.25, 2013.75, 2014.25, 2014.5, 2009.0, 2010.75, 2011.5, 2012.5, 2013.0, 2014.75, 2015.25}), frozenset({2011.0, 2011.25, 2012.25, 2012.75, 2009.75, 2013.5, 2009.5, 2010.0, 2011.75, 2012.0, 2013.25, 2014.0, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (217, 50)
train = (0.91999715044952213, 1.0246285632263854)
scores = (0.29597543106065294, 0.33328079354113394)
score = 0.31462811230089344
>>> t = 3100 ===================================================================================================
(pair) len(F.columns) = 20
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 42
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doc)
            & index[0,1, 0:1,0:2] 
          }
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP| Volatility)
        & [10:,20:,60:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.75, 2011.0, 2012.75, 2012.25, 2009.0, 2013.5, 2009.75, 2010.0, 2011.75, 2012.0, 2013.75, 2015.25}), frozenset({2011.5, 2009.25, 2013.25, 2014.5, 2014.25, 2014.0, 2009.5, 2010.5, 2011.25, 2012.5, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (39, 3)
train = (0.59673472948512252, 0.52601763377686539)
scores = (0.21425672447596084, 0.24227364822944095)
score = 0.22826518635270088
>>> t = 3101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 42
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doc)
            & index[0,1, 0:1,0:2] 
          }
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP| Volatility)
        & [10:,20:,60:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.75, 2010.0, 2011.5, 2012.25, 2012.5, 2009.0, 2009.5, 2009.75, 2010.5, 2011.0, 2012.0, 2013.75, 2014.75}), frozenset({2015.0, 2011.75, 2013.25, 2013.5, 2014.25, 2014.0, 2009.25, 2010.25, 2011.25, 2012.75, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (27, 15)
train = (0.53983520763460602, 0.56935529864565015)
scores = (0.24621203351597218, 0.20184470332529345)
score = 0.2240283684206328
>>> t = 3200 ===================================================================================================
(pair) len(F.columns) = 61
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 107
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|acc|doc)
            & index[0,2, 0:1,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[1:,10:,20:,20:10] 
                | Since{Min&index[20]} 
              )
            & Since[21:] 
          )
        | ( 
            <>Return{dd} & VP[1:, 10:] 
            & (
                | Drawdown[1:,20:] 
                | Since{Max & index[10,20]} 
                | Since{Min & index[0,5]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [5:] 
      }
    | 
        | FracRec[21:] 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doc|vp1dd)
            & index[0, 0:1,1:2,0:2] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|doo|daoc)
            & index[ 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo)
            & [10:,15:,10:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Min&index[20]} 
              )
            & Since[21:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[20]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| Volatility)
        & [5:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2011.0, 2009.5, 2013.0, 2013.5, 2014.75, 2014.5, 2009.75, 2010.0, 2011.25, 2012.5, 2013.25, 2014.0, 2015.0}), frozenset({2010.25, 2010.75, 2011.75, 2012.25, 2012.75, 2009.25, 2009.0, 2010.5, 2011.5, 2012.0, 2013.75, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (164, 34)
train = (1.0775423729363658, 0.54478195377669691)
scores = (0.24921205657628623, 0.36102878116330039)
score = 0.3051204188697933
>>> t = 3201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 107
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|acc|doc)
            & index[0,2, 0:1,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[1:,10:,20:,20:10] 
                | Since{Min&index[20]} 
              )
            & Since[21:] 
          )
        | ( 
            <>Return{dd} & VP[1:, 10:] 
            & (
                | Drawdown[1:,20:] 
                | Since{Max & index[10,20]} 
                | Since{Min & index[0,5]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [5:] 
      }
    | 
        | FracRec[21:] 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doc|vp1dd)
            & index[0, 0:1,1:2,0:2] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|doo|daoc)
            & index[ 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo)
            & [10:,15:,10:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Min&index[20]} 
              )
            & Since[21:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[20]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| Volatility)
        & [5:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.5, 2010.25, 2011.25, 2011.5, 2012.25, 2012.5, 2013.25, 2009.75, 2010.0, 2011.0, 2012.0, 2013.0, 2014.5}), frozenset({2015.0, 2009.0, 2009.25, 2013.75, 2014.25, 2014.0, 2009.5, 2010.75, 2011.75, 2012.75, 2013.5, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (97, 1)
train = (0.93702804019207364, 0.53201427814449564)
scores = (0.32444620903747551, 0.31395468432893814)
score = 0.3192004466832068
>>> t = 3300 ===================================================================================================
(pair) len(F.columns) = 95
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 130
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|daoc|vp1dd)
            & index[0,1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd)
            & [9:,15:,9:3,            15:9,21:15,15:6,18:9,21:12,18:6,21:9,18:3,21:6,21:3] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Min & index[10]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo|doo|daoc|vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                | Drawdown[10:,20:, 10:5,20:10] 
                | Drawup[1:] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                <>Drawdown[20:10] 
                | Drawup[20:] 
                | Since{Min & index[5]} 
              )
            & Since[ 62:, 125:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo)
            & [6:,9:,15:,18:,9:6,15:12,9:3,12:6,12:3,15:6,18:3,21:6,21:3] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:] 
                | Since{Max & index[5]} 
                | Drawup[20:] 
                | Since{Min & index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:,10:] 
      }
    | 
        | FracRec[21:,62:,125:,250:] 
#<>#
    <>0
    | Corr & Corr{ 
        <>[62]
        & ay[1,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2012.5, 2012.25, 2009.75, 2009.25, 2009.0, 2013.25, 2009.5, 2010.25, 2011.75, 2012.0, 2013.75, 2014.25, 2015.25}), frozenset({2010.5, 2010.75, 2011.25, 2011.5, 2013.5, 2014.5, 2014.0, 2010.0, 2011.0, 2012.75, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (141, 170)
train = (0.89238149025814051, 1.1584613781647846)
scores = (0.47127019160295508, 0.22094377860945252)
score = 0.3461069851062038
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (158, 2)
train = (0.9496834637149264, 0.61924335973199118)
scores = (0.52158723912728633, 0.16684090481122366)
score = 0.344214071969255
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (16, 3)
train = (0.72575514026287746, 0.57001425625022051)
scores = (0.39904443423834685, 0.15437261555706477)
score = 0.2767085248977058
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (141, 170)
train = (0.89238149025814051, 1.1584613781647846)
scores = (0.47127019160295508, 0.22094377860945252)
score = 0.3461069851062038
>>> t = 3301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 130
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|daoc|vp1dd)
            & index[0,1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd)
            & [9:,15:,9:3,            15:9,21:15,15:6,18:9,21:12,18:6,21:9,18:3,21:6,21:3] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Min & index[10]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo|doo|daoc|vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                | Drawdown[10:,20:, 10:5,20:10] 
                | Drawup[1:] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                <>Drawdown[20:10] 
                | Drawup[20:] 
                | Since{Min & index[5]} 
              )
            & Since[ 62:, 125:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo)
            & [6:,9:,15:,18:,9:6,15:12,9:3,12:6,12:3,15:6,18:3,21:6,21:3] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:] 
                | Since{Max & index[5]} 
                | Drawup[20:] 
                | Since{Min & index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:,10:] 
      }
    | 
        | FracRec[21:,62:,125:,250:] 
#<>#
    <>0
    | Corr & Corr{ 
        <>[62]
        & ay[1,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.0, 2012.75, 2009.25, 2013.5, 2013.25, 2014.75, 2009.0, 2010.25, 2011.25, 2012.0, 2013.0, 2014.5, 2015.0}), frozenset({2010.75, 2011.5, 2011.75, 2012.5, 2009.75, 2014.0, 2009.5, 2010.5, 2011.0, 2012.25, 2013.75, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (4, 126)
train = (0.62414531411486107, 1.5082940951808437)
scores = (0.23080791185910701, 0.41307232488490758)
score = 0.3219401183720073
>>> t = 3400 ===================================================================================================
(pair) len(F.columns) = 38
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 77
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|aoo|acc|dcc|daoc)
            & index[0,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|Volatility)
            & [12:,9:6,            15:9,18:12,21:15,12:3,15:6,18:9,15:3,18:6,18:3,21:6] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:])} 
            & (
                | Drawdown[ 5:,10:,20:10] 
                | Since{Max&index[0]} 
                | Drawup[ 5:] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.5, 2015.0, 2012.75, 2009.0, 2013.25, 2013.5, 2009.5, 2010.0, 2011.75, 2012.25, 2013.75, 2014.5, 2015.25}), frozenset({2010.75, 2011.25, 2011.5, 2012.5, 2009.75, 2014.25, 2014.0, 2009.25, 2010.25, 2011.0, 2012.0, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (18, 13)
train = (0.7621894186694711, 0.53774198390450401)
scores = (0.31426888670782638, 0.34939570133432463)
score = 0.3318322940210755
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (6, 191)
train = (0.73970521815411983, 1.1288781599598692)
scores = (0.30314339677006935, 0.31170348969982886)
score = 0.3074234432349491
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (154, 51)
train = (0.93996974453117943, 0.74545779867591799)
scores = (0.33717904776784247, 0.43528492032064581)
score = 0.38623198404424414
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (154, 51)
train = (0.93996974453117943, 0.74545779867591799)
scores = (0.33717904776784247, 0.43528492032064581)
score = 0.38623198404424414
>>> t = 3401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 77
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|aoo|acc|dcc|daoc)
            & index[0,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|Volatility)
            & [12:,9:6,            15:9,18:12,21:15,12:3,15:6,18:9,15:3,18:6,18:3,21:6] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:])} 
            & (
                | Drawdown[ 5:,10:,20:10] 
                | Since{Max&index[0]} 
                | Drawup[ 5:] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2011.25, 2011.0, 2012.25, 2012.0, 2014.5, 2009.25, 2010.75, 2011.5, 2012.75, 2013.5, 2014.0, 2015.0}), frozenset({2010.5, 2009.0, 2009.75, 2013.25, 2013.75, 2014.25, 2009.5, 2010.25, 2011.75, 2012.5, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (316, 217)
train = (1.3937251341189569, 1.0137123313783059)
scores = (0.40975395217676719, 0.39767556599127712)
score = 0.40371475908402216
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (286, 410)
train = (1.3902625954641374, 1.2333773387194114)
scores = (0.40264883639376026, 0.39008134916613985)
score = 0.39636509277995
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (174, 237)
train = (1.2053890675689514, 0.97682966461768872)
scores = (0.47020511023947142, 0.40098905574868804)
score = 0.43559708299407973
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (174, 237)
train = (1.2053890675689514, 0.97682966461768872)
scores = (0.47020511023947142, 0.40098905574868804)
score = 0.43559708299407973
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (242, 215)
train = (1.4908861588937903, 1.1350079726731113)
scores = (0.43077420501278157, 0.4133456237594873)
score = 0.42205991438613444
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (245, 299)
train = (1.5920247517808133, 1.3523931342030822)
scores = (0.40582707800513462, 0.38293447403397229)
score = 0.39438077601955346
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (321, 184)
train = (1.4778870381700828, 1.022283860807768)
scores = (0.50571145492394565, 0.40726139147273532)
score = 0.4564864231983405
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (321, 184)
train = (1.4778870381700828, 1.022283860807768)
scores = (0.50571145492394565, 0.40726139147273532)
score = 0.4564864231983405
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (5, 336)
train = (0.92597783653262011, 1.3392554478379231)
scores = (0.36536679849930337, 0.41858430181549661)
score = 0.3919755501574
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (205, 173)
train = (1.7524259920781295, 1.3663506101480352)
scores = (0.43366752808460579, 0.38597432825807149)
score = 0.40982092817133864
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (273, 228)
train = (1.5380573096016454, 1.1584539024166534)
scores = (0.50608524919197295, 0.41898460054090086)
score = 0.4625349248664369
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (273, 228)
train = (1.5380573096016454, 1.1584539024166534)
scores = (0.50608524919197295, 0.41898460054090086)
score = 0.4625349248664369
>>> t = 3402 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 77
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|aoo|acc|dcc|daoc)
            & index[0,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|Volatility)
            & [12:,9:6,            15:9,18:12,21:15,12:3,15:6,18:9,15:3,18:6,18:3,21:6] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:])} 
            & (
                | Drawdown[ 5:,10:,20:10] 
                | Since{Max&index[0]} 
                | Drawup[ 5:] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.75, 2012.25, 2012.5, 2009.0, 2014.75, 2009.5, 2010.25, 2011.0, 2012.75, 2013.25, 2014.0, 2015.0}), frozenset({2011.5, 2011.75, 2009.75, 2013.5, 2013.75, 2014.25, 2009.25, 2010.5, 2011.25, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (144, 12)
train = (0.98272528178456042, 0.63899729117450488)
scores = (0.28499303245760055, 0.34787032274182794)
score = 0.31643167759971425
>>> t = 3500 ===================================================================================================
(pair) len(F.columns) = 33
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 51
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo|dcc)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [5:,10:,15:,15:10,15:5,20:10,20:5] 
          }
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|daoc|vp1dd)
            & index[2, 0:1,0:2] 
          }
      )
    | 
        <>Return{mix[1,5,8,9,11,12,14,15]}
        | Return{rr} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.0, 2012.25, 2009.25, 2009.75, 2013.5, 2013.75, 2009.5, 2010.25, 2011.0, 2012.75, 2013.25, 2014.0, 2015.0}), frozenset({2010.75, 2011.5, 2011.75, 2012.5, 2014.5, 2014.25, 2009.0, 2010.5, 2011.25, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (229, 159)
train = (0.9293303532022259, 0.80386385657153969)
scores = (0.32701289815496043, 0.37199140065835423)
score = 0.34950214940665736
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (168, 176)
train = (1.0082803839975676, 0.84151763233607391)
scores = (0.32220689833603272, 0.39819316474492689)
score = 0.3602000315404798
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (292, 230)
train = (0.82336782272330955, 0.75147131490203323)
scores = (0.34087550407673356, 0.39048681138944524)
score = 0.3656811577330894
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (292, 230)
train = (0.82336782272330955, 0.75147131490203323)
scores = (0.34087550407673356, 0.39048681138944524)
score = 0.3656811577330894
>>> t = 3501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 51
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo|dcc)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [5:,10:,15:,15:10,15:5,20:10,20:5] 
          }
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|daoc|vp1dd)
            & index[2, 0:1,0:2] 
          }
      )
    | 
        <>Return{mix[1,5,8,9,11,12,14,15]}
        | Return{rr} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.25, 2015.25, 2011.75, 2011.5, 2011.0, 2013.25, 2013.75, 2010.0, 2011.25, 2012.25, 2013.5, 2014.75, 2015.0}), frozenset({2010.75, 2012.5, 2012.75, 2009.0, 2009.25, 2009.75, 2014.25, 2014.0, 2009.5, 2010.5, 2012.0, 2013.0, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (452, 27)
train = (1.1401554109312975, 0.47775332694769085)
scores = (0.23701881485481835, 0.42593602053747209)
score = 0.33147741769614525
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (353, 34)
train = (1.2512867818354589, 0.4932583170842581)
scores = (0.23676585753414831, 0.41828714033347991)
score = 0.32752649893381414
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (253, 97)
train = (0.85818734305550559, 0.57197796759176123)
scores = (0.21019394435754571, 0.44356858721127534)
score = 0.3268812657844105
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (452, 27)
train = (1.1401554109312975, 0.47775332694769085)
scores = (0.23701881485481835, 0.42593602053747209)
score = 0.33147741769614525
>>> t = 3600 ===================================================================================================
(pair) len(F.columns) = 20
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 59
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doo|daoc|vp1dd)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | ( 
            | Volatility[10:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[5]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doo|daoc|vp1dd)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | ( 
            | Volatility[10:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[5]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[62]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.75, 2012.5, 2009.25, 2013.25, 2013.75, 2013.5, 2009.0, 2010.25, 2011.5, 2012.75, 2013.0, 2015.0}), frozenset({2011.25, 2011.75, 2012.25, 2009.75, 2014.5, 2014.25, 2014.0, 2009.5, 2010.5, 2011.0, 2012.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 77)
train = (0.49123092405539875, 0.99455412252719722)
scores = (0.32719278799805462, 0.35249848029864955)
score = 0.3398456341483521
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (7, 22)
train = (0.50839261474555342, 0.77352264089158951)
scores = (0.34338343712808733, 0.27798098385612002)
score = 0.31068221049210365
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (24, 21)
train = (0.59256132724439492, 0.78004512076830701)
scores = (0.26728083173843681, 0.27014444575947355)
score = 0.2687126387489552
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (3, 77)
train = (0.49123092405539875, 0.99455412252719722)
scores = (0.32719278799805462, 0.35249848029864955)
score = 0.3398456341483521
>>> t = 3601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 59
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doo|daoc|vp1dd)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | ( 
            | Volatility[10:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[5]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doo|daoc|vp1dd)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | ( 
            | Volatility[10:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[5]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[62]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.75, 2011.5, 2012.5, 2014.75, 2014.5, 2009.25, 2010.5, 2011.25, 2012.25, 2013.5, 2014.25, 2015.25}), frozenset({2011.75, 2012.75, 2009.0, 2009.75, 2013.25, 2013.75, 2009.5, 2010.25, 2011.0, 2012.0, 2013.0, 2014.0, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (43, 621)
train = (0.8108068321318963, 1.1405771180767972)
scores = (0.31823890583515996, 0.32541557506127644)
score = 0.3218272404482182
>>> t = 3700 ===================================================================================================
(pair) len(F.columns) = 14
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 39
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [10:,15:,10:5,15:10,15:5,20:10,20:5] 
          }
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,10:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
    | 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.5, 2010.0, 2011.25, 2011.0, 2012.5, 2013.5, 2009.75, 2010.75, 2011.5, 2012.0, 2013.25, 2014.0, 2015.25}), frozenset({2012.75, 2009.0, 2009.25, 2013.75, 2014.5, 2014.25, 2009.5, 2010.25, 2011.75, 2012.25, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (150, 28)
train = (1.0286152141596336, 0.67680118719413063)
scores = (0.37765452608336891, 0.34986832524630324)
score = 0.36376142566483605
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (100, 27)
train = (1.0554386217527147, 0.73195016303048066)
scores = (0.38154664745597822, 0.36327911040289584)
score = 0.37241287892943703
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (320, 69)
train = (1.0788585036734675, 0.63319313422983692)
scores = (0.40826010440471472, 0.40015209999554185)
score = 0.4042061022001283
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (320, 69)
train = (1.0788585036734675, 0.63319313422983692)
scores = (0.40826010440471472, 0.40015209999554185)
score = 0.4042061022001283
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (345, 3)
train = (1.2977507158323214, 0.63535899872081281)
scores = (0.38459843238291813, 0.364663976844111)
score = 0.37463120461351457
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (86, 26)
train = (1.2316706535931055, 0.87159361955504233)
scores = (0.37595153322284591, 0.36369206013403932)
score = 0.3698217966784426
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (250, 9)
train = (1.1079140106300356, 0.58306024087373864)
scores = (0.40793612930546758, 0.38501247356149931)
score = 0.39647430143348344
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (250, 9)
train = (1.1079140106300356, 0.58306024087373864)
scores = (0.40793612930546758, 0.38501247356149931)
score = 0.39647430143348344
>>> t = 3701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 39
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [10:,15:,10:5,15:10,15:5,20:10,20:5] 
          }
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,10:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
    | 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.5, 2010.0, 2011.5, 2009.0, 2013.0, 2013.5, 2013.75, 2009.5, 2010.75, 2011.75, 2012.0, 2013.25, 2014.75}), frozenset({2015.0, 2011.25, 2012.5, 2012.75, 2009.75, 2014.25, 2014.0, 2009.25, 2010.25, 2011.0, 2012.25, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (202, 29)
train = (0.90426974085912337, 0.65683629856281966)
scores = (0.36441966571062945, 0.37224796665240395)
score = 0.3683338161815167
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (417, 37)
train = (1.1477357673434023, 0.76615242131956818)
scores = (0.40784978781538173, 0.37430481443919633)
score = 0.391077301127289
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (84, 61)
train = (0.70826717458388122, 0.66357870414694542)
scores = (0.33304055290612705, 0.39030259205685019)
score = 0.3616715724814886
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (417, 37)
train = (1.1477357673434023, 0.76615242131956818)
scores = (0.40784978781538173, 0.37430481443919633)
score = 0.391077301127289
>>> t = 3800 ===================================================================================================
(pair) len(F.columns) = 83
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 118
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|acc|daoc)
            & index[0,1, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:,10:5,15:5,20:10,20:5] 
          }
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( VP)
        & [1:,10:,20:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|dcc|vp1dd)
            & index[2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [9:,12:,15:,18:,6:3,12:9,15:12,18:15,9:3,12:6,18:12,21:15,12:3,15:6,18:9,21:12,18:3,21:6] 
          }
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Since{Min & index[0]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp1dd)
            & [15:,15:10,20:10,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Since{Max & index[0,5,10,20]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| Volatility)
        & [1:,20:,60:] 
      }
    | 
        Time{long| short}
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.5, 2011.75, 2011.5, 2009.25, 2013.0, 2014.0, 2009.5, 2010.25, 2011.0, 2012.5, 2013.5, 2014.25, 2015.25}), frozenset({2010.0, 2012.25, 2012.75, 2009.75, 2013.75, 2014.5, 2009.0, 2010.75, 2011.25, 2012.0, 2013.25, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 349)
train = (0.48463237789553471, 1.054292728343651)
scores = (0.36065847879827201, 0.33358616224495463)
score = 0.3471223205216133
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 516)
train = (0.52359986985154905, 1.0985486266389699)
scores = (0.34259882807090292, 0.35015045197573408)
score = 0.3463746400233185
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 430)
train = (0.45118683338815246, 1.047411139874298)
scores = (0.34982646883727192, 0.34967738941687565)
score = 0.34975192912707376
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (1, 430)
train = (0.45118683338815246, 1.047411139874298)
scores = (0.34982646883727192, 0.34967738941687565)
score = 0.34975192912707376
>>> t = 3801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 118
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|acc|daoc)
            & index[0,1, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:,10:5,15:5,20:10,20:5] 
          }
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( VP)
        & [1:,10:,20:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|dcc|vp1dd)
            & index[2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [9:,12:,15:,18:,6:3,12:9,15:12,18:15,9:3,12:6,18:12,21:15,12:3,15:6,18:9,21:12,18:3,21:6] 
          }
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Since{Min & index[0]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp1dd)
            & [15:,15:10,20:10,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Since{Max & index[0,5,10,20]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| Volatility)
        & [1:,20:,60:] 
      }
    | 
        Time{long| short}
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2011.0, 2011.25, 2009.0, 2009.25, 2013.0, 2009.5, 2013.25, 2009.75, 2010.5, 2011.75, 2012.0, 2013.75, 2015.0}), frozenset({2010.25, 2010.75, 2012.5, 2012.75, 2014.5, 2014.25, 2014.0, 2010.0, 2011.5, 2012.25, 2013.5, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (66, 1)
train = (0.72314199500934551, 0.60496418890395876)
scores = (0.29352856591607968, 0.15719397522074746)
score = 0.22536127056841357
>>> t = 3900 ===================================================================================================
(pair) len(F.columns) = 97
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 204
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:5,15:10,15:5,20:5] 
          }
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
                | Drawup[1:,20:10] 
                | Since{Min & index[5,10]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.25, 2011.75, 2012.5, 2009.0, 2014.0, 2009.5, 2010.75, 2011.5, 2009.75, 2013.0, 2014.25, 2015.25}), frozenset({2010.0, 2012.25, 2012.75, 2013.5, 2013.75, 2014.5, 2009.25, 2010.5, 2011.0, 2012.0, 2013.25, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (99, 3)
train = (0.95942079265256353, 0.72121488808334577)
scores = (0.33389799159450412, 0.20919741188918295)
score = 0.2715477017418435
>>> t = 3901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 204
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:5,15:10,15:5,20:5] 
          }
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
                | Drawup[1:,20:10] 
                | Since{Min & index[5,10]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2015.0, 2011.5, 2011.0, 2012.5, 2014.0, 2014.25, 2014.5, 2009.0, 2010.0, 2011.75, 2009.5, 2014.75, 2015.25}), frozenset({2010.25, 2010.75, 2012.25, 2012.75, 2009.75, 2013.25, 2013.5, 2013.75, 2009.25, 2010.5, 2011.25, 2012.0, 2013.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (145, 63)
train = (0.99468830563593624, 0.98916063534699161)
scores = (0.32437403628838857, 0.34605770991079948)
score = 0.335215873099594
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (74, 91)
train = (0.93001960573098341, 1.0957100333934662)
scores = (0.28485303952234825, 0.30646016686630284)
score = 0.2956566031943255
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (250, 90)
train = (1.0467639450060664, 1.0124834821122783)
scores = (0.32668556442434959, 0.38623742988255866)
score = 0.3564614971534541
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (250, 90)
train = (1.0467639450060664, 1.0124834821122783)
scores = (0.32668556442434959, 0.38623742988255866)
score = 0.3564614971534541
>>> t = 4000 ===================================================================================================
(pair) len(F.columns) = 17
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 66
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [9:,12:,12:9,15:12,12:6,            15:9,18:12,21:15,12:3,15:6,18:9,21:12,18:6,21:6] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,5]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP| Volatility)
        & [60:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [9:,12:,12:9,15:12,12:6,            15:9,18:12,21:15,12:3,15:6,18:9,21:12,18:6,21:6] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,5]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP| Volatility)
        & [60:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [9:,12:,12:9,15:12,12:6,            15:9,18:12,21:15,12:3,15:6,18:9,21:12,18:6,21:6] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,5]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP| Volatility)
        & [60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.75, 2011.0, 2011.5, 2013.5, 2013.0, 2014.25, 2009.25, 2010.5, 2011.75, 2013.75, 2014.75, 2015.25}), frozenset({2012.25, 2012.5, 2012.75, 2009.0, 2009.75, 2014.0, 2009.5, 2010.0, 2011.25, 2012.0, 2013.25, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 15)
train = (0.54009461699482564, 0.56590469955448075)
scores = (0.26803011696754919, 0.28604126236205318)
score = 0.2770356896648012
>>> t = 4001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 66
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [9:,12:,12:9,15:12,12:6,            15:9,18:12,21:15,12:3,15:6,18:9,21:12,18:6,21:6] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,5]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP| Volatility)
        & [60:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [9:,12:,12:9,15:12,12:6,            15:9,18:12,21:15,12:3,15:6,18:9,21:12,18:6,21:6] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,5]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP| Volatility)
        & [60:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [9:,12:,12:9,15:12,12:6,            15:9,18:12,21:15,12:3,15:6,18:9,21:12,18:6,21:6] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,5]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP| Volatility)
        & [60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.75, 2010.25, 2015.25, 2011.0, 2012.75, 2009.5, 2014.5, 2009.0, 2010.0, 2011.5, 2009.25, 2014.0, 2015.0}), frozenset({2011.75, 2012.25, 2012.5, 2013.25, 2013.5, 2013.75, 2014.25, 2009.75, 2010.5, 2011.25, 2012.0, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (11, 2)
train = (0.5647835966829523, 0.58895167220429023)
scores = (0.31390191615185548, 0.29130739410030615)
score = 0.3026046551260808
>>> t = 4100 ===================================================================================================
(pair) len(F.columns) = 127
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 149
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doc)
            & index[0,1, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp5dd)
            & [20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:] 
                | Since{Max & index[0]} 
                | Drawup[20:10] 
                | Since{Min & index[0,10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | 
        | FracRec[62:,250:] 
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|doo|doc)
            & index[0,2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd)
            & [10:,15:,15:10,15:5] 
          }
        | ( 
            <> Volatility[20:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[20]} 
                | Drawup[ 5:, 10:5] 
                | Since{Min & index[5,10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2011.0, 2011.75, 2011.5, 2012.0, 2009.75, 2013.75, 2013.25, 2009.25, 2011.25, 2009.0, 2013.0, 2014.75, 2015.25}), frozenset({2010.25, 2010.5, 2010.75, 2012.5, 2012.75, 2014.25, 2014.0, 2009.5, 2010.0, 2012.25, 2013.5, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 5)
train = (0.68896124795674074, 0.6329386802766227)
scores = (0.33028445280714591, 0.24856217622493504)
score = 0.2894233145160405
>>> t = 4101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 149
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doc)
            & index[0,1, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp5dd)
            & [20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:] 
                | Since{Max & index[0]} 
                | Drawup[20:10] 
                | Since{Min & index[0,10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | 
        | FracRec[62:,250:] 
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|doo|doc)
            & index[0,2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd)
            & [10:,15:,15:10,15:5] 
          }
        | ( 
            <> Volatility[20:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[20]} 
                | Drawup[ 5:, 10:5] 
                | Since{Min & index[5,10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.5, 2015.0, 2012.75, 2012.0, 2013.75, 2014.25, 2009.25, 2010.25, 2011.25, 2012.25, 2013.5, 2014.0, 2015.25}), frozenset({2010.75, 2011.5, 2011.75, 2009.0, 2009.75, 2013.25, 2014.5, 2009.5, 2010.0, 2011.0, 2012.5, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (64, 653)
train = (1.000136225883643, 1.4466898107562802)
scores = (0.36573355233330496, 0.37398245675010583)
score = 0.36985800454170537
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (54, 430)
train = (1.0762858675125573, 1.450087011414847)
scores = (0.36545369605433647, 0.3201673389605777)
score = 0.34281051750745706
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (43, 15)
train = (0.71312382092549487, 0.62632370427676809)
scores = (0.36424731078621903, 0.26518377428840556)
score = 0.31471554253731227
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (64, 653)
train = (1.000136225883643, 1.4466898107562802)
scores = (0.36573355233330496, 0.37398245675010583)
score = 0.36985800454170537
>>> t = 4200 ===================================================================================================
(pair) len(F.columns) = 38
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 75
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]}|aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[0]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| Volatility)
        & [60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|vp5dd)
            & [9:,12:,18:,21:18,            15:9,21:15,15:6,18:9,21:12,15:3,18:6] 
          }
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(Volatility)
            & [9:,15:,18:,            15:9,18:12,21:15,18:9,21:12,18:6,18:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                | Drawdown[ 5:,10:] 
                | Since{Max&index[0]} 
                | Drawup[20:10] 
                | Since{Min&index[5]} 
              )
            & Since[21:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2010.5, 2011.5, 2009.25, 2013.25, 2014.25, 2014.0, 2009.5, 2010.0, 2011.75, 2012.75, 2013.75, 2014.75}), frozenset({2015.0, 2011.25, 2012.25, 2012.5, 2009.75, 2013.5, 2009.0, 2010.25, 2011.0, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (145, 182)
train = (1.0062675056592605, 1.0040174556507415)
scores = (0.42676778612887678, 0.48965446594074957)
score = 0.4582111260348132
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (38, 240)
train = (0.83152298975781413, 1.1101840455051484)
scores = (0.40316714445097696, 0.50151440425769678)
score = 0.45234077435433684
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (137, 2)
train = (0.93103079725136084, 0.6179815663038245)
scores = (0.40160007669680176, 0.43988359239947306)
score = 0.4207418345481374
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (145, 182)
train = (1.0062675056592605, 1.0040174556507415)
scores = (0.42676778612887678, 0.48965446594074957)
score = 0.4582111260348132
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (89, 143)
train = (1.0578160773566327, 1.0754184691382793)
scores = (0.42418653991656857, 0.49794698934937581)
score = 0.4610667646329722
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (235, 157)
train = (1.4413912066563406, 1.1991179195268902)
scores = (0.39421909777348979, 0.50954349962786993)
score = 0.45188129870067983
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (92, 171)
train = (0.95294389281861569, 1.0552436161607417)
scores = (0.40814290391503216, 0.51248723289828946)
score = 0.4603150684066608
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (89, 143)
train = (1.0578160773566327, 1.0754184691382793)
scores = (0.42418653991656857, 0.49794698934937581)
score = 0.4610667646329722
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (105, 164)
train = (1.1903480135320597, 1.1802117039500131)
scores = (0.42520450657754016, 0.50895463655336282)
score = 0.4670795715654515
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (62, 87)
train = (1.2703632061422006, 1.2214163695877134)
scores = (0.38297553293580605, 0.50320040615514017)
score = 0.44308796954547314
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (109, 295)
train = (1.0575226738858683, 1.2198145082533582)
scores = (0.41678593984746565, 0.54387193594982519)
score = 0.4803289378986454
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (109, 295)
train = (1.0575226738858683, 1.2198145082533582)
scores = (0.41678593984746565, 0.54387193594982519)
score = 0.4803289378986454
>>> t = 4201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 75
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]}|aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[0]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| Volatility)
        & [60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|vp5dd)
            & [9:,12:,18:,21:18,            15:9,21:15,15:6,18:9,21:12,15:3,18:6] 
          }
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(Volatility)
            & [9:,15:,18:,            15:9,18:12,21:15,18:9,21:12,18:6,18:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                | Drawdown[ 5:,10:] 
                | Since{Max&index[0]} 
                | Drawup[20:10] 
                | Since{Min&index[5]} 
              )
            & Since[21:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.5, 2010.75, 2012.25, 2009.5, 2014.5, 2014.75, 2009.0, 2010.0, 2011.75, 2012.0, 2013.5, 2014.0, 2015.25}), frozenset({2011.0, 2011.5, 2012.75, 2009.75, 2013.25, 2013.75, 2009.25, 2010.25, 2011.25, 2012.5, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 3)
train = (0.70984108498603893, 0.65899775582949338)
scores = (0.38320017508509235, 0.40926509202131306)
score = 0.3962326335532027
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (29, 1)
train = (0.77960883561148098, 0.55732166695240881)
scores = (0.3638530443125042, 0.42917271673150065)
score = 0.3965128805220024
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 2)
train = (0.72624454101049374, 0.57077908943480415)
scores = (0.37393105100966634, 0.39038383677301919)
score = 0.38215744389134276
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (29, 1)
train = (0.77960883561148098, 0.55732166695240881)
scores = (0.3638530443125042, 0.42917271673150065)
score = 0.3965128805220024
>>> t = 4202 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 75
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]}|aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[0]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| Volatility)
        & [60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|vp5dd)
            & [9:,12:,18:,21:18,            15:9,21:15,15:6,18:9,21:12,15:3,18:6] 
          }
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(Volatility)
            & [9:,15:,18:,            15:9,18:12,21:15,18:9,21:12,18:6,18:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                | Drawdown[ 5:,10:] 
                | Since{Max&index[0]} 
                | Drawup[20:10] 
                | Since{Min&index[5]} 
              )
            & Since[21:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.25, 2011.25, 2012.0, 2009.75, 2013.25, 2009.25, 2010.5, 2011.5, 2012.25, 2013.0, 2014.75, 2015.25}), frozenset({2011.75, 2012.75, 2009.0, 2013.75, 2014.25, 2014.0, 2009.5, 2010.75, 2011.0, 2012.5, 2013.5, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (10, 24)
train = (0.69331200498169354, 0.7396278057515937)
scores = (0.41942251694570243, 0.31029797419976529)
score = 0.3648602455727339
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (15, 27)
train = (0.66327047603786038, 0.75837708309726592)
scores = (0.4202682828619283, 0.30959098379029021)
score = 0.3649296333261093
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (13, 41)
train = (0.67188532963437197, 0.79963686178043103)
scores = (0.39763789862373211, 0.30620187090660256)
score = 0.35191988476516733
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (15, 27)
train = (0.66327047603786038, 0.75837708309726592)
scores = (0.4202682828619283, 0.30959098379029021)
score = 0.3649296333261093
>>> t = 4300 ===================================================================================================
(pair) len(F.columns) = 130
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 174
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|dcc)
            & index[0,1,2, 0:1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(doo|Volatility)
            & [5:,15:,10:5,15:10,20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[ 5:,20:, 10:5] 
                | Since{Max&index[5]} 
                | Since{Min&index[0]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Since{Max & index[0]} 
                | Drawup[1,20:] 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [10:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [10:,15:,15:10,20:15,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:,20:10] 
                | Since{Max&index[0,10]} 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 62:, 125:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        <>Return{mix[1,3,4,5,13,15,16,17,18]}
        | Return{ af} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|doc)
            & index[1, 0:1,1:2,0:2] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Drawup[20:10] 
                | Since{Min & index[5,10]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,5:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.5, 2010.25, 2011.25, 2009.0, 2009.25, 2014.0, 2014.5, 2009.75, 2010.75, 2011.75, 2012.25, 2014.75, 2015.0}), frozenset({2011.5, 2012.5, 2012.75, 2013.25, 2013.5, 2013.75, 2009.5, 2010.0, 2011.0, 2012.0, 2013.0, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (235, 140)
train = (0.98514710592667165, 1.2723583160834921)
scores = (0.53138321782870679, 0.46286332601012392)
score = 0.49712327191941535
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (169, 95)
train = (0.96960027892818856, 1.3290406500584586)
scores = (0.52639311524942789, 0.45918985723839351)
score = 0.49279148624391067
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (128, 142)
train = (0.86327174674005513, 1.1807036847410199)
scores = (0.5174032133247205, 0.48682571961402432)
score = 0.5021144664693724
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (128, 142)
train = (0.86327174674005513, 1.1807036847410199)
scores = (0.5174032133247205, 0.48682571961402432)
score = 0.5021144664693724
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (167, 83)
train = (1.0863585484812213, 1.2597044307114256)
scores = (0.54182460496671025, 0.45906697699839893)
score = 0.5004457909825546
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (193, 117)
train = (1.1839419633268473, 1.6247143252966814)
scores = (0.54233661393081267, 0.45058490876701329)
score = 0.496460761348913
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (158, 137)
train = (1.0053684037570623, 1.2889505868350257)
scores = (0.52792695603361017, 0.48105651142196659)
score = 0.5044917337277883
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (158, 137)
train = (1.0053684037570623, 1.2889505868350257)
scores = (0.52792695603361017, 0.48105651142196659)
score = 0.5044917337277883
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (132, 134)
train = (1.1201734444774012, 1.5012636264805854)
scores = (0.54751246541555376, 0.46072234531465611)
score = 0.504117405365105
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (18, 163)
train = (0.88351038961319683, 1.8929875885795144)
scores = (0.50293768029602859, 0.48015900489222507)
score = 0.49154834259412683
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (229, 75)
train = (1.1590522570268258, 1.1785455621674603)
scores = (0.55137393791479594, 0.48592098337465128)
score = 0.5186474606447236
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (229, 75)
train = (1.1590522570268258, 1.1785455621674603)
scores = (0.55137393791479594, 0.48592098337465128)
score = 0.5186474606447236
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (178, 143)
train = (1.2664595098494655, 1.577728611841493)
scores = (0.53091457071211379, 0.46001790709767243)
score = 0.4954662389048931
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (143, 326)
train = (1.4622408174965109, 2.2179787457059206)
scores = (0.5505568072920356, 0.49004659244452947)
score = 0.5203016998682826
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (179, 65)
train = (1.1417822338562569, 1.1590015850473696)
scores = (0.55117644772584407, 0.48586907776833727)
score = 0.5185227627470906
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (143, 326)
train = (1.4622408174965109, 2.2179787457059206)
scores = (0.5505568072920356, 0.49004659244452947)
score = 0.5203016998682826
>>> t = 4301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 174
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|dcc)
            & index[0,1,2, 0:1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(doo|Volatility)
            & [5:,15:,10:5,15:10,20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[ 5:,20:, 10:5] 
                | Since{Max&index[5]} 
                | Since{Min&index[0]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Since{Max & index[0]} 
                | Drawup[1,20:] 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [10:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [10:,15:,15:10,20:15,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:,20:10] 
                | Since{Max&index[0,10]} 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 62:, 125:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        <>Return{mix[1,3,4,5,13,15,16,17,18]}
        | Return{ af} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|doc)
            & index[1, 0:1,1:2,0:2] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Drawup[20:10] 
                | Since{Min & index[5,10]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,5:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2010.0, 2012.25, 2012.0, 2009.0, 2014.0, 2009.25, 2010.25, 2011.25, 2012.75, 2013.5, 2014.25, 2015.0}), frozenset({2011.5, 2011.75, 2009.75, 2013.25, 2013.75, 2014.5, 2009.5, 2010.5, 2011.0, 2012.5, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (186, 240)
train = (0.96200295989209905, 1.3147095112435809)
scores = (0.44925521641875965, 0.47738904488806061)
score = 0.4633221306534101
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (262, 233)
train = (1.0791707900591763, 1.4045561672970959)
scores = (0.48694897861336728, 0.47615120023757018)
score = 0.48155008942546873
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (186, 187)
train = (0.9439900464441312, 1.1314867853271691)
scores = (0.44975000288307104, 0.47046360132609621)
score = 0.46010680210458366
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (262, 233)
train = (1.0791707900591763, 1.4045561672970959)
scores = (0.48694897861336728, 0.47615120023757018)
score = 0.48155008942546873
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (178, 152)
train = (1.054535225980483, 1.368623058944805)
scores = (0.45518083433786871, 0.48618698108189218)
score = 0.47068390770988044
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (238, 289)
train = (1.2461424878008804, 1.8208029480654946)
scores = (0.49200883140494656, 0.5021050927782672)
score = 0.4970569620916069
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (166, 199)
train = (1.0047596206511353, 1.2593227665048012)
scores = (0.44947484089621753, 0.48252299981393737)
score = 0.46599892035507745
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (238, 289)
train = (1.2461424878008804, 1.8208029480654946)
scores = (0.49200883140494656, 0.5021050927782672)
score = 0.4970569620916069
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (131, 134)
train = (1.0822944126849683, 1.4428885709362542)
scores = (0.45198339201675647, 0.49523503728972768)
score = 0.47360921465324207
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (247, 164)
train = (1.4320085129791746, 1.8447328771015088)
scores = (0.50573932769114149, 0.49494420177263032)
score = 0.500341764731886
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (390, 173)
train = (1.2185109028322525, 1.2976106850614713)
scores = (0.46462085751715698, 0.48228567309471287)
score = 0.4734532653059349
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (247, 164)
train = (1.4320085129791746, 1.8447328771015088)
scores = (0.50573932769114149, 0.49494420177263032)
score = 0.500341764731886
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (139, 142)
train = (1.1686863804422543, 1.5442470524361154)
scores = (0.47455616965176345, 0.50555646844789282)
score = 0.49005631904982816
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (157, 449)
train = (1.4395539280760314, 2.4858315456056617)
scores = (0.48706982915498925, 0.54285985553446992)
score = 0.5149648423447296
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (194, 142)
train = (1.1566687877853494, 1.273199822302741)
scores = (0.46856605851061428, 0.48049212076656456)
score = 0.4745290896385894
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (157, 449)
train = (1.4395539280760314, 2.4858315456056617)
scores = (0.48706982915498925, 0.54285985553446992)
score = 0.5149648423447296
>>> t = 4302 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 174
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|dcc)
            & index[0,1,2, 0:1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(doo|Volatility)
            & [5:,15:,10:5,15:10,20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[ 5:,20:, 10:5] 
                | Since{Max&index[5]} 
                | Since{Min&index[0]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Since{Max & index[0]} 
                | Drawup[1,20:] 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [10:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [10:,15:,15:10,20:15,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:,20:10] 
                | Since{Max&index[0,10]} 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 62:, 125:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        <>Return{mix[1,3,4,5,13,15,16,17,18]}
        | Return{ af} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|doc)
            & index[1, 0:1,1:2,0:2] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Drawup[20:10] 
                | Since{Min & index[5,10]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,5:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2015.0, 2011.75, 2009.25, 2013.0, 2014.0, 2014.25, 2009.5, 2010.75, 2011.25, 2012.75, 2013.5, 2014.75, 2015.25}), frozenset({2010.0, 2010.5, 2011.5, 2012.25, 2012.5, 2009.75, 2013.75, 2009.0, 2010.25, 2011.0, 2012.0, 2013.25, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (15, 1)
train = (0.67581484434024763, 0.64325716611482897)
scores = (0.40213726567401098, 0.42592896623633769)
score = 0.41403311595517434
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (146, 88)
train = (1.0679371588912778, 0.92666676394320602)
scores = (0.41619260557073867, 0.39767042683984555)
score = 0.4069315162052921
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (16, 102)
train = (0.68034314449152666, 0.90364146579861093)
scores = (0.4378786806447828, 0.45416147335628732)
score = 0.44602007700053503
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (16, 102)
train = (0.68034314449152666, 0.90364146579861093)
scores = (0.4378786806447828, 0.45416147335628732)
score = 0.44602007700053503
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (133, 73)
train = (1.1128926415726028, 1.0025607123252822)
scores = (0.44334747040584399, 0.43617229074076092)
score = 0.43975988057330245
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (339, 237)
train = (1.5964767718028199, 1.3694927926816227)
scores = (0.45337295817871098, 0.43505623623841028)
score = 0.4442145972085606
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (21, 115)
train = (0.77452681084059938, 1.0384697228011057)
scores = (0.44368911757022966, 0.46302486935015336)
score = 0.45335699346019154
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (21, 115)
train = (0.77452681084059938, 1.0384697228011057)
scores = (0.44368911757022966, 0.46302486935015336)
score = 0.45335699346019154
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (97, 110)
train = (1.1431199256972469, 1.2088622846743946)
scores = (0.44553219864810212, 0.42558486199514545)
score = 0.4355585303216238
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (580, 186)
train = (2.07438755436901, 1.472040751004579)
scores = (0.49447325926136215, 0.45047447572237193)
score = 0.47247386749186704
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (9, 120)
train = (0.71290523227944891, 1.1165018025893836)
scores = (0.45092092851452598, 0.46554460231290001)
score = 0.458232765413713
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (580, 186)
train = (2.07438755436901, 1.472040751004579)
scores = (0.49447325926136215, 0.45047447572237193)
score = 0.47247386749186704
>>> t = 4303 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 174
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|dcc)
            & index[0,1,2, 0:1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(doo|Volatility)
            & [5:,15:,10:5,15:10,20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[ 5:,20:, 10:5] 
                | Since{Max&index[5]} 
                | Since{Min&index[0]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Since{Max & index[0]} 
                | Drawup[1,20:] 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [10:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [10:,15:,15:10,20:15,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:,20:10] 
                | Since{Max&index[0,10]} 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 62:, 125:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        <>Return{mix[1,3,4,5,13,15,16,17,18]}
        | Return{ af} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|doc)
            & index[1, 0:1,1:2,0:2] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Drawup[20:10] 
                | Since{Min & index[5,10]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,5:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.5, 2011.75, 2012.5, 2009.25, 2014.25, 2009.5, 2010.0, 2011.0, 2009.0, 2013.5, 2014.75, 2015.0}), frozenset({2010.5, 2012.25, 2012.75, 2013.25, 2013.75, 2014.0, 2009.75, 2010.75, 2011.25, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (308, 1)
train = (1.1198089588381526, 0.86390022241174524)
scores = (0.41850343955916275, 0.38673573029142699)
score = 0.40261958492529487
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (446, 2)
train = (1.2947960819168427, 0.8787593602423176)
scores = (0.45238803511107417, 0.34919963330912313)
score = 0.4007938342100986
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (597, 115)
train = (1.1777278309353409, 1.2239360770366703)
scores = (0.42435182724484466, 0.42905232138258353)
score = 0.4267020743137141
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (597, 115)
train = (1.1777278309353409, 1.2239360770366703)
scores = (0.42435182724484466, 0.42905232138258353)
score = 0.4267020743137141
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (360, 1)
train = (1.2914478924315356, 1.000554226378469)
scores = (0.44247568193015202, 0.40536273289427804)
score = 0.423919207412215
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (371, 338)
train = (1.468565812862727, 1.87435062392924)
scores = (0.48028317846207069, 0.48904426443974369)
score = 0.4846637214509072
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (417, 340)
train = (1.202924650740272, 1.5943140193729908)
scores = (0.42727020306466856, 0.44207435631226377)
score = 0.43467227968846617
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (371, 338)
train = (1.468565812862727, 1.87435062392924)
scores = (0.48028317846207069, 0.48904426443974369)
score = 0.4846637214509072
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (478, 1)
train = (1.4672242601785406, 1.0424911430135546)
scores = (0.46185075472968201, 0.41060307326516138)
score = 0.4362269139974217
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (155, 202)
train = (1.4155039349016048, 1.8929865402227051)
scores = (0.485844118345095, 0.5053989239304163)
score = 0.49562152113775565
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (222, 122)
train = (1.1248948523270044, 1.4045970942097414)
scores = (0.42098498121031974, 0.42153525410024367)
score = 0.4212601176552817
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (155, 202)
train = (1.4155039349016048, 1.8929865402227051)
scores = (0.485844118345095, 0.5053989239304163)
score = 0.49562152113775565
>>> t = 4400 ===================================================================================================
(pair) len(F.columns) = 22
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 24
0
#<>#
    <>~Market & (
        | ( 
            <>Return{(aoo[1:]|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:] 
                | Since{Min&index[10]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| Volatility)
        & [20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.0, 2010.75, 2011.0, 2009.0, 2013.75, 2013.0, 2009.25, 2010.25, 2011.5, 2012.75, 2013.5, 2014.25, 2015.25}), frozenset({2011.75, 2012.25, 2012.5, 2009.75, 2014.5, 2014.0, 2009.5, 2010.5, 2011.25, 2012.0, 2013.25, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 177)
train = (0.51066334127610225, 0.94954272004425544)
scores = (0.26172786538071663, 0.45041229459590687)
score = 0.35607007998831175
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (99, 147)
train = (0.66637558979866462, 1.0141487585392783)
scores = (0.27882200390775663, 0.41818427058877605)
score = 0.3485031372482663
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (7, 396)
train = (0.5871269476062928, 1.0315411570687925)
scores = (0.27655718036780819, 0.45509962371499718)
score = 0.36582840204140266
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (7, 396)
train = (0.5871269476062928, 1.0315411570687925)
scores = (0.27655718036780819, 0.45509962371499718)
score = 0.36582840204140266
>>> t = 4401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 24
0
#<>#
    <>~Market & (
        | ( 
            <>Return{(aoo[1:]|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:] 
                | Since{Min&index[10]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| Volatility)
        & [20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.25, 2010.75, 2011.75, 2011.0, 2012.75, 2009.25, 2009.5, 2013.75, 2009.75, 2010.0, 2011.25, 2012.25, 2013.0}), frozenset({2015.0, 2012.5, 2013.5, 2014.5, 2014.25, 2014.0, 2009.0, 2010.5, 2011.5, 2012.0, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (18, 2)
train = (0.69094630179373773, 0.51400518148601537)
scores = (0.26830755250539212, 0.25260715000957024)
score = 0.26045735125748115
>>> t = 4500 ===================================================================================================
(pair) len(F.columns) = 129
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 238
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:, 10:5] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[1:,10:] 
                | Since{Max & index[20]} 
                | Drawup[1:,20:10] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|dcc|vp1dd)
            & index[1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [3:,6:,9:,12:,15:,6:3,21:18,9:3,12:6,21:15,12:3,15:6,18:9,21:12,21:9,21:3] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.5, 2011.0, 2009.5, 2013.25, 2013.5, 2014.25, 2009.0, 2010.75, 2011.75, 2012.0, 2013.75, 2014.0, 2015.25}), frozenset({2010.0, 2011.5, 2012.5, 2012.75, 2009.75, 2014.5, 2009.25, 2010.25, 2011.25, 2012.25, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (17, 2)
train = (0.73905818856727945, 0.64108156962023233)
scores = (0.33875082423479719, 0.23683941466494904)
score = 0.2877951194498731
>>> t = 4501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 238
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:, 10:5] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[1:,10:] 
                | Since{Max & index[20]} 
                | Drawup[1:,20:10] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|dcc|vp1dd)
            & index[1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [3:,6:,9:,12:,15:,6:3,21:18,9:3,12:6,21:15,12:3,15:6,18:9,21:12,21:9,21:3] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2011.5, 2011.25, 2011.75, 2013.75, 2014.25, 2009.5, 2015.25, 2011.0, 2012.0, 2013.5, 2014.0, 2015.0}), frozenset({2010.0, 2010.5, 2012.5, 2012.75, 2009.25, 2009.75, 2013.25, 2014.5, 2009.0, 2010.25, 2012.25, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (83, 330)
train = (1.2495306046570853, 1.146560817022902)
scores = (0.42266363640911386, 0.44707221384685847)
score = 0.43486792512798617
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (183, 217)
train = (1.5204812347010304, 1.1162280603176165)
scores = (0.41669307662286886, 0.40670928057098277)
score = 0.4117011785969258
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (185, 381)
train = (1.3235151156734986, 1.0916037461703281)
scores = (0.43631011424278593, 0.42414591989623096)
score = 0.4302280170695084
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (83, 330)
train = (1.2495306046570853, 1.146560817022902)
scores = (0.42266363640911386, 0.44707221384685847)
score = 0.43486792512798617
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (65, 23)
train = (1.3003031313570346, 0.87153087686721775)
scores = (0.4312475119019023, 0.34121540496516828)
score = 0.3862314584335353
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (41, 343)
train = (1.4369739831942394, 1.560621486847646)
scores = (0.4326939309100773, 0.43568625218615753)
score = 0.4341900915481174
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (176, 448)
train = (1.4194089995069106, 1.2176315276478629)
scores = (0.46664266346572381, 0.45257123486684364)
score = 0.45960694916628375
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (176, 448)
train = (1.4194089995069106, 1.2176315276478629)
scores = (0.46664266346572381, 0.45257123486684364)
score = 0.45960694916628375
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (67, 18)
train = (1.3852175430888913, 0.97368100656126977)
scores = (0.46307379317614022, 0.34584599479356037)
score = 0.40445989398485027
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (65, 168)
train = (1.6356315863598891, 1.4870323679162034)
scores = (0.47928513854928351, 0.43726899552595833)
score = 0.45827706703762094
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (185, 222)
train = (1.4905234948643467, 1.1608822260830773)
scores = (0.46336933828016053, 0.42394259520423744)
score = 0.443655966742199
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (65, 168)
train = (1.6356315863598891, 1.4870323679162034)
scores = (0.47928513854928351, 0.43726899552595833)
score = 0.45827706703762094
>>> t = 4502 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 238
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:, 10:5] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[1:,10:] 
                | Since{Max & index[20]} 
                | Drawup[1:,20:10] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|dcc|vp1dd)
            & index[1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [3:,6:,9:,12:,15:,6:3,21:18,9:3,12:6,21:15,12:3,15:6,18:9,21:12,21:9,21:3] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2011.5, 2011.75, 2012.5, 2012.25, 2009.5, 2013.75, 2009.0, 2010.25, 2011.0, 2012.0, 2013.25, 2014.25, 2015.0}), frozenset({2010.5, 2010.75, 2009.75, 2013.5, 2014.5, 2014.0, 2009.25, 2010.0, 2011.25, 2012.75, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (17, 4)
train = (0.78900609552183498, 0.6663091809435242)
scores = (0.32927379637451876, 0.28965035924229748)
score = 0.3094620778084081
>>> t = 4600 ===================================================================================================
(pair) len(F.columns) = 140
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 273
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|aoo|doo|dcc)
            & index[0,1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [6:,9:,12:,15:12,12:6,            15:9,12:3,15:6,18:6,21:9,21:6,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:,20:10] 
                | Drawup[1:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[10,20]} 
                | Drawup[20:,20:10] 
                | Since{Min & index[0]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Drawup[20:10] 
                | Since{Min & index[5]} 
              )
            & Since[21:, 125:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[1:,20:,60:] 
        | FracRec[21:,125:] 
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doc)
            & index[1,2,0:2] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[10,20]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 125:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.0, 2012.5, 2012.25, 2013.75, 2013.5, 2014.75, 2009.75, 2010.75, 2011.5, 2012.75, 2013.0, 2014.0, 2015.0}), frozenset({2010.5, 2011.25, 2011.75, 2009.0, 2009.25, 2014.25, 2009.5, 2010.25, 2011.0, 2012.0, 2013.25, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (238, 187)
train = (1.5082241629355191, 1.0343903373403327)
scores = (0.3945369808592622, 0.40423965112614568)
score = 0.39938831599270397
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (175, 224)
train = (1.5370846515042031, 1.1828988470515869)
scores = (0.42680227176578556, 0.40209431240189497)
score = 0.41444829208384026
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (403, 246)
train = (1.6229225681750141, 1.0447834756217995)
scores = (0.42441695205554442, 0.40945559498018186)
score = 0.4169362735178631
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (403, 246)
train = (1.6229225681750141, 1.0447834756217995)
scores = (0.42441695205554442, 0.40945559498018186)
score = 0.4169362735178631
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (629, 206)
train = (2.2045903391207697, 1.1956804426350369)
scores = (0.46901941845024725, 0.41822480259367523)
score = 0.4436221105219612
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (230, 205)
train = (2.0948854699304449, 1.3686677602391859)
scores = (0.48223509803589576, 0.40359203977476826)
score = 0.442913568905332
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (216, 233)
train = (1.5530423617743339, 1.13023446735249)
scores = (0.41284969241733144, 0.43305772605252091)
score = 0.42295370923492615
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (629, 206)
train = (2.2045903391207697, 1.1956804426350369)
scores = (0.46901941845024725, 0.41822480259367523)
score = 0.4436221105219612
>>> t = 4601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 273
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|aoo|doo|dcc)
            & index[0,1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [6:,9:,12:,15:12,12:6,            15:9,12:3,15:6,18:6,21:9,21:6,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:,20:10] 
                | Drawup[1:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[10,20]} 
                | Drawup[20:,20:10] 
                | Since{Min & index[0]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Drawup[20:10] 
                | Since{Min & index[5]} 
              )
            & Since[21:, 125:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[1:,20:,60:] 
        | FracRec[21:,125:] 
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doc)
            & index[1,2,0:2] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[10,20]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 125:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.75, 2012.25, 2012.5, 2012.75, 2013.25, 2014.75, 2014.25, 2009.75, 2010.0, 2009.5, 2013.0, 2014.5, 2015.25}), frozenset({2010.25, 2011.0, 2011.25, 2011.75, 2009.25, 2013.75, 2009.0, 2010.5, 2011.5, 2012.0, 2013.5, 2014.0, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (182, 33)
train = (1.2192859676945815, 0.75756157927513734)
scores = (0.45768243616894655, 0.49196787885279714)
score = 0.47482515751087184
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (94, 24)
train = (1.1565576242190441, 0.77709069386627583)
scores = (0.47135479895775173, 0.47109893404827663)
score = 0.47122686650301415
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 56)
train = (0.72373042279088295, 0.87074256336225975)
scores = (0.36480848022234447, 0.49813418658544872)
score = 0.4314713334038966
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (182, 33)
train = (1.2192859676945815, 0.75756157927513734)
scores = (0.45768243616894655, 0.49196787885279714)
score = 0.47482515751087184
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (130, 84)
train = (1.3206672002182596, 1.0632551758350053)
scores = (0.47476592458024336, 0.46668994629821486)
score = 0.4707279354392291
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (127, 17)
train = (1.544584127679224, 0.83010416970399337)
scores = (0.50421907381909514, 0.48107000961291241)
score = 0.4926445417160038
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (213, 58)
train = (1.3377199159896103, 0.97479384857825513)
scores = (0.49500806719558066, 0.49326567713514258)
score = 0.4941368721653616
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (213, 58)
train = (1.3377199159896103, 0.97479384857825513)
scores = (0.49500806719558066, 0.49326567713514258)
score = 0.4941368721653616
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (176, 49)
train = (1.5414314858032074, 1.0520253943779574)
scores = (0.45288783462591742, 0.48712802603641892)
score = 0.47000793033116817
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (10, 11)
train = (1.2160688609729511, 0.83942980799675326)
scores = (0.48864735979416601, 0.48499857938890117)
score = 0.4868229695915336
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (179, 38)
train = (1.3843896828375322, 1.0254281965826841)
scores = (0.48130404662377707, 0.47735595365891093)
score = 0.47933000014134397
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (10, 11)
train = (1.2160688609729511, 0.83942980799675326)
scores = (0.48864735979416601, 0.48499857938890117)
score = 0.4868229695915336
>>> t = 4602 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 273
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|aoo|doo|dcc)
            & index[0,1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [6:,9:,12:,15:12,12:6,            15:9,12:3,15:6,18:6,21:9,21:6,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:,20:10] 
                | Drawup[1:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[10,20]} 
                | Drawup[20:,20:10] 
                | Since{Min & index[0]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Drawup[20:10] 
                | Since{Min & index[5]} 
              )
            & Since[21:, 125:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[1:,20:,60:] 
        | FracRec[21:,125:] 
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doc)
            & index[1,2,0:2] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[10,20]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 125:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.75, 2012.5, 2012.0, 2013.25, 2013.75, 2014.75, 2010.75, 2011.5, 2012.25, 2013.5, 2014.5, 2015.25}), frozenset({2010.5, 2011.25, 2009.0, 2009.25, 2009.75, 2014.0, 2009.5, 2010.0, 2011.0, 2012.75, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (181, 208)
train = (1.4267062878284413, 1.1066333699356401)
scores = (0.45414848275940856, 0.37317297749764838)
score = 0.41366073012852844
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (106, 86)
train = (1.4102941038882661, 0.98882532514814692)
scores = (0.41124002705611651, 0.34243802313675059)
score = 0.3768390250964335
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (219, 274)
train = (1.4074814969762552, 1.0887878199687291)
scores = (0.45850783779623433, 0.38666633972481601)
score = 0.4225870887605252
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (219, 274)
train = (1.4074814969762552, 1.0887878199687291)
scores = (0.45850783779623433, 0.38666633972481601)
score = 0.4225870887605252
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (181, 128)
train = (1.6077613690960018, 1.1307730562506113)
scores = (0.45517568393442365, 0.37983895814092405)
score = 0.41750732103767385
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (98, 43)
train = (1.6377433927623375, 0.99615211668437709)
scores = (0.40251276233974581, 0.44867623670213852)
score = 0.4255944995209422
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (166, 19)
train = (1.4639797907936911, 0.75098943925402539)
scores = (0.45239343737822957, 0.30324334269429321)
score = 0.3778183900362614
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (98, 43)
train = (1.6377433927623375, 0.99615211668437709)
scores = (0.40251276233974581, 0.44867623670213852)
score = 0.4255944995209422
>>> t = 4700 ===================================================================================================
(pair) len(F.columns) = 129
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 154
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|daoc)
            & index[0,1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|Volatility)
            & [10:,15:10,20:10] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|daoc)
            & index[0,1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|Volatility)
            & [10:,15:10,20:10] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo)
            & index[0] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(Volatility)
            & [5:,10:5,20:15,15:5,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|aoo[10:]|doo[10:])} 
            & (
                | Drawdown[ 5:,20:, 10:5,20:10] 
                | Since{Max&index[10]} 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,62:,125:,250:] 
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.25, 2010.75, 2011.0, 2012.75, 2012.25, 2014.5, 2009.25, 2010.5, 2011.75, 2009.75, 2013.5, 2014.75, 2015.25}), frozenset({2011.5, 2012.5, 2009.0, 2013.25, 2013.75, 2014.0, 2009.5, 2010.0, 2011.25, 2012.0, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (134, 130)
train = (0.9757653662474719, 0.989072291885151)
scores = (0.4112123820202227, 0.42075562261052474)
score = 0.4159840023153737
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (219, 153)
train = (1.0664935410623397, 0.9298559377663409)
scores = (0.3880269842753174, 0.42609772856740014)
score = 0.4070623564213588
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (216, 205)
train = (1.0287482065513363, 1.0772905463602023)
scores = (0.43451823816290347, 0.43382390644809488)
score = 0.4341710723054992
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (216, 205)
train = (1.0287482065513363, 1.0772905463602023)
scores = (0.43451823816290347, 0.43382390644809488)
score = 0.4341710723054992
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (158, 129)
train = (1.1624061765047302, 1.15362456944669)
scores = (0.41510557712535456, 0.42663244668928874)
score = 0.4208690119073216
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (160, 95)
train = (1.2330695529957698, 1.0217770783507827)
scores = (0.37667412514830906, 0.43247985810519396)
score = 0.40457699162675154
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (158, 226)
train = (1.0483086183237911, 1.1782935782389259)
scores = (0.43540807452390873, 0.43788670113900902)
score = 0.43664738783145884
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (158, 226)
train = (1.0483086183237911, 1.1782935782389259)
scores = (0.43540807452390873, 0.43788670113900902)
score = 0.43664738783145884
>>> t = 4701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 154
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|daoc)
            & index[0,1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|Volatility)
            & [10:,15:10,20:10] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|daoc)
            & index[0,1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|Volatility)
            & [10:,15:10,20:10] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo)
            & index[0] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(Volatility)
            & [5:,10:5,20:15,15:5,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|aoo[10:]|doo[10:])} 
            & (
                | Drawdown[ 5:,20:, 10:5,20:10] 
                | Since{Max&index[10]} 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,62:,125:,250:] 
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.0, 2010.75, 2009.25, 2013.0, 2013.75, 2014.25, 2014.5, 2009.5, 2010.25, 2011.75, 2012.5, 2013.5, 2014.0}), frozenset({2015.0, 2011.0, 2011.5, 2012.25, 2012.75, 2009.75, 2009.0, 2010.5, 2011.25, 2012.0, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (264, 382)
train = (1.1744517470169706, 1.1058993317205461)
scores = (0.39614275525071363, 0.42874677259947697)
score = 0.4124447639250953
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (152, 279)
train = (1.0451899973816048, 0.98304800964597294)
scores = (0.38092692592040167, 0.42545149053958409)
score = 0.4031892082299929
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (255, 318)
train = (1.0956336330714294, 1.0837411009572282)
scores = (0.39258295096251655, 0.43224414034424391)
score = 0.41241354565338023
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (264, 382)
train = (1.1744517470169706, 1.1058993317205461)
scores = (0.39614275525071363, 0.42874677259947697)
score = 0.4124447639250953
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (206, 328)
train = (1.2966928554766104, 1.2234027926880913)
scores = (0.40853991251095589, 0.45147428724355065)
score = 0.4300070998772533
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (191, 224)
train = (1.3585813100053934, 1.1319506731534901)
scores = (0.40601194037664828, 0.4368589362553908)
score = 0.42143543831601954
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (82, 220)
train = (0.94694146598637496, 1.1126897174279489)
scores = (0.37758630238339652, 0.43109202697648513)
score = 0.4043391646799408
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (206, 328)
train = (1.2966928554766104, 1.2234027926880913)
scores = (0.40853991251095589, 0.45147428724355065)
score = 0.4300070998772533
>>> t = 4800 ===================================================================================================
(pair) len(F.columns) = 66
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 133
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|daoc|vp1dd)
            & index[1,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|vp5dd)
            & [3:,9:,12:,15:,15:12,21:18,12:6,18:9,21:12,18:6,18:3,21:6,21:3] 
          }
        | ( 
            <>Return{(oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[10]} 
              )
            & Since[21:, 62:, 125:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:,10:,20:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[10]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.5, 2010.0, 2011.75, 2012.75, 2012.0, 2013.0, 2013.25, 2009.5, 2010.25, 2011.25, 2009.25, 2013.5, 2015.0}), frozenset({2011.5, 2012.5, 2009.75, 2014.5, 2014.25, 2014.0, 2009.0, 2010.75, 2011.0, 2012.25, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (161, 458)
train = (1.0930311937382498, 1.3342806799939921)
scores = (0.27501238947224349, 0.28699733898301583)
score = 0.28100486422762966
>>> t = 4801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 133
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|daoc|vp1dd)
            & index[1,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|vp5dd)
            & [3:,9:,12:,15:,15:12,21:18,12:6,18:9,21:12,18:6,18:3,21:6,21:3] 
          }
        | ( 
            <>Return{(oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[10]} 
              )
            & Since[21:, 62:, 125:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:,10:,20:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[10]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.0, 2011.75, 2012.5, 2013.25, 2013.5, 2014.0, 2009.75, 2010.5, 2011.25, 2012.75, 2013.75, 2014.75, 2015.0}), frozenset({2010.75, 2011.5, 2012.25, 2009.0, 2009.25, 2014.25, 2009.5, 2010.25, 2011.0, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (389, 204)
train = (1.4527960858746818, 0.87678402433253033)
scores = (0.31460924002609431, 0.39923005964615083)
score = 0.35691964983612257
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (297, 287)
train = (1.477448851696785, 1.0583413905979941)
scores = (0.34466458931832444, 0.45067447565993668)
score = 0.39766953248913056
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (238, 160)
train = (1.1881930632737048, 0.80687085407669823)
scores = (0.28028722053366611, 0.37879232336906277)
score = 0.3295397719513644
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (297, 287)
train = (1.477448851696785, 1.0583413905979941)
scores = (0.34466458931832444, 0.45067447565993668)
score = 0.39766953248913056
>>> t = 4900 ===================================================================================================
(pair) len(F.columns) = 56
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 165
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|vp1dd)
            & index[2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [5:,10:5,20:10] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            | Volatility[10:, 20:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| Volatility)
        & [1:,60:] 
      }
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|vp1dd)
            & index[2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [5:,10:5,20:10] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            | Volatility[10:, 20:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| Volatility)
        & [1:,60:] 
      }
#<>#
0
#<>#
    <>0
len(samps) = 2
(frozenset({2010.25, 2011.25, 2011.5, 2013.25, 2014.25, 2014.5, 2009.0, 2010.0, 2011.75, 2009.5, 2013.75, 2014.75, 2015.0}), frozenset({2010.5, 2012.25, 2012.5, 2012.75, 2009.75, 2013.5, 2009.25, 2010.75, 2011.0, 2012.0, 2013.0, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (18, 3)
train = (0.70380150977983047, 0.74474704519063006)
scores = (0.23514565946242855, 0.33321102266368546)
score = 0.284178341063057
>>> t = 4901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 165
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|vp1dd)
            & index[2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [5:,10:5,20:10] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            | Volatility[10:, 20:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| Volatility)
        & [1:,60:] 
      }
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|vp1dd)
            & index[2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [5:,10:5,20:10] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            | Volatility[10:, 20:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| Volatility)
        & [1:,60:] 
      }
#<>#
0
#<>#
    <>0
len(samps) = 2
(frozenset({2010.5, 2011.0, 2011.25, 2012.75, 2013.75, 2014.25, 2014.5, 2014.0, 2010.75, 2011.5, 2012.0, 2013.5, 2014.75}), frozenset({2010.25, 2015.0, 2012.5, 2009.0, 2009.25, 2013.25, 2009.75, 2009.5, 2010.0, 2011.75, 2012.25, 2013.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (12, 23)
train = (0.66673478182351553, 0.66017716419658223)
scores = (0.28608257151205108, 0.29679569648745513)
score = 0.2914391339997531
>>> t = 5000 ===================================================================================================
(pair) len(F.columns) = 82
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 112
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Min&index[0,5]} 
              )
            & Since[ 62:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Drawup[20:10] 
                | Since{Min & index[0]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( VP)
        & [5:,20:] 
      }
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|dcc|vp1dd)
            & index[1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo|vp1dd|vp5dd|Volatility)
            & [3:,6:,12:,12:9,12:6,            15:9,12:3,15:6,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,20:10] 
                | Since{Max & index[20]} 
                | Drawup[20:] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.0, 2012.75, 2009.0, 2014.25, 2014.0, 2009.25, 2010.5, 2011.75, 2012.5, 2013.75, 2014.5, 2015.25}), frozenset({2011.25, 2011.5, 2012.25, 2009.75, 2013.25, 2013.5, 2009.5, 2010.75, 2011.0, 2012.0, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 291)
train = (0.53417353609488627, 1.4390921266226027)
scores = (0.31932728469137833, 0.44105654001896732)
score = 0.3801919123551728
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 335)
train = (0.53234398628532331, 1.5384524292318758)
scores = (0.34465542149846834, 0.43191534588484809)
score = 0.3882853836916582
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 144)
train = (0.59769631465448303, 1.0928140148076584)
scores = (0.30262460457730006, 0.40253734602709174)
score = 0.3525809753021959
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (1, 335)
train = (0.53234398628532331, 1.5384524292318758)
scores = (0.34465542149846834, 0.43191534588484809)
score = 0.3882853836916582
>>> t = 5001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 112
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Min&index[0,5]} 
              )
            & Since[ 62:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Drawup[20:10] 
                | Since{Min & index[0]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( VP)
        & [5:,20:] 
      }
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|dcc|vp1dd)
            & index[1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo|vp1dd|vp5dd|Volatility)
            & [3:,6:,12:,12:9,12:6,            15:9,12:3,15:6,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,20:10] 
                | Since{Max & index[20]} 
                | Drawup[20:] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2012.75, 2012.0, 2009.5, 2013.75, 2013.25, 2013.0, 2014.75, 2014.25, 2009.0, 2010.25, 2012.25, 2013.5, 2014.0}), frozenset({2010.0, 2010.75, 2015.0, 2011.25, 2011.5, 2011.75, 2009.75, 2009.25, 2010.5, 2011.0, 2012.5, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (11, 16)
train = (0.73257826463140785, 0.62979064341786672)
scores = (0.36430538914272076, 0.2434834186133932)
score = 0.303894403878057
>>> t = 5100 ===================================================================================================
(pair) len(F.columns) = 41
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 112
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|vp1dd)
            & index[0,1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo)
            & [10:,15:,10:5,15:10,20:15,15:5,20:10,20:5] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|vp1dd)
            & index[0,1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo)
            & [10:,15:,10:5,15:10,20:15,15:5,20:10,20:5] 
          }
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo)
            & [5:,15:5,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:] 
                | Drawup[20:10] 
                | Since{Min&index[10]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.75, 2010.0, 2011.25, 2012.0, 2013.75, 2014.5, 2014.25, 2009.75, 2010.25, 2011.0, 2012.5, 2013.25, 2014.75}), frozenset({2015.0, 2011.75, 2012.75, 2009.0, 2009.25, 2013.5, 2009.5, 2010.5, 2011.5, 2012.25, 2013.0, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (30, 6)
train = (0.742334551868995, 0.47709503237732198)
scores = (0.299643923053589, 0.29593245151431696)
score = 0.29778818728395295
>>> t = 5101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 112
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|vp1dd)
            & index[0,1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo)
            & [10:,15:,10:5,15:10,20:15,15:5,20:10,20:5] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|vp1dd)
            & index[0,1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo)
            & [10:,15:,10:5,15:10,20:15,15:5,20:10,20:5] 
          }
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo)
            & [5:,15:5,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:] 
                | Drawup[20:10] 
                | Since{Min&index[10]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2015.25, 2012.25, 2009.5, 2009.0, 2013.25, 2013.0, 2014.25, 2009.75, 2010.75, 2012.5, 2013.5, 2014.75, 2015.0}), frozenset({2010.0, 2010.5, 2011.25, 2011.5, 2011.75, 2012.75, 2014.0, 2009.25, 2010.25, 2011.0, 2012.0, 2013.75, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (505, 126)
train = (0.90143772442922065, 0.8080434861706538)
scores = (0.49104536950736932, 0.35578670297000536)
score = 0.42341603623868734
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (319, 82)
train = (0.84936047422754013, 0.78635665427891555)
scores = (0.47958565038481521, 0.35553330260541266)
score = 0.41755947649511393
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (177, 131)
train = (0.72637545824831162, 0.77399824926478189)
scores = (0.47376020970829336, 0.35999232773536999)
score = 0.4168762687218317
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (505, 126)
train = (0.90143772442922065, 0.8080434861706538)
scores = (0.49104536950736932, 0.35578670297000536)
score = 0.42341603623868734
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (32, 129)
train = (0.68862062885061248, 0.92908347792973389)
scores = (0.46972993757127995, 0.37209647156683584)
score = 0.4209132045690579
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (169, 11)
train = (0.90953202128694521, 0.73867725241742554)
scores = (0.49706125847864746, 0.35383441754772849)
score = 0.425447838013188
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (29, 310)
train = (0.61686271070137499, 0.97775264159418185)
scores = (0.45019435431939736, 0.37889624619889911)
score = 0.41454530025914826
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (169, 11)
train = (0.90953202128694521, 0.73867725241742554)
scores = (0.49706125847864746, 0.35383441754772849)
score = 0.425447838013188
>>> t = 5200 ===================================================================================================
(pair) len(F.columns) = 32
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 63
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:] 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[ 5:,20:] 
              )
            & Since[21:, 125:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|vp1dd)
            & index[2, 0:1,1:2,0:2] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2011.5, 2012.25, 2012.5, 2013.75, 2014.0, 2009.75, 2010.25, 2011.0, 2012.0, 2013.0, 2014.25, 2015.0}), frozenset({2010.75, 2011.75, 2009.0, 2009.25, 2013.5, 2014.5, 2009.5, 2010.5, 2011.25, 2012.75, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (131, 218)
train = (1.1746804026518469, 1.0420759874897585)
scores = (0.33182937180956401, 0.31203649785749199)
score = 0.32193293483352803
>>> t = 5201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 63
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:] 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[ 5:,20:] 
              )
            & Since[21:, 125:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|vp1dd)
            & index[2, 0:1,1:2,0:2] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.5, 2015.25, 2011.5, 2012.0, 2009.5, 2014.5, 2009.0, 2010.75, 2011.75, 2009.25, 2013.5, 2014.0, 2015.0}), frozenset({2010.25, 2011.25, 2012.5, 2012.75, 2013.25, 2013.75, 2014.25, 2009.75, 2010.0, 2011.0, 2012.25, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (86, 345)
train = (0.75777393993490261, 1.4229192768495706)
scores = (0.37690772523641425, 0.3266046424637738)
score = 0.351756183850094
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (139, 155)
train = (0.9322161156627663, 1.2948479738050029)
scores = (0.3860738551707924, 0.28749480990152132)
score = 0.33678433253615686
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (151, 11)
train = (0.82576177665201, 0.69673215978974334)
scores = (0.36078711345741132, 0.21605479104091785)
score = 0.2884209522491646
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (86, 345)
train = (0.75777393993490261, 1.4229192768495706)
scores = (0.37690772523641425, 0.3266046424637738)
score = 0.351756183850094
>>> t = 5300 ===================================================================================================
(pair) len(F.columns) = 20
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 44
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [10:,20:10] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:] 
                | Since{Max & index[0,10]} 
                | Drawup[1, 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[ 62:] 
          )
      )
    | 
        Time{long}
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2011.75, 2011.0, 2009.5, 2009.75, 2013.25, 2013.0, 2014.25, 2014.5, 2009.0, 2011.25, 2012.5, 2013.5, 2014.75}), frozenset({2010.0, 2010.5, 2010.75, 2015.0, 2012.25, 2012.75, 2009.25, 2010.25, 2011.5, 2012.0, 2013.75, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 70)
train = (0.60536928477920438, 0.98258340970205282)
scores = (0.19768794770203804, 0.26955820221386462)
score = 0.23362307495795132
>>> t = 5301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 44
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [10:,20:10] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:] 
                | Since{Max & index[0,10]} 
                | Drawup[1, 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[ 62:] 
          )
      )
    | 
        Time{long}
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2011.25, 2009.75, 2013.25, 2013.75, 2014.75, 2014.25, 2009.25, 2010.75, 2011.75, 2012.0, 2013.5, 2014.0, 2015.25}), frozenset({2010.25, 2010.5, 2011.5, 2012.5, 2012.75, 2009.0, 2009.5, 2010.0, 2011.0, 2012.25, 2013.0, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 53)
train = (0.58612683436241009, 0.81042863917460251)
scores = (0.24873966398495839, 0.27787380523107291)
score = 0.2633067346080157
>>> t = 5400 ===================================================================================================
(pair) len(F.columns) = 53
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 112
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(dcc|vp1dd)
            & index[0,1, 0:1,1:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:,20:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[0,5]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                | Since{Max & index[0]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[0]} 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [20:] 
      }
    | 
        | Return{mix[4,5,8,9,11,12,14,17,18,19]}
        | Return{ af} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2012.0, 2013.0, 2013.25, 2014.75, 2014.5, 2009.5, 2015.25, 2011.25, 2012.5, 2013.75, 2014.0, 2015.0}), frozenset({2010.0, 2010.5, 2011.5, 2011.75, 2012.75, 2009.25, 2009.75, 2009.0, 2010.25, 2011.0, 2012.25, 2013.5, 2014.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (13, 139)
train = (0.79106947459507293, 0.91839754641971694)
scores = (0.30906836173409141, 0.39039274571641286)
score = 0.34973055372525214
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (688, 149)
train = (1.6212610727434966, 0.95485706724037356)
scores = (0.4916080777052807, 0.41250987530133615)
score = 0.4520589765033084
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 208)
train = (0.61873135517371458, 0.97312418589090222)
scores = (0.3043409357823838, 0.39193626290830197)
score = 0.34813859934534286
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (688, 149)
train = (1.6212610727434966, 0.95485706724037356)
scores = (0.4916080777052807, 0.41250987530133615)
score = 0.4520589765033084
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (15, 103)
train = (0.90127037306299695, 0.94145477069523686)
scores = (0.3175022397884793, 0.39050554335544224)
score = 0.35400389157196077
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (7, 139)
train = (0.93393586264046846, 1.2036542771824681)
scores = (0.34479503856768945, 0.42743663219106059)
score = 0.386115835379375
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 177)
train = (0.68179397471592107, 1.0193839703624425)
scores = (0.31675118685212966, 0.40928728120171692)
score = 0.36301923402692327
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (7, 139)
train = (0.93393586264046846, 1.2036542771824681)
scores = (0.34479503856768945, 0.42743663219106059)
score = 0.386115835379375
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (14, 110)
train = (0.98648061035567425, 1.0496314827564508)
scores = (0.33397030212819101, 0.41535198171251453)
score = 0.37466114192035277
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (6, 121)
train = (1.0796272388998041, 1.374852386146576)
scores = (0.39284784499372982, 0.43758990941111153)
score = 0.4152188772024207
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 192)
train = (0.70904013060323945, 1.1081101504117921)
scores = (0.32445270137381327, 0.40572983724804629)
score = 0.3650912693109298
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (6, 121)
train = (1.0796272388998041, 1.374852386146576)
scores = (0.39284784499372982, 0.43758990941111153)
score = 0.4152188772024207
>>> t = 5401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 112
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(dcc|vp1dd)
            & index[0,1, 0:1,1:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:,20:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[0,5]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                | Since{Max & index[0]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[0]} 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [20:] 
      }
    | 
        | Return{mix[4,5,8,9,11,12,14,17,18,19]}
        | Return{ af} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.0, 2010.75, 2011.0, 2013.5, 2013.75, 2009.25, 2015.0, 2011.25, 2012.75, 2013.25, 2014.25, 2015.25}), frozenset({2011.75, 2012.25, 2012.5, 2009.0, 2009.75, 2014.5, 2014.0, 2009.5, 2010.5, 2011.5, 2012.0, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (12, 124)
train = (0.74079097920211401, 1.0778597044360247)
scores = (0.31804865709086116, 0.44940335536152443)
score = 0.3837260062261928
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (45, 101)
train = (0.83495914487290424, 0.97723745619478009)
scores = (0.32559427131540497, 0.41063664492682278)
score = 0.3681154581211139
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (184, 41)
train = (1.1620087461286177, 0.82873149274911639)
scores = (0.4102053266514521, 0.4305474420816886)
score = 0.4203763843665703
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (184, 41)
train = (1.1620087461286177, 0.82873149274911639)
scores = (0.4102053266514521, 0.4305474420816886)
score = 0.4203763843665703
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (31, 77)
train = (0.99837418993916338, 1.0995659830431006)
scores = (0.33944009600698233, 0.45194108222683671)
score = 0.3956905891169095
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (125, 123)
train = (1.3581320221056508, 1.185956973032074)
scores = (0.3552171531264065, 0.40752633083040307)
score = 0.3813717419784048
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (37, 37)
train = (1.003201269515307, 0.92117557916249426)
scores = (0.38948541603578946, 0.4588783579837189)
score = 0.4241818870097542
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (37, 37)
train = (1.003201269515307, 0.92117557916249426)
scores = (0.38948541603578946, 0.4588783579837189)
score = 0.4241818870097542
>>> t = 5500 ===================================================================================================
(pair) len(F.columns) = 113
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 232
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp1dd|vp5dd|Volatility)
            & [10:,15:,10:5,20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:, 10:5] 
                | Since{Min&index[20]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[ 10:5] 
                | Since{Max & index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[60:] 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo)
            & index[0, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|vp5dd)
            & [15:,20:15,15:5,20:10,20:5] 
          }
      )
    | 
        | FracRec[250:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.25, 2010.0, 2012.5, 2012.0, 2014.0, 2014.5, 2009.25, 2015.25, 2011.75, 2012.25, 2013.75, 2014.75, 2015.0}), frozenset({2010.75, 2011.25, 2011.5, 2009.0, 2009.75, 2013.25, 2013.5, 2009.5, 2010.5, 2011.0, 2012.75, 2013.0, 2014.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (6, 69)
train = (0.67803648653996951, 0.87320881282680718)
scores = (0.43151988261566304, 0.37684205259955988)
score = 0.40418096760761146
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (12, 102)
train = (0.68590505182705441, 1.0210760948959583)
scores = (0.37768950873584811, 0.36244724747073276)
score = 0.3700683781032904
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (14, 269)
train = (0.73175192067480632, 1.1323395907026408)
scores = (0.45605332217935579, 0.3841062623394032)
score = 0.4200797922593795
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (14, 269)
train = (0.73175192067480632, 1.1323395907026408)
scores = (0.45605332217935579, 0.3841062623394032)
score = 0.4200797922593795
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (8, 65)
train = (0.88419895903121637, 1.018104165658579)
scores = (0.44358698231066257, 0.38044476780536807)
score = 0.4120158750580153
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (11, 229)
train = (0.86589833369939395, 1.5413924621291568)
scores = (0.38870074725881515, 0.36206465821676936)
score = 0.3753827027377923
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (17, 202)
train = (0.80323639861040452, 1.1736377593629606)
scores = (0.4570664652488281, 0.3852813054286584)
score = 0.4211738853387432
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (17, 202)
train = (0.80323639861040452, 1.1736377593629606)
scores = (0.4570664652488281, 0.3852813054286584)
score = 0.4211738853387432
>>> t = 5501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 232
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp1dd|vp5dd|Volatility)
            & [10:,15:,10:5,20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:, 10:5] 
                | Since{Min&index[20]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[ 10:5] 
                | Since{Max & index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[60:] 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo)
            & index[0, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|vp5dd)
            & [15:,20:15,15:5,20:10,20:5] 
          }
      )
    | 
        | FracRec[250:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.5, 2012.25, 2009.75, 2013.75, 2013.5, 2014.5, 2009.25, 2010.0, 2011.25, 2012.75, 2013.25, 2014.25, 2015.25}), frozenset({2010.75, 2011.5, 2011.75, 2012.5, 2009.0, 2014.0, 2009.5, 2010.25, 2011.0, 2012.0, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (115, 15)
train = (1.0160976767088732, 0.71118136610894755)
scores = (0.35086370838152731, 0.39499440787305029)
score = 0.3729290581272888
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (393, 19)
train = (1.6425676680486812, 0.73583325055129367)
scores = (0.37549587403457635, 0.3760213273714928)
score = 0.3757586007030346
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (350, 17)
train = (1.3030376218180229, 0.68024741986353965)
scores = (0.38406117883759283, 0.40415379473152374)
score = 0.3941074867845583
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (350, 17)
train = (1.3030376218180229, 0.68024741986353965)
scores = (0.38406117883759283, 0.40415379473152374)
score = 0.3941074867845583
>>> t = 5600 ===================================================================================================
(pair) len(F.columns) = 21
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 46
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|doo|vp1dd)
            & index[1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [5:,10:,10:5,15:10,20:15] 
          }
      )
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2011.0, 2011.25, 2012.75, 2012.0, 2009.25, 2014.5, 2009.0, 2010.75, 2011.5, 2012.25, 2013.75, 2014.25, 2015.0}), frozenset({2010.25, 2010.5, 2009.75, 2013.25, 2013.5, 2014.0, 2009.5, 2010.0, 2011.75, 2012.5, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (20, 43)
train = (0.67148532853073606, 0.68367475777916686)
scores = (0.39980836535170722, 0.26084944763012918)
score = 0.3303289064909182
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (17, 56)
train = (0.68883527146092483, 0.82819157860464443)
scores = (0.39314465890324596, 0.27893237341904065)
score = 0.33603851616114333
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (188, 290)
train = (0.88548397550931579, 0.8245669404971574)
scores = (0.40533372315734045, 0.26979695307502899)
score = 0.3375653381161847
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (188, 290)
train = (0.88548397550931579, 0.8245669404971574)
scores = (0.40533372315734045, 0.26979695307502899)
score = 0.3375653381161847
>>> t = 5601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 46
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|doo|vp1dd)
            & index[1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [5:,10:,10:5,15:10,20:15] 
          }
      )
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.0, 2011.75, 2009.75, 2013.75, 2013.5, 2014.0, 2009.5, 2010.75, 2011.25, 2012.25, 2013.25, 2014.25}), frozenset({2010.5, 2015.0, 2012.5, 2012.75, 2009.25, 2014.5, 2009.0, 2010.0, 2011.5, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1252, 35)
train = (1.7177878963305173, 0.62440177964995658)
scores = (0.38134694987565715, 0.45457666101032057)
score = 0.4179618054429889
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (349, 60)
train = (1.5017874195193592, 0.69005336147795682)
scores = (0.35619261961959214, 0.45263592997612262)
score = 0.4044142747978574
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1028, 71)
train = (1.4332216706427576, 0.59521754262579152)
scores = (0.36903545204624905, 0.43707527496070037)
score = 0.4030553635034747
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (1252, 35)
train = (1.7177878963305173, 0.62440177964995658)
scores = (0.38134694987565715, 0.45457666101032057)
score = 0.4179618054429889
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (693, 25)
train = (1.7115565510065047, 0.65932317596025025)
scores = (0.37372010451645271, 0.45441024133134578)
score = 0.4140651729238992
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (541, 34)
train = (1.8736501471621319, 0.7368023359704241)
scores = (0.39178660909081148, 0.45115907776025299)
score = 0.42147284342553226
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1612, 9)
train = (1.7689156120367453, 0.45452653118967368)
scores = (0.40073235504188026, 0.43756811303024534)
score = 0.4191502340360628
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (541, 34)
train = (1.8736501471621319, 0.7368023359704241)
scores = (0.39178660909081148, 0.45115907776025299)
score = 0.42147284342553226
>>> t = 5700 ===================================================================================================
(pair) len(F.columns) = 80
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 156
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo)
            & index[0,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd|Volatility)
            & [5:,10:5,15:10,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|aoo[10:])} 
            & (
                | Drawdown[1:,10:, 10:5] 
                | Drawup[10:,20:] 
                | Since{Min&index[10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| Volatility)
        & [5:,10:] 
      }
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo)
            & index[1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [5:,10:,15:,15:10,15:5] 
          }
        | ( 
            <>Return{(oo{.&[10:]})} 
            & (
                | Drawdown[1:, 5:] 
                | Since{Min&index[0,5,20]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | FracRec[62:] 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.25, 2015.0, 2009.25, 2009.5, 2013.0, 2009.0, 2009.75, 2010.0, 2011.5, 2012.75, 2013.5, 2014.25, 2015.25}), frozenset({2010.5, 2011.25, 2011.75, 2012.25, 2012.5, 2013.75, 2014.5, 2014.0, 2010.75, 2011.0, 2012.0, 2013.25, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (308, 5)
train = (1.0450123688427948, 0.75076970808435961)
scores = (0.42720422572723893, 0.38178353441453067)
score = 0.4044938800708848
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (216, 201)
train = (1.0810156737206909, 1.4304433211222394)
scores = (0.43987594536007218, 0.41152304680645041)
score = 0.4256994960832613
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (201, 9)
train = (0.90709368625612752, 0.67320694190332708)
scores = (0.39969209938745864, 0.33649048049137986)
score = 0.36809128993941925
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (216, 201)
train = (1.0810156737206909, 1.4304433211222394)
scores = (0.43987594536007218, 0.41152304680645041)
score = 0.4256994960832613
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (142, 6)
train = (1.016159535597301, 0.85494901598647255)
scores = (0.41834953557674687, 0.37188457550727905)
score = 0.39511705554201293
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (115, 15)
train = (1.1150993999620957, 0.94236247832737996)
scores = (0.42527015983677952, 0.37966188252667388)
score = 0.4024660211817267
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (197, 352)
train = (1.0002497897535041, 1.457953756371031)
scores = (0.39766894882325904, 0.42527734722656779)
score = 0.4114731480249134
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (197, 352)
train = (1.0002497897535041, 1.457953756371031)
scores = (0.39766894882325904, 0.42527734722656779)
score = 0.4114731480249134
>>> t = 5701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 156
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo)
            & index[0,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd|Volatility)
            & [5:,10:5,15:10,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|aoo[10:])} 
            & (
                | Drawdown[1:,10:, 10:5] 
                | Drawup[10:,20:] 
                | Since{Min&index[10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| Volatility)
        & [5:,10:] 
      }
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo)
            & index[1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [5:,10:,15:,15:10,15:5] 
          }
        | ( 
            <>Return{(oo{.&[10:]})} 
            & (
                | Drawdown[1:, 5:] 
                | Since{Min&index[0,5,20]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | FracRec[62:] 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.75, 2010.0, 2012.75, 2009.25, 2013.25, 2013.5, 2009.0, 2010.25, 2011.0, 2009.75, 2013.0, 2014.5, 2015.25}), frozenset({2011.5, 2011.75, 2012.25, 2012.5, 2014.25, 2014.0, 2009.5, 2010.5, 2011.25, 2012.0, 2013.75, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (20, 14)
train = (0.65164111503681743, 0.75331425370570548)
scores = (0.33488836246816711, 0.41268164424353687)
score = 0.37378500335585196
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (51, 13)
train = (0.81345741025105756, 0.73292044266041489)
scores = (0.33940612106607693, 0.44449797086320325)
score = 0.39195204596464006
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (21, 13)
train = (0.71251939170211953, 0.68474550320946881)
scores = (0.34654541773278108, 0.43347470204195881)
score = 0.3900100598873699
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (51, 13)
train = (0.81345741025105756, 0.73292044266041489)
scores = (0.33940612106607693, 0.44449797086320325)
score = 0.39195204596464006
>>> t = 5800 ===================================================================================================
(pair) len(F.columns) = 33
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 47
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|doc|vp1dd)
            & index[0,2,1:2,0:2] 
          }
      )
    | Market{.& 
        <>(~Weight)
        & ( VP)
        & [60:] 
      }
#<>#
0
#<>#
    <>~Market & (
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Since{Max & index[0,10]} 
                | Drawup[1,20:] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return)
        & [10:,60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2011.75, 2011.25, 2009.0, 2013.0, 2014.75, 2014.25, 2014.0, 2009.5, 2010.75, 2011.0, 2009.75, 2013.5, 2014.5}), frozenset({2010.0, 2010.5, 2015.0, 2012.25, 2012.5, 2012.75, 2013.75, 2009.25, 2010.25, 2011.5, 2012.0, 2013.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (4, 30)
train = (0.42258175922195856, 0.97946995160571138)
scores = (0.11872013880952828, 0.14863511388477149)
score = 0.13367762634714989
>>> t = 5801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 47
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|doc|vp1dd)
            & index[0,2,1:2,0:2] 
          }
      )
    | Market{.& 
        <>(~Weight)
        & ( VP)
        & [60:] 
      }
#<>#
0
#<>#
    <>~Market & (
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Since{Max & index[0,10]} 
                | Drawup[1,20:] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return)
        & [10:,60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2011.5, 2012.25, 2009.75, 2009.5, 2014.75, 2014.25, 2009.25, 2010.25, 2011.0, 2012.5, 2013.25, 2014.5, 2015.0}), frozenset({2010.0, 2010.75, 2011.75, 2012.75, 2013.5, 2013.75, 2009.0, 2010.5, 2011.25, 2012.0, 2013.0, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (222, 47)
train = (1.1091782373528638, 0.84102077783662621)
scores = (0.23625448764800791, 0.19541902852249596)
score = 0.21583675808525193
>>> t = 5900 ===================================================================================================
(pair) len(F.columns) = 95
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 150
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doc|vp1dd)
            & index[2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [3:,12:,15:,9:6,9:3,18:12,18:9,21:12,18:6] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                | Drawdown[20:, 10:5] 
                | Since{Max&index[10]} 
                | Drawup[20:10] 
                | Since{Min&index[5]} 
              )
            & Since[21:, 62:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                | Drawdown[20:10] 
                | Since{Max & index[5,20]} 
                | Drawup[20:10] 
                | Since{Min & index[0,20]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( VP| Volatility)
        & [5:,10:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|vp1dd)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo)
            & [10:,15:,10:5,15:10,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[1:,10:,20:] 
                | Since{Max&index[0]} 
                | Drawup[ 10:5] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max & index[0]} 
                | Drawup[20:10] 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | FracRec[250:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.25, 2010.75, 2009.5, 2013.25, 2013.75, 2014.25, 2009.75, 2015.25, 2011.75, 2009.25, 2013.5, 2014.0, 2015.0}), frozenset({2010.5, 2011.25, 2011.5, 2012.25, 2012.5, 2012.75, 2014.5, 2009.0, 2010.0, 2011.0, 2012.0, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (12, 652)
train = (0.74147791889103587, 1.4235865736531024)
scores = (0.31207046006546352, 0.41020089571095975)
score = 0.36113567788821166
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (13, 188)
train = (0.70218343488126844, 1.2109545409854101)
scores = (0.28003112067928232, 0.35101215324303464)
score = 0.3155216369611585
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (38, 24)
train = (0.81792718336184134, 0.75836930404653224)
scores = (0.31058638875729816, 0.38914611859669984)
score = 0.349866253676999
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (12, 652)
train = (0.74147791889103587, 1.4235865736531024)
scores = (0.31207046006546352, 0.41020089571095975)
score = 0.36113567788821166
>>> t = 5901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 150
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doc|vp1dd)
            & index[2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [3:,12:,15:,9:6,9:3,18:12,18:9,21:12,18:6] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                | Drawdown[20:, 10:5] 
                | Since{Max&index[10]} 
                | Drawup[20:10] 
                | Since{Min&index[5]} 
              )
            & Since[21:, 62:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                | Drawdown[20:10] 
                | Since{Max & index[5,20]} 
                | Drawup[20:10] 
                | Since{Min & index[0,20]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( VP| Volatility)
        & [5:,10:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|vp1dd)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo)
            & [10:,15:,10:5,15:10,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[1:,10:,20:] 
                | Since{Max&index[0]} 
                | Drawup[ 10:5] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max & index[0]} 
                | Drawup[20:10] 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | FracRec[250:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.75, 2011.25, 2012.5, 2009.75, 2014.25, 2014.0, 2009.0, 2010.25, 2011.5, 2009.25, 2013.0, 2014.5, 2015.0}), frozenset({2010.5, 2011.75, 2012.25, 2012.75, 2013.5, 2013.75, 2009.5, 2010.0, 2011.0, 2012.0, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (473, 579)
train = (1.252501602405603, 1.5415482417885793)
scores = (0.56572254780307873, 0.49036841624181393)
score = 0.5280454820224463
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 168)
train = (0.48083518039015505, 1.2796406753025884)
scores = (0.44581649734111045, 0.47373058236626092)
score = 0.4597735398536857
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 303)
train = (0.5461351726074829, 1.2952378444199004)
scores = (0.44180339609048552, 0.50469617822505686)
score = 0.4732497871577712
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (473, 579)
train = (1.252501602405603, 1.5415482417885793)
scores = (0.56572254780307873, 0.49036841624181393)
score = 0.5280454820224463
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 366)
train = (0.6633726399334281, 1.5535732401204263)
scores = (0.44830617595714173, 0.4729130409010211)
score = 0.4606096084290814
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (174, 196)
train = (1.2763955694756068, 1.5394995224544556)
scores = (0.53829945473126739, 0.46240167566338475)
score = 0.5003505651973261
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 326)
train = (0.59639240755263179, 1.4107153755278936)
scores = (0.44921709564887385, 0.50077612573826935)
score = 0.4749966106935716
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (174, 196)
train = (1.2763955694756068, 1.5394995224544556)
scores = (0.53829945473126739, 0.46240167566338475)
score = 0.5003505651973261
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 236)
train = (0.7645135614646511, 1.5392585458580466)
scores = (0.46399213763368113, 0.46616335778234214)
score = 0.46507774770801164
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 158)
train = (0.74934585268933529, 1.6779594675633454)
scores = (0.47684816998332813, 0.4742268980706717)
score = 0.47553753402699994
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 268)
train = (0.59854727746599112, 1.4167780956553959)
scores = (0.44855865417655039, 0.49738252648678022)
score = 0.47297059033166533
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (1, 158)
train = (0.74934585268933529, 1.6779594675633454)
scores = (0.47684816998332813, 0.4742268980706717)
score = 0.47553753402699994
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 200)
train = (0.79260165713571917, 1.5607241650686448)
scores = (0.47010578070329639, 0.46043843790832012)
score = 0.46527210930580826
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 209)
train = (0.92305811156325224, 1.9095573365739542)
scores = (0.50132742009224318, 0.48063170365924651)
score = 0.4909795618757449
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (165, 366)
train = (1.2705598349446616, 1.5398983793853043)
scores = (0.54561224918265117, 0.50146006918088393)
score = 0.5235361591817675
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (165, 366)
train = (1.2705598349446616, 1.5398983793853043)
scores = (0.54561224918265117, 0.50146006918088393)
score = 0.5235361591817675
>>> t = 5902 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 150
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doc|vp1dd)
            & index[2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [3:,12:,15:,9:6,9:3,18:12,18:9,21:12,18:6] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                | Drawdown[20:, 10:5] 
                | Since{Max&index[10]} 
                | Drawup[20:10] 
                | Since{Min&index[5]} 
              )
            & Since[21:, 62:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                | Drawdown[20:10] 
                | Since{Max & index[5,20]} 
                | Drawup[20:10] 
                | Since{Min & index[0,20]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( VP| Volatility)
        & [5:,10:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|vp1dd)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo)
            & [10:,15:,10:5,15:10,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[1:,10:,20:] 
                | Since{Max&index[0]} 
                | Drawup[ 10:5] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max & index[0]} 
                | Drawup[20:10] 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | FracRec[250:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2015.25, 2011.25, 2009.5, 2009.75, 2013.5, 2013.75, 2013.25, 2009.25, 2010.5, 2011.75, 2012.75, 2013.0, 2015.0}), frozenset({2010.25, 2010.75, 2011.5, 2012.25, 2012.5, 2014.5, 2014.25, 2014.0, 2009.0, 2010.0, 2011.0, 2012.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (11, 225)
train = (0.67349736367290081, 1.1661860697962561)
scores = (0.36172699603252678, 0.40963732277823067)
score = 0.38568215940537875
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (10, 132)
train = (0.61495892417548237, 1.0083720950577815)
scores = (0.34874937022546126, 0.38402205920032201)
score = 0.3663857147128916
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (27, 260)
train = (0.7708298791209216, 1.1971842549611205)
scores = (0.39684471038899938, 0.4066082826798203)
score = 0.40172649653440984
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (27, 260)
train = (0.7708298791209216, 1.1971842549611205)
scores = (0.39684471038899938, 0.4066082826798203)
score = 0.40172649653440984
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (16, 184)
train = (0.8664345466904203, 1.2454561623714091)
scores = (0.36097200958198911, 0.3960216490369422)
score = 0.37849682930946565
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (10, 463)
train = (0.79700434975576406, 1.5836279770320552)
scores = (0.34192025345391835, 0.45714002249283131)
score = 0.39953013797337483
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (6, 289)
train = (0.69832427471297021, 1.2960494249067804)
scores = (0.39751832271146981, 0.43049449780611743)
score = 0.4140064102587936
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (6, 289)
train = (0.69832427471297021, 1.2960494249067804)
scores = (0.39751832271146981, 0.43049449780611743)
score = 0.4140064102587936
>>> t = 5903 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 150
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doc|vp1dd)
            & index[2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [3:,12:,15:,9:6,9:3,18:12,18:9,21:12,18:6] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                | Drawdown[20:, 10:5] 
                | Since{Max&index[10]} 
                | Drawup[20:10] 
                | Since{Min&index[5]} 
              )
            & Since[21:, 62:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                | Drawdown[20:10] 
                | Since{Max & index[5,20]} 
                | Drawup[20:10] 
                | Since{Min & index[0,20]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( VP| Volatility)
        & [5:,10:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|vp1dd)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo)
            & [10:,15:,10:5,15:10,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[1:,10:,20:] 
                | Since{Max&index[0]} 
                | Drawup[ 10:5] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max & index[0]} 
                | Drawup[20:10] 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | FracRec[250:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.75, 2010.5, 2012.75, 2012.25, 2009.0, 2014.25, 2009.5, 2010.25, 2011.25, 2012.0, 2013.25, 2014.5, 2015.0}), frozenset({2011.5, 2011.75, 2009.75, 2013.5, 2013.75, 2014.0, 2009.25, 2010.0, 2011.0, 2012.5, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (10, 135)
train = (0.69794490813596199, 1.1182746102012147)
scores = (0.41347300800752124, 0.31965012464136561)
score = 0.3665615663244434
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (14, 193)
train = (0.70583129953498169, 1.2829985816195393)
scores = (0.39665451567181409, 0.30496886565270664)
score = 0.35081169066226037
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (15, 119)
train = (0.69288450208188734, 1.0211716690302917)
scores = (0.4134005319520121, 0.34977557526922526)
score = 0.38158805361061865
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (15, 119)
train = (0.69288450208188734, 1.0211716690302917)
scores = (0.4134005319520121, 0.34977557526922526)
score = 0.38158805361061865
>>> t = 6000 ===================================================================================================
(pair) len(F.columns) = 84
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 102
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [10:,15:,10:5,15:10,20:5] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc)
            & index[1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:] 
                | Since{Max&index[0]} 
                | Drawup[ 5:,20:10] 
                | Since{Min&index[20]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[1:, 5:] 
                | Since{Max & index[5,10]} 
                | Since{Min & index[5,10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.5, 2011.75, 2011.25, 2012.25, 2012.0, 2009.0, 2013.25, 2009.75, 2010.0, 2011.0, 2009.25, 2013.5, 2015.25}), frozenset({2010.75, 2012.75, 2013.75, 2014.5, 2014.25, 2014.0, 2009.5, 2010.25, 2011.5, 2012.5, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (24, 227)
train = (0.69064955409762496, 1.0823854131253734)
scores = (0.42481979823551302, 0.4250225781468332)
score = 0.4249211881911731
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (38, 96)
train = (0.6589643918626904, 1.0143989025621289)
scores = (0.378518635338498, 0.43555275383991043)
score = 0.4070356945892042
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (35, 324)
train = (0.68622332513767748, 1.0750015187950146)
scores = (0.4440447514122447, 0.42583673800129546)
score = 0.4349407447067701
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (35, 324)
train = (0.68622332513767748, 1.0750015187950146)
scores = (0.4440447514122447, 0.42583673800129546)
score = 0.4349407447067701
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 131)
train = (0.64334197566926232, 1.0910942079311277)
scores = (0.42816466840736617, 0.43002016688827627)
score = 0.42909241764782124
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (44, 93)
train = (0.79114885262126955, 1.2087889906419667)
scores = (0.36240112562470517, 0.44497600029741918)
score = 0.40368856296106215
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (35, 339)
train = (0.77241704137160627, 1.20168360055803)
scores = (0.4458417455612767, 0.44297807235343684)
score = 0.44440990895735677
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (35, 339)
train = (0.77241704137160627, 1.20168360055803)
scores = (0.4458417455612767, 0.44297807235343684)
score = 0.44440990895735677
>>> t = 6001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 102
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [10:,15:,10:5,15:10,20:5] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc)
            & index[1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:] 
                | Since{Max&index[0]} 
                | Drawup[ 5:,20:10] 
                | Since{Min&index[20]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[1:, 5:] 
                | Since{Max & index[5,10]} 
                | Since{Min & index[5,10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.75, 2010.25, 2012.25, 2009.75, 2013.25, 2013.0, 2009.0, 2015.25, 2011.75, 2012.0, 2013.5, 2014.25, 2015.0}), frozenset({2010.5, 2011.25, 2011.5, 2012.75, 2009.25, 2014.5, 2014.0, 2009.5, 2010.0, 2011.0, 2012.5, 2013.75, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (43, 64)
train = (0.77003540671920745, 0.81169965096338093)
scores = (0.36905501564140086, 0.34254752256407062)
score = 0.35580126910273574
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (30, 55)
train = (0.71743374620653988, 0.81541495165449607)
scores = (0.34171023480293761, 0.32826397068074653)
score = 0.33498710274184207
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (21, 102)
train = (0.6498706605464899, 0.82989626275950601)
scores = (0.40616259880691502, 0.35952696362016018)
score = 0.3828447812135376
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (21, 102)
train = (0.6498706605464899, 0.82989626275950601)
scores = (0.40616259880691502, 0.35952696362016018)
score = 0.3828447812135376
>>> t = 6100 ===================================================================================================
(pair) len(F.columns) = 25
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 33
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [3:,6:,9:,18:,15:12,12:6,18:12,15:6,21:12] 
          }
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[5]} 
                | Since{Min & index[10]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|vp1dd)
            & index[0,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd)
            & [3:,9:,15:,6:3,9:6,18:15,9:3,12:6,12:3,18:9,21:12,15:3,18:6,21:9] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[5]} 
                | Since{Min & index[5,20]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr{Uni} 
len(samps) = 2
(frozenset({2011.75, 2012.0, 2009.5, 2009.75, 2013.75, 2014.0, 2009.25, 2010.0, 2011.25, 2009.0, 2013.25, 2014.5, 2015.25}), frozenset({2010.5, 2010.75, 2011.5, 2012.5, 2012.75, 2013.5, 2014.25, 2010.25, 2011.0, 2012.25, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (46, 106)
train = (0.9330769120551955, 0.84458436711979423)
scores = (0.35467974725918416, 0.37588585761654097)
score = 0.3652828024378626
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (62, 81)
train = (0.95816041406383012, 0.93076695257964881)
scores = (0.3400215325466468, 0.36869849526646664)
score = 0.3543600139065567
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (54, 6)
train = (0.82036714563037028, 0.48593943976269749)
scores = (0.37026059339530343, 0.3229640601599662)
score = 0.3466123267776348
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (46, 106)
train = (0.9330769120551955, 0.84458436711979423)
scores = (0.35467974725918416, 0.37588585761654097)
score = 0.3652828024378626
>>> t = 6101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 33
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [3:,6:,9:,18:,15:12,12:6,18:12,15:6,21:12] 
          }
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[5]} 
                | Since{Min & index[10]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|vp1dd)
            & index[0,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd)
            & [3:,9:,15:,6:3,9:6,18:15,9:3,12:6,12:3,18:9,21:12,15:3,18:6,21:9] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[5]} 
                | Since{Min & index[5,20]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.75, 2012.25, 2012.5, 2012.0, 2009.0, 2013.0, 2013.25, 2009.25, 2010.5, 2011.75, 2009.75, 2013.5, 2014.0}), frozenset({2010.25, 2015.0, 2011.25, 2011.5, 2014.5, 2014.25, 2009.5, 2010.0, 2011.0, 2012.75, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (24, 1)
train = (0.82088701586539492, 0.58423022283783999)
scores = (0.35806796073785041, 0.23475259881166663)
score = 0.29641027977475853
>>> t = 6200 ===================================================================================================
(pair) len(F.columns) = 60
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 68
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [12:,15:,6:3,21:18,9:3,12:6,            15:9,18:12,12:3,21:12,15:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Drawup[1:, 5:] 
                | Since{Min&index[0,5,10]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max & index[10,20]} 
                | Drawup[1,10:] 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2011.75, 2009.75, 2013.25, 2013.0, 2014.25, 2009.5, 2010.25, 2011.5, 2012.5, 2013.5, 2014.0, 2015.0}), frozenset({2010.5, 2011.25, 2012.25, 2012.75, 2009.25, 2014.5, 2009.0, 2010.0, 2011.0, 2012.0, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 121)
train = (0.56821984714933016, 0.83167962258721606)
scores = (0.36338750235140982, 0.468230265431267)
score = 0.4158088838913384
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (130, 162)
train = (1.2554508193505673, 0.93398657136425656)
scores = (0.40893110610757111, 0.4546202628328318)
score = 0.4317756844702014
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (122, 82)
train = (0.81735994628581654, 0.73908658644854919)
scores = (0.39496674536443832, 0.46175687452143721)
score = 0.42836180994293777
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (130, 162)
train = (1.2554508193505673, 0.93398657136425656)
scores = (0.40893110610757111, 0.4546202628328318)
score = 0.4317756844702014
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (226, 42)
train = (1.413240480323551, 0.80378111008117525)
scores = (0.43358791155362375, 0.45549263424451603)
score = 0.4445402728990699
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (188, 178)
train = (1.8024076443137971, 1.1043622078164568)
scores = (0.43127181205716242, 0.47004010425990633)
score = 0.4506559581585344
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (164, 78)
train = (1.0121157347732184, 0.81098147954655586)
scores = (0.40425300486096882, 0.47444225491645958)
score = 0.43934762988871423
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (188, 178)
train = (1.8024076443137971, 1.1043622078164568)
scores = (0.43127181205716242, 0.47004010425990633)
score = 0.4506559581585344
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (254, 53)
train = (1.6546978959996745, 0.92764369188692297)
scores = (0.44402302548767547, 0.47526562128490363)
score = 0.4596443233862896
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (260, 1)
train = (2.1221931553724143, 0.78778460146723683)
scores = (0.47024054029567508, 0.44175076154625736)
score = 0.4559956509209662
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (115, 89)
train = (0.98080365537696046, 0.88011932369318124)
scores = (0.41012263697725765, 0.47990077598358843)
score = 0.44501170648042304
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (254, 53)
train = (1.6546978959996745, 0.92764369188692297)
scores = (0.44402302548767547, 0.47526562128490363)
score = 0.4596443233862896
>>> t = 6201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 68
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [12:,15:,6:3,21:18,9:3,12:6,            15:9,18:12,12:3,21:12,15:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Drawup[1:, 5:] 
                | Since{Min&index[0,5,10]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max & index[10,20]} 
                | Drawup[1,10:] 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2011.25, 2012.5, 2009.0, 2009.75, 2014.75, 2014.5, 2009.25, 2015.0, 2011.0, 2012.0, 2014.0, 2015.25}), frozenset({2010.5, 2010.75, 2011.75, 2012.75, 2013.25, 2013.5, 2013.75, 2009.5, 2010.25, 2011.5, 2012.25, 2013.0, 2014.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (358, 95)
train = (1.0398297508643972, 0.94776531207589021)
scores = (0.41276721943218586, 0.41393228660202985)
score = 0.41334975301710786
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (90, 50)
train = (0.87101730431063484, 0.98275217826983974)
scores = (0.39670735039706456, 0.38605462171012883)
score = 0.3913809860535967
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (181, 90)
train = (0.84625067848110402, 0.77766044425602032)
scores = (0.42146750388867577, 0.38825325115577125)
score = 0.4048603775222235
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (358, 95)
train = (1.0398297508643972, 0.94776531207589021)
scores = (0.41276721943218586, 0.41393228660202985)
score = 0.41334975301710786
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (193, 93)
train = (1.0399171056248493, 1.1001855384039798)
scores = (0.41452629493996068, 0.41188793439230348)
score = 0.4132071146661321
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (263, 51)
train = (1.2213122737127677, 1.3277902272999027)
scores = (0.43531707393020203, 0.39009294089808344)
score = 0.41270500741414273
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (195, 6)
train = (0.96250548722131302, 0.59480561542552313)
scores = (0.43057920456184512, 0.38145634640717674)
score = 0.4060177754845109
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (193, 93)
train = (1.0399171056248493, 1.1001855384039798)
scores = (0.41452629493996068, 0.41188793439230348)
score = 0.4132071146661321
>>> t = 6202 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 68
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [12:,15:,6:3,21:18,9:3,12:6,            15:9,18:12,12:3,21:12,15:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Drawup[1:, 5:] 
                | Since{Min&index[0,5,10]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max & index[10,20]} 
                | Drawup[1,10:] 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.75, 2012.75, 2012.5, 2013.0, 2014.0, 2009.25, 2010.0, 2011.5, 2009.0, 2013.5, 2014.5, 2015.25}), frozenset({2011.25, 2011.75, 2012.25, 2009.75, 2013.75, 2014.25, 2009.5, 2010.5, 2011.0, 2012.0, 2013.25, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 58)
train = (0.55483897976348673, 0.88607400928776336)
scores = (0.30239351022060834, 0.44475955208457546)
score = 0.37357653115259193
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 44)
train = (0.58644724635894696, 0.95763489077438435)
scores = (0.28780559598398398, 0.42445100253267071)
score = 0.35612829925832734
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (93, 85)
train = (0.70399912489191507, 0.85710689026410647)
scores = (0.30244671170251036, 0.42057040974223436)
score = 0.36150856072237236
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (1, 58)
train = (0.55483897976348673, 0.88607400928776336)
scores = (0.30239351022060834, 0.44475955208457546)
score = 0.37357653115259193
>>> t = 6300 ===================================================================================================
(pair) len(F.columns) = 44
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 75
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[ 5:,20:] 
                | Drawup[ 10:5] 
                | Since{Min&index[0]} 
              )
            & Since[ 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[20]} 
                | Drawup[10:] 
                | Since{Min & index[0]} 
              )
            & Since[ 62:] 
          )
      )
    | 
        | FracRec[62:] 
    | 
        <>AssetEnc{InUni} 
    | 
        | Return{mix[1,3,5,7,8,14,18,19]}
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo)
            & [10:,10:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:, 10:5] 
                | Since{Max&index[5,20]} 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [10:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.5, 2010.75, 2011.0, 2011.5, 2012.5, 2013.75, 2014.0, 2009.75, 2010.25, 2011.75, 2012.75, 2013.0, 2014.75}), frozenset({2015.0, 2012.25, 2009.0, 2009.25, 2013.5, 2014.25, 2009.5, 2010.0, 2011.25, 2012.0, 2013.25, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (356, 13)
train = (1.4232489200590979, 0.63680030368731932)
scores = (0.39244919873149003, 0.46631217833001931)
score = 0.4293806885307547
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (320, 11)
train = (1.4271878473309656, 0.51249605893458938)
scores = (0.43365288261067764, 0.4560987324530551)
score = 0.4448758075318664
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (292, 108)
train = (1.2636167385019594, 0.92283713905053022)
scores = (0.34960554260918186, 0.47461318877907477)
score = 0.4121093656941283
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (320, 11)
train = (1.4271878473309656, 0.51249605893458938)
scores = (0.43365288261067764, 0.4560987324530551)
score = 0.4448758075318664
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (237, 13)
train = (1.5019385222799231, 0.81206967113540085)
scores = (0.41540827138177439, 0.455985635395811)
score = 0.43569695338879266
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (193, 16)
train = (1.6011987448752563, 0.68841624230399934)
scores = (0.44830253930468278, 0.46255643223572634)
score = 0.4554294857702046
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (282, 40)
train = (1.4088329956694565, 0.90200161531559753)
scores = (0.35973603354492401, 0.46571249036439594)
score = 0.41272426195465994
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (193, 16)
train = (1.6011987448752563, 0.68841624230399934)
scores = (0.44830253930468278, 0.46255643223572634)
score = 0.4554294857702046
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (160, 15)
train = (1.5361764268050853, 0.91221996335959032)
scores = (0.40161813943438646, 0.4395671388671466)
score = 0.4205926391507665
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (198, 12)
train = (1.9221714806001144, 0.84753973910316061)
scores = (0.44169317345349746, 0.47824380282788204)
score = 0.45996848814068975
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (352, 42)
train = (1.5920727618490749, 0.9741543761879321)
scores = (0.39258795024057058, 0.47410472037918433)
score = 0.43334633530987743
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (198, 12)
train = (1.9221714806001144, 0.84753973910316061)
scores = (0.44169317345349746, 0.47824380282788204)
score = 0.45996848814068975
>>> t = 6301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 75
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[ 5:,20:] 
                | Drawup[ 10:5] 
                | Since{Min&index[0]} 
              )
            & Since[ 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[20]} 
                | Drawup[10:] 
                | Since{Min & index[0]} 
              )
            & Since[ 62:] 
          )
      )
    | 
        | FracRec[62:] 
    | 
        <>AssetEnc{InUni} 
    | 
        | Return{mix[1,3,5,7,8,14,18,19]}
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo)
            & [10:,10:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:, 10:5] 
                | Since{Max&index[5,20]} 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [10:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.75, 2011.5, 2011.25, 2009.75, 2013.75, 2014.0, 2009.0, 2010.0, 2011.0, 2012.75, 2013.5, 2014.5, 2015.25}), frozenset({2010.5, 2012.25, 2012.5, 2009.25, 2013.25, 2014.25, 2009.5, 2010.25, 2011.75, 2012.0, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (358, 16)
train = (1.3372671867954011, 0.64244268424496231)
scores = (0.38117286880366719, 0.41965915753039101)
score = 0.40041601316702913
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (299, 9)
train = (1.2248743182288919, 0.52773497554768822)
scores = (0.37948079502351079, 0.34454270271835935)
score = 0.36201174887093507
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (374, 24)
train = (1.4014943287212041, 0.70827584020991474)
scores = (0.3655077206575123, 0.48598408733873955)
score = 0.42574590399812595
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (374, 24)
train = (1.4014943287212041, 0.70827584020991474)
scores = (0.3655077206575123, 0.48598408733873955)
score = 0.42574590399812595
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (388, 26)
train = (1.4479873039376139, 0.83831957366584609)
scores = (0.38781529357469741, 0.42387674750244181)
score = 0.4058460205385696
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (219, 10)
train = (1.3049838991104312, 0.64672699133407252)
scores = (0.37611738797881067, 0.34442938537741807)
score = 0.36027338667811437
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (570, 43)
train = (1.5479153916054931, 0.82773982161504767)
scores = (0.3790653559982291, 0.503953310478368)
score = 0.44150933323829855
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (570, 43)
train = (1.5479153916054931, 0.82773982161504767)
scores = (0.3790653559982291, 0.503953310478368)
score = 0.44150933323829855
>>> t = 6302 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 75
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[ 5:,20:] 
                | Drawup[ 10:5] 
                | Since{Min&index[0]} 
              )
            & Since[ 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[20]} 
                | Drawup[10:] 
                | Since{Min & index[0]} 
              )
            & Since[ 62:] 
          )
      )
    | 
        | FracRec[62:] 
    | 
        <>AssetEnc{InUni} 
    | 
        | Return{mix[1,3,5,7,8,14,18,19]}
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo)
            & [10:,10:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:, 10:5] 
                | Since{Max&index[5,20]} 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [10:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.0, 2015.25, 2012.25, 2012.5, 2009.75, 2013.25, 2014.25, 2009.0, 2010.5, 2012.75, 2013.0, 2014.75, 2015.0}), frozenset({2010.75, 2011.25, 2011.5, 2011.75, 2009.25, 2013.75, 2014.0, 2009.5, 2010.25, 2011.0, 2012.0, 2013.5, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (157, 204)
train = (0.96717816907951581, 1.1880366314209587)
scores = (0.48627334855555437, 0.35548933626510187)
score = 0.42088134241032815
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (102, 81)
train = (0.87005729680695187, 1.0501005088832835)
scores = (0.42408065430658037, 0.30394311464737345)
score = 0.3640118844769769
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (260, 209)
train = (1.0767849850935418, 1.2038502107113984)
scores = (0.49221415945291119, 0.37097195873048244)
score = 0.4315930590916968
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (260, 209)
train = (1.0767849850935418, 1.2038502107113984)
scores = (0.49221415945291119, 0.37097195873048244)
score = 0.4315930590916968
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (246, 194)
train = (1.1864333411798964, 1.328520156414678)
scores = (0.47945215651366241, 0.35443519883969571)
score = 0.41694367767667906
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (214, 217)
train = (1.2624549614637577, 1.481317002282051)
scores = (0.46249933972099588, 0.33030575556377534)
score = 0.3964025476423856
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (99, 201)
train = (0.98667118959253364, 1.3230191023887514)
scores = (0.4649929760959286, 0.38520505113036124)
score = 0.42509901361314495
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (99, 201)
train = (0.98667118959253364, 1.3230191023887514)
scores = (0.4649929760959286, 0.38520505113036124)
score = 0.42509901361314495
>>> t = 6400 ===================================================================================================
(pair) len(F.columns) = 43
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 89
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [5:,10:,15:5,20:10] 
          }
        | ( 
            <>Return{(aoo[1:]|oo{.&[10:]}|aoo[10:])} 
            & (
                | Drawdown[1:, 5:] 
                | Since{Max&index[0]} 
                | Since{Min&index[0,5]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[0,10,20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [20:] 
      }
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd|Volatility)
            & [10:,15:,10:5,20:15,15:5,20:10] 
          }
      )
    | Market{.& 
        <>(~Weight)
        & (Return)
        & [20:] 
      }
    | 
        | Return{ it} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2010.25, 2012.5, 2009.25, 2009.75, 2013.75, 2014.5, 2009.5, 2010.0, 2011.75, 2012.75, 2013.5, 2014.25}), frozenset({2015.0, 2011.25, 2011.5, 2012.25, 2013.25, 2014.0, 2009.0, 2010.5, 2011.0, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (5, 2)
train = (0.70400552094503344, 0.61076240779556168)
scores = (0.36082076074129227, 0.45055807178492358)
score = 0.40568941626310795
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (110, 2)
train = (1.0909900986652041, 0.61107910249177599)
scores = (0.36319386925407138, 0.37747369263170194)
score = 0.37033378094288666
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (146, 41)
train = (0.96077496683556562, 0.80238170493574223)
scores = (0.38689320787288045, 0.44383090425768135)
score = 0.41536205606528087
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (146, 41)
train = (0.96077496683556562, 0.80238170493574223)
scores = (0.38689320787288045, 0.44383090425768135)
score = 0.41536205606528087
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (144, 32)
train = (1.213499888692092, 0.8532675822803939)
scores = (0.37747837006252671, 0.43042507179734202)
score = 0.40395172092993437
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (194, 2)
train = (1.5488011001226893, 0.69289107762694813)
scores = (0.36805470023346648, 0.39127442320386852)
score = 0.37966456171866747
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (169, 26)
train = (1.1241950074079796, 0.77924914769489073)
scores = (0.38441454781152001, 0.42904581292290805)
score = 0.40673018036721403
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (169, 26)
train = (1.1241950074079796, 0.77924914769489073)
scores = (0.38441454781152001, 0.42904581292290805)
score = 0.40673018036721403
>>> t = 6401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 89
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [5:,10:,15:5,20:10] 
          }
        | ( 
            <>Return{(aoo[1:]|oo{.&[10:]}|aoo[10:])} 
            & (
                | Drawdown[1:, 5:] 
                | Since{Max&index[0]} 
                | Since{Min&index[0,5]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[0,10,20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [20:] 
      }
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd|Volatility)
            & [10:,15:,10:5,20:15,15:5,20:10] 
          }
      )
    | Market{.& 
        <>(~Weight)
        & (Return)
        & [20:] 
      }
    | 
        | Return{ it} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2012.75, 2012.0, 2009.5, 2013.75, 2014.0, 2014.75, 2009.25, 2010.5, 2012.25, 2013.0, 2014.25, 2015.0}), frozenset({2010.25, 2011.25, 2011.5, 2011.75, 2009.75, 2013.5, 2009.0, 2010.75, 2011.0, 2012.5, 2013.25, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (8, 169)
train = (0.65632766409131493, 1.0841212529022584)
scores = (0.3652659011083777, 0.30695274259519506)
score = 0.3361093218517864
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (6, 1)
train = (0.58044449141974686, 0.63664018504626696)
scores = (0.32074006111794201, 0.29608101126510561)
score = 0.3084105361915238
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (4, 1)
train = (0.69770587685622065, 0.6900945826825261)
scores = (0.39012586932658766, 0.31339479336182802)
score = 0.3517603313442078
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (4, 1)
train = (0.69770587685622065, 0.6900945826825261)
scores = (0.39012586932658766, 0.31339479336182802)
score = 0.3517603313442078
>>> t = 6500 ===================================================================================================
(pair) len(F.columns) = 12
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 20
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo|daoc|vp1dd)
            & index[2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(doo|Volatility)
            & [5:,10:,10:5,15:5,20:5] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.5, 2012.5, 2012.25, 2012.75, 2014.0, 2014.5, 2009.0, 2010.75, 2011.75, 2009.75, 2013.75, 2014.25}), frozenset({2010.5, 2015.0, 2011.25, 2009.25, 2013.25, 2013.5, 2009.5, 2010.0, 2011.0, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (5, 55)
train = (0.44906547863811391, 0.56039473824945307)
scores = (0.15362393384626472, 0.21094576196575185)
score = 0.1822848479060083
>>> t = 6501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 20
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo|daoc|vp1dd)
            & index[2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(doo|Volatility)
            & [5:,10:,10:5,15:5,20:5] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.75, 2012.5, 2012.75, 2013.75, 2014.0, 2014.5, 2009.75, 2010.5, 2011.25, 2012.25, 2013.0, 2014.75}), frozenset({2015.0, 2011.5, 2011.75, 2009.0, 2009.25, 2013.5, 2009.5, 2010.0, 2011.0, 2012.0, 2013.25, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 1)
train = (0.25825904617101253, 0.33633245401416823)
scores = (-0.045484035843989537, 0.010975419968329509)
score = -0.017254307937830015
>>> t = 6600 ===================================================================================================
(pair) len(F.columns) = 40
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 82
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|doc)
            & index[ 0:1,1:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|oo{.&[10:]}|aoo[10:]|doo[10:])} 
            & (
                | Drawdown[10:,20:] 
                | Drawup[20:10] 
                | Since{Min&index[0]} 
              )
            & Since[21:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:]
            & (
              )
            & Since[21:] 
          )
      )
    | 
        | Return{mix[1,4,5,8,11,12,14,15,16,18,19]}
        | Return{rr} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2012.75, 2009.25, 2013.0, 2013.75, 2014.5, 2014.25, 2014.0, 2009.5, 2011.25, 2012.5, 2013.5, 2014.75, 2015.25}), frozenset({2010.0, 2010.75, 2010.5, 2011.5, 2011.75, 2012.25, 2009.75, 2009.0, 2010.25, 2011.0, 2012.0, 2013.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (340, 110)
train = (1.0964557759806752, 0.84355916614798354)
scores = (0.34403864245164772, 0.32618517581948547)
score = 0.3351119091355666
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (422, 95)
train = (1.2177869601462881, 0.80788747972719022)
scores = (0.36030145587292062, 0.31639718737199629)
score = 0.33834932162245845
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (909, 155)
train = (1.2963609103872744, 0.84036156690099473)
scores = (0.36460612385050567, 0.32939057611066869)
score = 0.3469983499805872
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (909, 155)
train = (1.2963609103872744, 0.84036156690099473)
scores = (0.36460612385050567, 0.32939057611066869)
score = 0.3469983499805872
>>> t = 6601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 82
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|doc)
            & index[ 0:1,1:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|oo{.&[10:]}|aoo[10:]|doo[10:])} 
            & (
                | Drawdown[10:,20:] 
                | Drawup[20:10] 
                | Since{Min&index[0]} 
              )
            & Since[21:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:]
            & (
              )
            & Since[21:] 
          )
      )
    | 
        | Return{mix[1,4,5,8,11,12,14,15,16,18,19]}
        | Return{rr} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2015.25, 2012.75, 2012.5, 2012.25, 2012.0, 2013.75, 2009.0, 2010.75, 2011.5, 2009.25, 2013.0, 2014.75, 2015.0}), frozenset({2010.25, 2010.5, 2011.25, 2011.75, 2013.5, 2014.25, 2014.0, 2009.5, 2010.0, 2011.0, 2009.75, 2013.25, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (70, 1)
train = (0.67679791618832075, 0.65038899221672575)
scores = (0.41039908382367141, 0.2341312519368294)
score = 0.3222651678802504
>>> t = 6700 ===================================================================================================
(pair) len(F.columns) = 29
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 42
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [5:,10:,15:,15:10,20:10,20:5] 
          }
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return)
        & [10:] 
      }
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo|doc)
            & index[0,2, 0:1,1:2,0:2] 
          }
      )
#<>#
0
#<>#
    <>0
len(samps) = 2
(frozenset({2010.5, 2009.0, 2013.0, 2013.75, 2014.0, 2014.75, 2014.25, 2009.5, 2010.25, 2011.25, 2012.5, 2013.25, 2014.5}), frozenset({2010.0, 2015.0, 2011.5, 2011.75, 2012.25, 2012.75, 2009.75, 2009.25, 2010.75, 2011.0, 2012.0, 2013.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (496, 148)
train = (0.89878831572833651, 0.86000765844603311)
scores = (0.4016330346880751, 0.43783753169254647)
score = 0.4197352831903108
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (358, 3)
train = (0.84571058332235549, 0.65659135324329787)
scores = (0.38539137013024466, 0.40936516708001941)
score = 0.39737826860513203
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (592, 247)
train = (0.87873178211617797, 0.87508514719872244)
scores = (0.39054121607595332, 0.46070974984034735)
score = 0.42562548295815034
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (592, 247)
train = (0.87873178211617797, 0.87508514719872244)
scores = (0.39054121607595332, 0.46070974984034735)
score = 0.42562548295815034
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (407, 17)
train = (0.96471872565234562, 0.7257350528417208)
scores = (0.39924937476214539, 0.44250812473351381)
score = 0.4208787497478296
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (220, 4)
train = (0.92818300964910039, 0.7433088685403938)
scores = (0.38535809173437757, 0.42818077509131569)
score = 0.40676943341284666
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (726, 252)
train = (0.98092132457980763, 0.98035559915821702)
scores = (0.39917506777639583, 0.47725021448373717)
score = 0.4382126411300665
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (726, 252)
train = (0.98092132457980763, 0.98035559915821702)
scores = (0.39917506777639583, 0.47725021448373717)
score = 0.4382126411300665
>>> t = 6701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 42
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [5:,10:,15:,15:10,20:10,20:5] 
          }
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return)
        & [10:] 
      }
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo|doc)
            & index[0,2, 0:1,1:2,0:2] 
          }
      )
#<>#
0
#<>#
    <>0
len(samps) = 2
(frozenset({2010.75, 2011.25, 2012.25, 2009.75, 2013.75, 2013.25, 2009.25, 2010.5, 2011.5, 2012.0, 2013.0, 2014.5, 2015.0}), frozenset({2010.25, 2011.75, 2012.75, 2009.0, 2014.25, 2014.0, 2009.5, 2010.0, 2011.0, 2012.5, 2013.5, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (25, 946)
train = (0.680803789571508, 0.99498457579185329)
scores = (0.45808868229135974, 0.31709760689582039)
score = 0.38759314459359007
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (25, 347)
train = (0.73201202522767839, 0.84198524937657415)
scores = (0.40792955385295632, 0.30510925555521579)
score = 0.35651940470408605
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (46, 453)
train = (0.67958500141593414, 0.82552602979653478)
scores = (0.46577606077207923, 0.27999598119772334)
score = 0.3728860209849013
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (25, 946)
train = (0.680803789571508, 0.99498457579185329)
scores = (0.45808868229135974, 0.31709760689582039)
score = 0.38759314459359007
>>> t = 6800 ===================================================================================================
(pair) len(F.columns) = 38
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 78
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|daoc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|Volatility)
            & [3:,6:,9:,12:,15:,6:3,9:6,21:18,18:12,21:15,18:3,21:6] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:, 10:5] 
                | Since{Max&index[0,5]} 
                | Since{Min&index[0]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[5,10]} 
                | Since{Min & index[0,5]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.25, 2011.75, 2011.25, 2012.25, 2013.75, 2014.0, 2009.25, 2010.75, 2011.5, 2012.0, 2013.25, 2014.75, 2015.25}), frozenset({2010.5, 2012.75, 2009.0, 2009.75, 2013.5, 2014.25, 2009.5, 2010.0, 2011.0, 2012.5, 2013.0, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (142, 85)
train = (1.0974428281844864, 0.80764666482057079)
scores = (0.31521573241964107, 0.36228398635329567)
score = 0.3387498593864684
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (12, 81)
train = (0.73049279334432693, 0.82676199672786643)
scores = (0.19312410295700697, 0.37362988657139634)
score = 0.28337699476420164
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (14, 19)
train = (0.73529134928976236, 0.66164152155421829)
scores = (0.38645269695087181, 0.36036997229891105)
score = 0.3734113346248914
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (14, 19)
train = (0.73529134928976236, 0.66164152155421829)
scores = (0.38645269695087181, 0.36036997229891105)
score = 0.3734113346248914
>>> t = 6801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 78
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|daoc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|Volatility)
            & [3:,6:,9:,12:,15:,6:3,9:6,21:18,18:12,21:15,18:3,21:6] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:, 10:5] 
                | Since{Max&index[0,5]} 
                | Since{Min&index[0]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[5,10]} 
                | Since{Min & index[0,5]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2015.0, 2011.0, 2012.0, 2009.5, 2009.75, 2013.0, 2009.25, 2010.25, 2011.75, 2012.25, 2013.5, 2014.25, 2015.25}), frozenset({2010.0, 2010.75, 2011.5, 2012.75, 2013.75, 2014.5, 2014.0, 2009.0, 2010.5, 2011.25, 2012.5, 2013.25, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (218, 148)
train = (1.1645512195202687, 1.0134080789590332)
scores = (0.26154501662658053, 0.30332613824271459)
score = 0.28243557743464753
>>> t = 6900 ===================================================================================================
(pair) len(F.columns) = 58
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 88
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|doo|daoc|vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:,20:10] 
                | Drawup[10:] 
                | Since{Min&index[0]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [10:,20:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|Volatility)
            & [5:,10:,15:,10:5,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.5, 2011.0, 2011.25, 2012.0, 2009.0, 2009.5, 2014.5, 2009.75, 2010.0, 2011.75, 2012.5, 2014.75, 2015.25}), frozenset({2010.25, 2012.75, 2013.25, 2013.5, 2013.75, 2014.0, 2009.25, 2010.75, 2011.5, 2012.25, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (106, 142)
train = (0.87463560406081864, 1.0440131246933553)
scores = (0.39812364232313163, 0.49637398524444892)
score = 0.4472488137837903
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (269, 81)
train = (1.0440224680511212, 0.90058448077884568)
scores = (0.41835849571885281, 0.46664207539697033)
score = 0.44250028555791154
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (388, 393)
train = (1.0146408396469886, 1.2938062781682305)
scores = (0.42687014408378487, 0.58842917004688755)
score = 0.5076496570653362
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (388, 393)
train = (1.0146408396469886, 1.2938062781682305)
scores = (0.42687014408378487, 0.58842917004688755)
score = 0.5076496570653362
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (266, 184)
train = (1.1215914989337332, 1.3088798971280762)
scores = (0.42962731148571703, 0.52127393148419032)
score = 0.47545062148495365
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 128)
train = (0.82035932334254402, 1.3279264657950884)
scores = (0.3197687590227028, 0.48361870096214571)
score = 0.40169372999242425
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (470, 285)
train = (1.1143205336577235, 1.3674114816279956)
scores = (0.43894905443892862, 0.58067774193322153)
score = 0.5098133981860751
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (470, 285)
train = (1.1143205336577235, 1.3674114816279956)
scores = (0.43894905443892862, 0.58067774193322153)
score = 0.5098133981860751
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (345, 271)
train = (1.2377371935278412, 1.6205077648282566)
scores = (0.43306667300638646, 0.53135929626648726)
score = 0.48221298463643686
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 92)
train = (0.9840498887324326, 1.4541238720987741)
scores = (0.31423066325912441, 0.49152446120849025)
score = 0.40287756223380733
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (412, 468)
train = (1.1381141923966656, 1.6016175419578282)
scores = (0.44226910636925909, 0.59722452116252256)
score = 0.5197468137658908
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (412, 468)
train = (1.1381141923966656, 1.6016175419578282)
scores = (0.44226910636925909, 0.59722452116252256)
score = 0.5197468137658908
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (360, 182)
train = (1.2871952774606863, 1.6072414418199146)
scores = (0.43873120120937126, 0.53230302010906183)
score = 0.48551711065921654
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 117)
train = (1.0955731389045593, 1.7487482571558577)
scores = (0.34018536043030589, 0.50293501035248112)
score = 0.4215601853913935
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (382, 396)
train = (1.1749114725616685, 1.6337458443165362)
scores = (0.43988272285874558, 0.60442122348645355)
score = 0.5221519731725995
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (382, 396)
train = (1.1749114725616685, 1.6337458443165362)
scores = (0.43988272285874558, 0.60442122348645355)
score = 0.5221519731725995
>>> t = 6901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 88
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|doo|daoc|vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:,20:10] 
                | Drawup[10:] 
                | Since{Min&index[0]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [10:,20:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|Volatility)
            & [5:,10:,15:,10:5,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.5, 2010.0, 2012.75, 2013.0, 2014.5, 2014.25, 2009.5, 2015.0, 2011.25, 2009.75, 2013.75, 2014.0, 2015.25}), frozenset({2010.25, 2011.0, 2011.75, 2012.25, 2012.5, 2009.25, 2013.5, 2009.0, 2010.75, 2011.5, 2012.0, 2013.25, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 577)
train = (0.66994815804678387, 1.1707764262780633)
scores = (0.3808284448090361, 0.42662374079821469)
score = 0.40372609280362537
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (145, 374)
train = (1.2282640531885602, 1.1515093698440069)
scores = (0.37473496463614231, 0.45603107444043112)
score = 0.4153830195382867
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 274)
train = (0.60074411389734728, 0.90652812504764468)
scores = (0.38234748875285707, 0.38827791281384516)
score = 0.3853127007833511
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (145, 374)
train = (1.2282640531885602, 1.1515093698440069)
scores = (0.37473496463614231, 0.45603107444043112)
score = 0.4153830195382867
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 795)
train = (0.78048545187501317, 1.3669360984691152)
scores = (0.37617918909071713, 0.44232568116634458)
score = 0.4092524351285308
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (54, 413)
train = (1.1949789185527013, 1.3800859569941004)
scores = (0.37213357563415939, 0.44577758856590821)
score = 0.4089555821000338
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (26, 199)
train = (0.70970741874507604, 0.94523531301475838)
scores = (0.37965951931667458, 0.38532833053696391)
score = 0.3824939249268192
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (2, 795)
train = (0.78048545187501317, 1.3669360984691152)
scores = (0.37617918909071713, 0.44232568116634458)
score = 0.4092524351285308
>>> t = 6902 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 88
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|doo|daoc|vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:,20:10] 
                | Drawup[10:] 
                | Since{Min&index[0]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [10:,20:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|Volatility)
            & [5:,10:,15:,10:5,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[20]
      }
len(samps) = 2
(frozenset({2011.75, 2011.0, 2012.25, 2009.5, 2009.25, 2014.75, 2009.75, 2010.75, 2011.5, 2012.75, 2013.5, 2014.25, 2015.0}), frozenset({2010.0, 2010.5, 2012.5, 2013.25, 2013.75, 2014.0, 2009.0, 2010.25, 2011.25, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (9, 134)
train = (0.56361017634619015, 0.88075419103093855)
scores = (0.4458783338468425, 0.37300092298172149)
score = 0.409439628414282
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (27, 1)
train = (0.64616058824189826, 0.665704569286234)
scores = (0.40122709541851032, 0.18507647299357077)
score = 0.29315178420604054
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (12, 392)
train = (0.52839118130493601, 1.0105964359533464)
scores = (0.46149351369106933, 0.38964610293562069)
score = 0.425569808313345
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (12, 392)
train = (0.52839118130493601, 1.0105964359533464)
scores = (0.46149351369106933, 0.38964610293562069)
score = 0.425569808313345
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (8, 1)
train = (0.65671261157934946, 0.7691068330582056)
scores = (0.43877282018779612, 0.19721278729186967)
score = 0.3179928037398329
>>> t = 6903 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 88
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|doo|daoc|vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:,20:10] 
                | Drawup[10:] 
                | Since{Min&index[0]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [10:,20:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|Volatility)
            & [5:,10:,15:,10:5,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.5, 2012.75, 2009.0, 2014.25, 2014.75, 2009.75, 2010.0, 2011.25, 2012.5, 2013.0, 2014.5, 2015.0}), frozenset({2011.5, 2011.75, 2012.25, 2009.25, 2013.5, 2013.75, 2009.5, 2010.75, 2011.0, 2012.0, 2013.25, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (433, 81)
train = (1.0826618976151561, 0.8745099570866518)
scores = (0.3622279539080091, 0.44134400762942066)
score = 0.40178598076871486
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (150, 24)
train = (0.92585469837619649, 0.73371596993779853)
scores = (0.3390224836094482, 0.4163196448207413)
score = 0.3776710642150948
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 86)
train = (0.52481235365890588, 0.83379512432869451)
scores = (0.32819176367191993, 0.46655314085256927)
score = 0.3973724522622446
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (433, 81)
train = (1.0826618976151561, 0.8745099570866518)
scores = (0.3622279539080091, 0.44134400762942066)
score = 0.40178598076871486
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (111, 165)
train = (0.93094100084426123, 1.1474003401853394)
scores = (0.34902868111976515, 0.46401781418861987)
score = 0.4065232476541925
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 2)
train = (0.70274521932910827, 0.81630954949911105)
scores = (0.30905432751717199, 0.415549450421828)
score = 0.3623018889695
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (232, 322)
train = (0.97775950966571612, 1.1797459583748302)
scores = (0.39484143680753164, 0.5046402091022909)
score = 0.44974082295491125
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (232, 322)
train = (0.97775950966571612, 1.1797459583748302)
scores = (0.39484143680753164, 0.5046402091022909)
score = 0.44974082295491125
>>> t = 7000 ===================================================================================================
(pair) len(F.columns) = 93
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 188
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [5:,10:,20:10] 
          }
        | ( 
            <> Volatility[20:, 60:] 
            | Volatility[10:]
            & (
                <>Drawdown[1:] 
                | Since{Max & index[10]} 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.0, 2012.75, 2012.0, 2012.25, 2009.75, 2013.5, 2014.0, 2009.0, 2010.25, 2011.5, 2012.5, 2013.25, 2014.5}), frozenset({2010.75, 2015.0, 2011.25, 2011.75, 2013.75, 2014.25, 2009.5, 2010.5, 2011.0, 2009.25, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (144, 160)
train = (1.0959475868833639, 1.0422094503055044)
scores = (0.30255396029823106, 0.21203652085943589)
score = 0.25729524057883346
>>> t = 7001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 188
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [5:,10:,20:10] 
          }
        | ( 
            <> Volatility[20:, 60:] 
            | Volatility[10:]
            & (
                <>Drawdown[1:] 
                | Since{Max & index[10]} 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.5, 2012.25, 2009.25, 2013.0, 2014.25, 2014.0, 2009.5, 2010.25, 2011.75, 2012.5, 2013.25, 2014.75, 2015.25}), frozenset({2010.0, 2011.0, 2011.5, 2012.75, 2009.75, 2013.75, 2009.0, 2010.75, 2011.25, 2012.0, 2013.5, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (341, 143)
train = (1.3109958879337611, 1.0733931337619484)
scores = (0.2465614535055202, 0.31511790759800468)
score = 0.28083968055176245
>>> t = 7100 ===================================================================================================
(pair) len(F.columns) = 151
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 428
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,20:,20:10] 
                | Since{Max&index[10]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [1:] 
      }
    | 
        <>Return{pure&~dd} & VP[1:] 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd|Volatility)
            & [15:,20:15,15:5,20:10,20:5] 
          }
        | ( 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,20:,20:10] 
                | Since{Max&index[10]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [1:] 
      }
    | 
        <>Return{pure&~dd} & VP[1:] 
#<>#
    <>0
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.25, 2010.75, 2011.0, 2012.0, 2013.25, 2014.25, 2009.75, 2010.0, 2011.5, 2012.5, 2013.0, 2014.75, 2015.0}), frozenset({2011.75, 2012.75, 2009.0, 2009.25, 2013.75, 2014.0, 2009.5, 2010.5, 2011.25, 2012.25, 2013.5, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (187, 267)
train = (1.3869922516314619, 1.1709725796796187)
scores = (0.42107888849900299, 0.44542191315913726)
score = 0.4332504008290701
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (99, 215)
train = (1.269449590497912, 1.2499011721490219)
scores = (0.45840777207230532, 0.4481285003910877)
score = 0.4532681362316965
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (139, 284)
train = (1.2313695835772798, 1.1333087432622466)
scores = (0.48816920480348064, 0.45357486360557592)
score = 0.4708720342045283
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (139, 284)
train = (1.2313695835772798, 1.1333087432622466)
scores = (0.48816920480348064, 0.45357486360557592)
score = 0.4708720342045283
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (207, 171)
train = (1.5601156854227407, 1.2455712141607251)
scores = (0.44807825672294743, 0.45268729950711994)
score = 0.4503827781150337
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (131, 211)
train = (1.6139830809359188, 1.522878719475901)
scores = (0.50385456509156601, 0.48026754151526008)
score = 0.49206105330341304
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (167, 202)
train = (1.3612540340051822, 1.1902966360254703)
scores = (0.5218497428563561, 0.46307236288120968)
score = 0.4924610528687829
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (167, 202)
train = (1.3612540340051822, 1.1902966360254703)
scores = (0.5218497428563561, 0.46307236288120968)
score = 0.4924610528687829
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (87, 163)
train = (1.436614105650315, 1.3397917527151735)
scores = (0.40269027031518817, 0.4499725297153323)
score = 0.42633140001526026
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (100, 134)
train = (1.7530656225202466, 1.5838427677618041)
scores = (0.5094205536922618, 0.49979721023918033)
score = 0.5046088819657211
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (135, 181)
train = (1.4070586094745796, 1.2281519717236222)
scores = (0.51901321384493349, 0.45784224366589982)
score = 0.4884277287554166
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (100, 134)
train = (1.7530656225202466, 1.5838427677618041)
scores = (0.5094205536922618, 0.49979721023918033)
score = 0.5046088819657211
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (130, 124)
train = (1.6154512121689051, 1.3427244571695665)
scores = (0.44643807580148481, 0.45175419992549659)
score = 0.4490961378634907
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (99, 119)
train = (1.9100464868288578, 1.7313192039424314)
scores = (0.52415457032057744, 0.48117982031675577)
score = 0.5026671953186665
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (140, 167)
train = (1.4900675268953829, 1.2665523894404034)
scores = (0.53704759868258733, 0.47077462010561028)
score = 0.5039111093940988
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (140, 167)
train = (1.4900675268953829, 1.2665523894404034)
scores = (0.53704759868258733, 0.47077462010561028)
score = 0.5039111093940988
>>> t = 7101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 428
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,20:,20:10] 
                | Since{Max&index[10]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [1:] 
      }
    | 
        <>Return{pure&~dd} & VP[1:] 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd|Volatility)
            & [15:,20:15,15:5,20:10,20:5] 
          }
        | ( 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,20:,20:10] 
                | Since{Max&index[10]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [1:] 
      }
    | 
        <>Return{pure&~dd} & VP[1:] 
#<>#
    <>0
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.0, 2011.25, 2012.25, 2013.25, 2014.5, 2014.25, 2009.0, 2010.25, 2011.5, 2012.75, 2013.5, 2014.75, 2015.0}), frozenset({2010.75, 2011.75, 2012.5, 2009.25, 2009.75, 2013.75, 2009.5, 2010.5, 2011.0, 2012.0, 2013.0, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 1)
train = (0.70011969140018615, 0.4843479429214867)
scores = (0.20568326024304784, 0.19504549155687798)
score = 0.20036437589996292
>>> t = 7102 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 428
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,20:,20:10] 
                | Since{Max&index[10]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [1:] 
      }
    | 
        <>Return{pure&~dd} & VP[1:] 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd|Volatility)
            & [15:,20:15,15:5,20:10,20:5] 
          }
        | ( 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,20:,20:10] 
                | Since{Max&index[10]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [1:] 
      }
    | 
        <>Return{pure&~dd} & VP[1:] 
#<>#
    <>0
    | Corr{Uni} 
len(samps) = 2
(frozenset({2015.0, 2011.25, 2011.75, 2012.25, 2009.5, 2013.5, 2013.25, 2009.0, 2010.25, 2011.5, 2012.0, 2013.0, 2015.25}), frozenset({2010.5, 2010.75, 2012.75, 2009.75, 2014.5, 2014.25, 2014.0, 2009.25, 2010.0, 2011.0, 2012.5, 2013.75, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 80)
train = (0.69092749060525971, 0.95835912143168089)
scores = (0.44562076286619245, 0.30494624283969762)
score = 0.37528350285294504
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (8, 61)
train = (0.76721461308274996, 0.93933576303413868)
scores = (0.41462993622687444, 0.29203692908650397)
score = 0.3533334326566892
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 148)
train = (0.70668223050909984, 1.0720704931211094)
scores = (0.43435555183311864, 0.31545097240835135)
score = 0.374903262120735
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (2, 80)
train = (0.69092749060525971, 0.95835912143168089)
scores = (0.44562076286619245, 0.30494624283969762)
score = 0.37528350285294504
>>> t = 7200 ===================================================================================================
(pair) len(F.columns) = 33
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 59
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd)
            & [9:,12:,15:,9:6,9:3,21:15,12:3,15:6,21:12,15:3,18:6,21:9,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:] 
                | Since{Min&index[0]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | 
        Time{long}
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo|vp1dd)
            & [3:,9:,12:,15:,6:3,21:18,9:3,            15:9,21:15,12:3,18:9,21:12,15:3,18:6,21:9,21:6,21:3] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[0]} 
                | Since{Min & index[10]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.5, 2010.75, 2015.25, 2011.25, 2012.5, 2012.25, 2009.75, 2010.0, 2011.0, 2012.0, 2013.75, 2014.5, 2015.0}), frozenset({2011.75, 2009.0, 2009.25, 2013.25, 2013.5, 2014.25, 2014.0, 2009.5, 2010.25, 2011.5, 2012.75, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (19, 1)
train = (0.70055531294509044, 0.61359723598616067)
scores = (0.30388518457141217, 0.25926796437367428)
score = 0.28157657447254325
>>> t = 7201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 59
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd)
            & [9:,12:,15:,9:6,9:3,21:15,12:3,15:6,21:12,15:3,18:6,21:9,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:] 
                | Since{Min&index[0]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | 
        Time{long}
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo|vp1dd)
            & [3:,9:,12:,15:,6:3,21:18,9:3,            15:9,21:15,12:3,18:9,21:12,15:3,18:6,21:9,21:6,21:3] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[0]} 
                | Since{Min & index[10]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2011.75, 2011.0, 2009.0, 2009.25, 2013.5, 2013.25, 2014.5, 2009.75, 2011.25, 2012.5, 2013.0, 2014.25, 2015.0}), frozenset({2010.25, 2010.5, 2010.75, 2012.25, 2012.75, 2014.0, 2009.5, 2010.0, 2011.5, 2012.0, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 3)
train = (0.54778590760942725, 0.61142842618408944)
scores = (0.33564068186964924, 0.29055290190826261)
score = 0.3130967918889559
>>> t = 7300 ===================================================================================================
(pair) len(F.columns) = 39
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 48
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [5:,10:,20:15,20:10,20:5] 
          }
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP)
        & [1:] 
      }
    | 
        <>Return{pure&~dd} & VP[60:] 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc)
            & index[1, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [10:5,20:15,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:] 
                | Since{Max&index[0,5,10]} 
                | Since{Min&index[0]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2012.5, 2012.75, 2012.0, 2009.0, 2012.25, 2013.5, 2013.25, 2013.75, 2009.5, 2010.75, 2009.25, 2013.0, 2014.25}), frozenset({2010.25, 2010.5, 2015.0, 2011.25, 2011.5, 2011.75, 2014.5, 2014.0, 2009.75, 2010.0, 2011.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (12, 357)
train = (0.48188581033312544, 1.1487399661146791)
scores = (0.32057852476529097, 0.22049350876488669)
score = 0.2705360167650888
>>> t = 7301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 48
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [5:,10:,20:15,20:10,20:5] 
          }
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP)
        & [1:] 
      }
    | 
        <>Return{pure&~dd} & VP[60:] 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc)
            & index[1, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [10:5,20:15,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:] 
                | Since{Max&index[0,5,10]} 
                | Since{Min&index[0]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2011.25, 2012.75, 2012.0, 2013.75, 2013.5, 2014.75, 2009.5, 2010.5, 2011.0, 2012.25, 2013.25, 2014.5, 2015.25}), frozenset({2010.0, 2010.75, 2011.75, 2009.25, 2009.75, 2014.0, 2009.0, 2010.25, 2011.5, 2012.5, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (501, 122)
train = (1.3088193482321706, 0.71230449039683219)
scores = (0.3317182009232057, 0.34423419290202029)
score = 0.337976196912613
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (457, 304)
train = (1.4288102556281566, 0.87204282389219145)
scores = (0.36660182693200416, 0.3817270775704531)
score = 0.37416445225122863
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (39, 317)
train = (0.62995164403772541, 0.80463420345032344)
scores = (0.23529090868230113, 0.35641401338279688)
score = 0.29585246103254903
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (457, 304)
train = (1.4288102556281566, 0.87204282389219145)
scores = (0.36660182693200416, 0.3817270775704531)
score = 0.37416445225122863
>>> t = 7400 ===================================================================================================
(pair) len(F.columns) = 123
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 210
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|acc|vp1dd)
            & index[1,2,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp1dd|vp5dd|Volatility)
            & [15:,15:10,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:] 
                | Since{Max&index[0,5,10]} 
                | Since{Min&index[20]} 
              )
            & Since[ 62:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:]
            & (
                <>Drawdown[ 10:5] 
                | Since{Max & index[0]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,5:,60:] 
      }
    | 
        <>FaceValue{Volume| Close} 
        | Return{mix[3,4,13]}
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|doo|doc|vp1dd)
            & index[0,1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo)
            & [5:,20:15,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:])} 
            & (
                | Drawdown[20:10] 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,20]} 
                | Drawup[1, 5:,20:10] 
                | Since{Min & index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | 
        | Return{ it} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.5, 2012.75, 2013.0, 2014.75, 2014.5, 2014.25, 2009.25, 2010.0, 2011.5, 2012.25, 2013.5, 2014.0, 2015.0}), frozenset({2010.75, 2011.25, 2011.75, 2012.5, 2009.0, 2009.75, 2013.75, 2009.5, 2010.25, 2011.0, 2012.0, 2013.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 92)
train = (0.68094245284688004, 0.94572601930071654)
scores = (0.26413508911177735, 0.39453456660828351)
score = 0.32933482786003043
>>> t = 7401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 210
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|acc|vp1dd)
            & index[1,2,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp1dd|vp5dd|Volatility)
            & [15:,15:10,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:] 
                | Since{Max&index[0,5,10]} 
                | Since{Min&index[20]} 
              )
            & Since[ 62:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:]
            & (
                <>Drawdown[ 10:5] 
                | Since{Max & index[0]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,5:,60:] 
      }
    | 
        <>FaceValue{Volume| Close} 
        | Return{mix[3,4,13]}
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|doo|doc|vp1dd)
            & index[0,1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo)
            & [5:,20:15,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:])} 
            & (
                | Drawdown[20:10] 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,20]} 
                | Drawup[1, 5:,20:10] 
                | Since{Min & index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | 
        | Return{ it} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.0, 2010.5, 2011.75, 2012.5, 2009.75, 2014.75, 2009.25, 2010.75, 2011.25, 2009.0, 2013.5, 2014.0, 2015.0}), frozenset({2011.5, 2012.25, 2012.75, 2013.25, 2013.75, 2014.25, 2009.5, 2010.25, 2011.0, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (220, 94)
train = (1.1661127573053711, 1.1969627286934794)
scores = (0.38711544255062191, 0.43467932697767142)
score = 0.41089738476414667
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (473, 44)
train = (1.4787460718616277, 1.1142112840625149)
scores = (0.41137824307551152, 0.47860396347710527)
score = 0.4449911032763084
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (354, 78)
train = (1.2709781603269608, 1.1354146314443441)
scores = (0.39766789625231624, 0.47505982965525806)
score = 0.43636386295378715
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (473, 44)
train = (1.4787460718616277, 1.1142112840625149)
scores = (0.41137824307551152, 0.47860396347710527)
score = 0.4449911032763084
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (235, 120)
train = (1.3326530545264721, 1.4165153124057239)
scores = (0.39116866772120373, 0.44221061820272906)
score = 0.4166896429619664
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (394, 209)
train = (1.6650573298489801, 1.7843705730844384)
scores = (0.43353355507556657, 0.52051492222324824)
score = 0.4770242386494074
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (370, 67)
train = (1.4119529537515871, 1.1896065415794432)
scores = (0.402973490423504, 0.47103504095986337)
score = 0.4370042656916837
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (394, 209)
train = (1.6650573298489801, 1.7843705730844384)
scores = (0.43353355507556657, 0.52051492222324824)
score = 0.4770242386494074
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (218, 94)
train = (1.4201895888920419, 1.4302946542563342)
scores = (0.40297404467419329, 0.44483075826131624)
score = 0.42390240146775476
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 109)
train = (0.80534914772836486, 1.7793011584893712)
scores = (0.34644891324963278, 0.50776157044571502)
score = 0.4271052418476739
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (454, 73)
train = (1.5141328277173218, 1.2628991933297726)
scores = (0.41599012310041916, 0.47849165977197433)
score = 0.4472408914361967
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (454, 73)
train = (1.5141328277173218, 1.2628991933297726)
scores = (0.41599012310041916, 0.47849165977197433)
score = 0.4472408914361967
>>> t = 7500 ===================================================================================================
(pair) len(F.columns) = 89
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 164
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [10:,15:,15:10,20:15] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,20:, 10:5] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | 
        | Return{mix[5,8,11,13,14,15]}
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.5, 2015.25, 2012.5, 2012.0, 2009.0, 2014.0, 2009.75, 2010.25, 2011.75, 2012.25, 2013.75, 2014.5, 2015.0}), frozenset({2010.75, 2011.25, 2011.5, 2009.25, 2013.25, 2013.5, 2014.25, 2009.5, 2010.0, 2011.0, 2012.75, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (154, 11)
train = (0.95912848717197619, 0.58367644490961623)
scores = (0.38508301881182327, 0.31363183504903086)
score = 0.34935742693042704
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (103, 10)
train = (0.92632560766855354, 0.5942106788853736)
scores = (0.38245968295376687, 0.3165414773318872)
score = 0.34950058014282703
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (102, 1)
train = (0.89537081586976852, 0.59167499114291522)
scores = (0.41541397388012918, 0.32942664009903172)
score = 0.37242030698958045
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (102, 1)
train = (0.89537081586976852, 0.59167499114291522)
scores = (0.41541397388012918, 0.32942664009903172)
score = 0.37242030698958045
>>> t = 7501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 164
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [10:,15:,15:10,20:15] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,20:, 10:5] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | 
        | Return{mix[5,8,11,13,14,15]}
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2012.25, 2012.0, 2009.75, 2009.5, 2013.0, 2013.5, 2014.75, 2009.25, 2010.0, 2011.75, 2012.5, 2013.25, 2014.5}), frozenset({2010.25, 2010.75, 2015.0, 2011.25, 2011.5, 2014.0, 2009.0, 2010.5, 2011.0, 2012.75, 2013.75, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (106, 213)
train = (0.99247928247984396, 0.9767478342903575)
scores = (0.406604477633353, 0.34668863792267385)
score = 0.3766465577780134
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (375, 118)
train = (1.3674158854639256, 0.87425499887041036)
scores = (0.38976809931869766, 0.32058959738891313)
score = 0.3551788483538054
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (75, 199)
train = (0.83521215752615852, 0.99208165230516865)
scores = (0.41640625944262782, 0.37305054817661693)
score = 0.3947284038096224
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (75, 199)
train = (0.83521215752615852, 0.99208165230516865)
scores = (0.41640625944262782, 0.37305054817661693)
score = 0.3947284038096224
>>> t = 7600 ===================================================================================================
(pair) len(F.columns) = 19
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 48
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|vp1dd)
            & index[2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|Volatility)
            & [9:,12:,9:6,15:12,9:3,            15:9,18:12,21:15,12:3,18:6,21:9] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[0,5]} 
                | Drawup[10:, 10:5] 
                | Since{Min & index[5]} 
              )
            & Since[21:, 62:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2011.5, 2012.5, 2009.25, 2009.0, 2009.75, 2014.5, 2014.0, 2009.5, 2010.5, 2011.75, 2012.0, 2014.25, 2015.0}), frozenset({2010.25, 2010.75, 2011.25, 2012.75, 2013.25, 2013.5, 2013.75, 2010.0, 2011.0, 2012.25, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (161, 236)
train = (0.92396179799255662, 1.0799528677946002)
scores = (0.35191522173262407, 0.19784796005663949)
score = 0.27488159089463177
>>> t = 7601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 48
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|vp1dd)
            & index[2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|Volatility)
            & [9:,12:,9:6,15:12,9:3,            15:9,18:12,21:15,12:3,18:6,21:9] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[0,5]} 
                | Drawup[10:, 10:5] 
                | Since{Min & index[5]} 
              )
            & Since[21:, 62:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2015.25, 2011.25, 2011.0, 2013.5, 2014.25, 2009.75, 2010.0, 2011.75, 2009.0, 2013.0, 2014.0, 2015.0}), frozenset({2010.5, 2012.25, 2012.5, 2012.75, 2009.25, 2013.75, 2014.5, 2009.5, 2010.25, 2011.5, 2012.0, 2013.25, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (77, 208)
train = (0.90311473706015688, 0.93567037390848851)
scores = (0.31584763638831653, 0.31123050999039586)
score = 0.3135390731893562
>>> t = 7700 ===================================================================================================
(pair) len(F.columns) = 11
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 39
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|aoo|doo|vp1dd)
            & index[1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd|Volatility)
            & [3:,15:,18:,9:6,12:9,15:12,18:15,            15:9,18:12,21:15,12:3,15:6,15:3,18:6,18:3,21:3] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|aoo|doo|vp1dd)
            & index[1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd|Volatility)
            & [3:,15:,18:,9:6,12:9,15:12,18:15,            15:9,18:12,21:15,12:3,15:6,15:3,18:6,18:3,21:3] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2012.5, 2012.0, 2009.25, 2013.75, 2013.25, 2013.5, 2009.0, 2010.5, 2011.0, 2009.5, 2013.0, 2014.0, 2015.25}), frozenset({2010.0, 2010.75, 2011.5, 2011.75, 2012.75, 2014.5, 2014.25, 2009.75, 2010.25, 2011.25, 2012.25, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 427)
train = (0.43438716056176035, 0.94939138724311967)
scores = (0.39475526073678163, 0.27556043544148362)
score = 0.3351578480891326
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 1)
train = (0.4455434698501004, 0.50598196361880321)
scores = (0.40795717745122345, 0.23250642344661887)
score = 0.3202318004489212
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (7, 864)
train = (0.43205296312308261, 0.95471127475759288)
scores = (0.40151495475436899, 0.27741766722123595)
score = 0.33946631098780244
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (7, 864)
train = (0.43205296312308261, 0.95471127475759288)
scores = (0.40151495475436899, 0.27741766722123595)
score = 0.33946631098780244
>>> t = 7701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 39
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|aoo|doo|vp1dd)
            & index[1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd|Volatility)
            & [3:,15:,18:,9:6,12:9,15:12,18:15,            15:9,18:12,21:15,12:3,15:6,15:3,18:6,18:3,21:3] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|aoo|doo|vp1dd)
            & index[1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd|Volatility)
            & [3:,15:,18:,9:6,12:9,15:12,18:15,            15:9,18:12,21:15,12:3,15:6,15:3,18:6,18:3,21:3] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.5, 2012.25, 2012.75, 2013.75, 2013.0, 2009.0, 2010.0, 2011.75, 2012.0, 2013.5, 2014.75, 2015.25}), frozenset({2010.75, 2011.25, 2009.25, 2009.75, 2014.25, 2014.0, 2009.5, 2010.5, 2011.0, 2012.5, 2013.25, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (623, 1)
train = (0.96041590864284643, 0.43418099173644126)
scores = (0.28234238958502922, 0.35751457388434787)
score = 0.3199284817346886
>>> t = 7800 ===================================================================================================
(pair) len(F.columns) = 39
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 40
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|dcc|daoc)
            & index[1,2, 0:1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [9:,12:,15:,6:3,9:6,15:12,18:15,9:3,12:6,21:15,12:3,15:6,18:9,15:3,18:6,18:3,21:3] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Max & index[0,20]} 
                | Drawup[ 10:5] 
                | Since{Min & index[10,20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[20:10] 
                | Drawup[20:10] 
                | Since{Min & index[0,5]} 
              )
            & Since[ 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[1]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.5, 2010.75, 2011.5, 2011.0, 2011.25, 2012.5, 2013.75, 2014.75, 2010.25, 2011.75, 2012.25, 2013.0, 2014.25}), frozenset({2015.0, 2012.75, 2009.0, 2009.25, 2013.5, 2009.75, 2014.0, 2009.5, 2010.0, 2012.0, 2013.25, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (20, 51)
train = (0.63128710168605717, 0.62904388889093454)
scores = (0.18590556959799176, 0.22751286588236147)
score = 0.20670921774017662
>>> t = 7801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 40
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|dcc|daoc)
            & index[1,2, 0:1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [9:,12:,15:,6:3,9:6,15:12,18:15,9:3,12:6,21:15,12:3,15:6,18:9,15:3,18:6,18:3,21:3] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Max & index[0,20]} 
                | Drawup[ 10:5] 
                | Since{Min & index[10,20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[20:10] 
                | Drawup[20:10] 
                | Since{Min & index[0,5]} 
              )
            & Since[ 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[1]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.25, 2011.75, 2012.5, 2009.75, 2013.0, 2014.0, 2009.0, 2010.5, 2011.5, 2012.25, 2013.25, 2014.5, 2015.0}), frozenset({2010.75, 2011.25, 2012.75, 2009.25, 2013.75, 2014.25, 2009.5, 2010.0, 2011.0, 2012.0, 2013.5, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 2)
train = (0.48616318019608556, 0.54406672682104029)
scores = (0.26526005530644109, 0.28095875716049751)
score = 0.2731094062334693
>>> t = 7900 ===================================================================================================
(pair) len(F.columns) = 62
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 89
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|dcc|vp1dd)
            & index[0,1,2,0:2] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|vp1dd)
            & index[0,1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|Volatility)
            & [5:,10:,15:10,20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[ 5:, 10:5] 
                | Since{Max&index[0]} 
                | Since{Min&index[0,10,20]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | FracRec[250:] 
#<>#
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:])} 
            & (
                | Drawdown[ 10:5,20:10] 
                | Drawup[20:10] 
                | Since{Min&index[0,5]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return)
        & [1:] 
      }
    | 
        Time{long}
#<>#
    <>0
    | Corr & Corr{ 
        <>[62]
        & ay[10]
      }
len(samps) = 2
(frozenset({2011.5, 2012.5, 2012.25, 2009.0, 2009.75, 2013.5, 2014.0, 2009.25, 2011.25, 2012.0, 2013.75, 2014.5, 2015.25}), frozenset({2010.25, 2010.5, 2010.75, 2011.75, 2013.25, 2014.25, 2009.5, 2010.0, 2011.0, 2012.75, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (408, 308)
train = (1.0083444833715167, 1.019900991031593)
scores = (0.42512366233945875, 0.39019457465099117)
score = 0.40765911849522496
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (304, 206)
train = (0.96423762660323242, 1.0783865841918359)
scores = (0.42366347570692414, 0.38675777236347292)
score = 0.40521062403519853
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (202, 375)
train = (0.80900501318228724, 0.92761347800612148)
scores = (0.43116305562057805, 0.40734055107263784)
score = 0.41925180334660794
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (202, 375)
train = (0.80900501318228724, 0.92761347800612148)
scores = (0.43116305562057805, 0.40734055107263784)
score = 0.41925180334660794
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (244, 231)
train = (1.0459149419479405, 1.0819341785268985)
scores = (0.43078039106354593, 0.39725340747653881)
score = 0.41401689927004237
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (162, 127)
train = (1.0205166726731631, 1.1514121598298614)
scores = (0.42109139131769002, 0.38223586143940047)
score = 0.40166362637854525
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (492, 275)
train = (1.0986296502188353, 0.9463959757940249)
scores = (0.44680028591947912, 0.40842269141891574)
score = 0.4276114886691974
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (492, 275)
train = (1.0986296502188353, 0.9463959757940249)
scores = (0.44680028591947912, 0.40842269141891574)
score = 0.4276114886691974
>>> t = 7901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 89
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|dcc|vp1dd)
            & index[0,1,2,0:2] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|vp1dd)
            & index[0,1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|Volatility)
            & [5:,10:,15:10,20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[ 5:, 10:5] 
                | Since{Max&index[0]} 
                | Since{Min&index[0,10,20]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | FracRec[250:] 
#<>#
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:])} 
            & (
                | Drawdown[ 10:5,20:10] 
                | Drawup[20:10] 
                | Since{Min&index[0,5]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return)
        & [1:] 
      }
    | 
        Time{long}
#<>#
    <>0
    | Corr & Corr{ 
        <>[62]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.25, 2015.25, 2011.75, 2011.5, 2012.0, 2014.75, 2009.75, 2010.5, 2011.25, 2012.75, 2013.5, 2014.0, 2015.0}), frozenset({2010.75, 2012.5, 2009.0, 2009.25, 2013.25, 2013.75, 2014.25, 2009.5, 2010.0, 2011.0, 2012.25, 2013.0, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (322, 312)
train = (1.1000551507303502, 0.91344869313202426)
scores = (0.30698279934437978, 0.43912475829705439)
score = 0.3730537788207171
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (143, 237)
train = (1.1419223052635854, 0.8518488808770881)
scores = (0.26858276773130035, 0.4310632792616883)
score = 0.3498230234964943
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (421, 211)
train = (1.0355030055973102, 0.80244700633495369)
scores = (0.30599183508737621, 0.4458958724937272)
score = 0.37594385379055173
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (421, 211)
train = (1.0355030055973102, 0.80244700633495369)
scores = (0.30599183508737621, 0.4458958724937272)
score = 0.37594385379055173
>>> t = 8000 ===================================================================================================
(pair) len(F.columns) = 34
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 58
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|dcc|doc|vp1dd)
            & index[1,2,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [3:,12:,15:,9:6,18:15,21:18,12:6,18:12,21:15,18:9,15:3,18:6,18:3,21:6] 
          }
      )
    | Market{.& 
        <>( Weight)
        & (Return| Volatility)
        & [5:,10:,20:] 
      }
#<>#
    <>~Market & (
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[5,10]} 
                | Drawup[ 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 125:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.75, 2015.25, 2011.0, 2013.25, 2013.5, 2013.75, 2014.25, 2009.25, 2010.5, 2011.75, 2013.0, 2014.5, 2015.0}), frozenset({2010.25, 2011.5, 2012.25, 2012.5, 2012.75, 2009.0, 2009.75, 2014.0, 2009.5, 2010.0, 2011.25, 2012.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (108, 87)
train = (0.82485430465428633, 0.7989969160922713)
scores = (0.44059049526335403, 0.43753789219460987)
score = 0.439064193728982
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (60, 100)
train = (0.74514988722479181, 0.79887703264355203)
scores = (0.38912141269346157, 0.42237031127663238)
score = 0.405745861985047
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (245, 145)
train = (0.85854340980535837, 0.81877318999125837)
scores = (0.46849406303555707, 0.43775166375261587)
score = 0.4531228633940865
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (245, 145)
train = (0.85854340980535837, 0.81877318999125837)
scores = (0.46849406303555707, 0.43775166375261587)
score = 0.4531228633940865
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (77, 88)
train = (0.89401556442492114, 0.86890073090934783)
scores = (0.45977716997776474, 0.44336441877014116)
score = 0.451570794373953
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (68, 55)
train = (0.98899621413099659, 0.84477737798052144)
scores = (0.39554858704042795, 0.41985342724745606)
score = 0.407701007143942
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (182, 110)
train = (0.93413779047993006, 0.84434334606643291)
scores = (0.48911957708667264, 0.45020289677781827)
score = 0.4696612369322455
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (182, 110)
train = (0.93413779047993006, 0.84434334606643291)
scores = (0.48911957708667264, 0.45020289677781827)
score = 0.4696612369322455
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (85, 52)
train = (1.0097115778847072, 0.8675037860159952)
scores = (0.46591692859541073, 0.45453275500325557)
score = 0.46022484179933315
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (149, 45)
train = (1.3808843781985094, 0.91246362293114536)
scores = (0.40039280967284296, 0.42186076658703914)
score = 0.4111267881299411
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (201, 172)
train = (1.0172441373417853, 0.93077169948862826)
scores = (0.48856719541775018, 0.45302467800566626)
score = 0.4707959367117082
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (201, 172)
train = (1.0172441373417853, 0.93077169948862826)
scores = (0.48856719541775018, 0.45302467800566626)
score = 0.4707959367117082
>>> t = 8001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 58
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|dcc|doc|vp1dd)
            & index[1,2,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [3:,12:,15:,9:6,18:15,21:18,12:6,18:12,21:15,18:9,15:3,18:6,18:3,21:6] 
          }
      )
    | Market{.& 
        <>( Weight)
        & (Return| Volatility)
        & [5:,10:,20:] 
      }
#<>#
    <>~Market & (
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[5,10]} 
                | Drawup[ 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 125:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.75, 2011.75, 2012.25, 2012.0, 2012.75, 2013.5, 2014.25, 2009.75, 2010.5, 2011.5, 2012.5, 2013.25, 2014.75}), frozenset({2010.25, 2015.0, 2011.25, 2009.25, 2013.75, 2014.0, 2009.5, 2010.0, 2011.0, 2009.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (109, 4)
train = (0.85500543329330503, 0.63127256051141334)
scores = (0.40235613228994704, 0.40638824201030455)
score = 0.4043721871501258
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (77, 4)
train = (0.9118140612612764, 0.66233990359876627)
scores = (0.34514423038998154, 0.38946953286106417)
score = 0.36730688162552283
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (73, 44)
train = (0.72806059648848143, 0.7246049930244729)
scores = (0.35379711141254927, 0.416602965529354)
score = 0.38520003847095163
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (109, 4)
train = (0.85500543329330503, 0.63127256051141334)
scores = (0.40235613228994704, 0.40638824201030455)
score = 0.4043721871501258
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (90, 31)
train = (0.92734384616436905, 0.81232299194022495)
scores = (0.40394417995224224, 0.39648624167130514)
score = 0.4002152108117737
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (44, 66)
train = (0.97391482387576234, 0.89000380083752351)
scores = (0.35602594645050473, 0.39765181935488508)
score = 0.3768388829026949
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (75, 19)
train = (0.81187058274341617, 0.72500208547645084)
scores = (0.37122880334030467, 0.41625893938971437)
score = 0.39374387136500955
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (90, 31)
train = (0.92734384616436905, 0.81232299194022495)
scores = (0.40394417995224224, 0.39648624167130514)
score = 0.4002152108117737
>>> t = 8002 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 58
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|dcc|doc|vp1dd)
            & index[1,2,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [3:,12:,15:,9:6,18:15,21:18,12:6,18:12,21:15,18:9,15:3,18:6,18:3,21:6] 
          }
      )
    | Market{.& 
        <>( Weight)
        & (Return| Volatility)
        & [5:,10:,20:] 
      }
#<>#
    <>~Market & (
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[5,10]} 
                | Drawup[ 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 125:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.5, 2010.25, 2012.75, 2013.25, 2013.5, 2014.0, 2009.75, 2010.0, 2011.25, 2012.0, 2013.75, 2014.25, 2015.0}), frozenset({2011.5, 2011.75, 2012.5, 2009.0, 2009.25, 2014.5, 2009.5, 2010.75, 2011.0, 2012.25, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (180, 165)
train = (0.99259524766472362, 0.75042751401498331)
scores = (0.43406326115249788, 0.37522021462331945)
score = 0.4046417378879087
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (53, 105)
train = (0.89765608554156329, 0.73351793234004947)
scores = (0.434840617156319, 0.38400237847669771)
score = 0.4094214978165084
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (122, 10)
train = (0.82771580760433505, 0.54730152403228649)
scores = (0.43271995339392672, 0.3764643477707908)
score = 0.40459215058235876
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (53, 105)
train = (0.89765608554156329, 0.73351793234004947)
scores = (0.434840617156319, 0.38400237847669771)
score = 0.4094214978165084
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (87, 12)
train = (0.96529295019564787, 0.62757922546000167)
scores = (0.4414611974205388, 0.37722894249203398)
score = 0.4093450699562864
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (60, 127)
train = (1.0592689480611699, 0.92266633025070821)
scores = (0.43053680294020352, 0.37878151709426638)
score = 0.40465916001723495
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (63, 4)
train = (0.78286023583751707, 0.57687122720018391)
scores = (0.43811841165801285, 0.38037763817426096)
score = 0.4092480249161369
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (87, 12)
train = (0.96529295019564787, 0.62757922546000167)
scores = (0.4414611974205388, 0.37722894249203398)
score = 0.4093450699562864
>>> t = 8100 ===================================================================================================
(pair) len(F.columns) = 34
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 47
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc)
            & index[0,1,2, 0:1,0:2] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:,20:10] 
                | Since{Min&index[0]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|acc|doo|dcc|daoc|vp1dd)
            & index[0,1,2, 0:1,0:2] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62]
        & ay[1,10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.0, 2010.25, 2011.25, 2011.5, 2009.5, 2009.25, 2009.75, 2010.75, 2011.75, 2012.25, 2013.25, 2014.25, 2015.0}), frozenset({2012.5, 2012.75, 2013.5, 2013.75, 2014.5, 2014.0, 2009.0, 2010.5, 2011.0, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (23, 9)
train = (0.86967022171235708, 0.69596644086076676)
scores = (0.22298247196775126, 0.25264822298378109)
score = 0.23781534747576616
>>> t = 8101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 47
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc)
            & index[0,1,2, 0:1,0:2] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:,20:10] 
                | Since{Min&index[0]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|acc|doo|dcc|daoc|vp1dd)
            & index[0,1,2, 0:1,0:2] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62]
        & ay[1,10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.0, 2010.75, 2010.5, 2011.0, 2012.75, 2012.25, 2009.5, 2009.25, 2010.25, 2011.5, 2012.5, 2014.75, 2015.0}), frozenset({2011.75, 2009.75, 2013.25, 2013.5, 2013.75, 2014.25, 2014.0, 2009.0, 2011.25, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (51, 190)
train = (0.91959728794566042, 1.2294324851879519)
scores = (0.28381639778639772, 0.26103899420207965)
score = 0.27242769599423866
>>> t = 8200 ===================================================================================================
(pair) len(F.columns) = 22
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 29
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [12:,15:,18:,9:6,15:12,9:3,12:6,18:12,15:3,18:6,21:9] 
          }
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [10:,20:,60:] 
      }
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|dcc|daoc|vp1dd)
            & index[0:2] 
          }
        | ( 
            | Volatility[10:]
            & (
                | Since{Max & index[5,10]} 
                | Since{Min & index[0,5,10]} 
              )
            & Since[ 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.75, 2015.25, 2011.25, 2011.0, 2012.75, 2014.75, 2014.0, 2010.0, 2011.5, 2012.0, 2013.0, 2014.5, 2015.0}), frozenset({2010.5, 2012.5, 2009.0, 2009.25, 2013.5, 2013.75, 2009.75, 2009.5, 2010.25, 2011.75, 2012.25, 2013.25, 2014.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (29, 26)
train = (0.64831411975326136, 0.59366708933755519)
scores = (0.28503565484255156, 0.36253196044474856)
score = 0.32378380764365006
>>> t = 8201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 29
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [12:,15:,18:,9:6,15:12,9:3,12:6,18:12,15:3,18:6,21:9] 
          }
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [10:,20:,60:] 
      }
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|dcc|daoc|vp1dd)
            & index[0:2] 
          }
        | ( 
            | Volatility[10:]
            & (
                | Since{Max & index[5,10]} 
                | Since{Min & index[0,5,10]} 
              )
            & Since[ 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.75, 2011.25, 2012.75, 2009.5, 2013.5, 2014.25, 2009.25, 2010.0, 2011.0, 2012.0, 2013.75, 2014.5, 2015.25}), frozenset({2010.25, 2011.75, 2012.5, 2009.75, 2013.25, 2014.0, 2009.0, 2010.5, 2011.5, 2012.25, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 91)
train = (0.70489380334944496, 0.68027120869024016)
scores = (0.24079238242100892, 0.3242362907004494)
score = 0.28251433656072916
>>> t = 8300 ===================================================================================================
(pair) len(F.columns) = 64
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 191
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|vp1dd)
            & index[0,1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|Volatility)
            & [10:,15:,10:5,15:10,20:10] 
          }
        | ( 
            <>Return{dd} & VP[1:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,5]} 
                | Drawup[ 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[ 62:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[ 5:, 10:5] 
                | Since{Max & index[0,10]} 
                | Drawup[ 5:] 
              )
            & Since[ 125:, 250:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
    | 
        <>FaceValue{Volume| Open| Close} 
        | Return{mix[1,2,4,5,7,8,11,12,13,15,17,18,19]}
        | Return{ it} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|vp1dd)
            & index[0,1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|Volatility)
            & [10:,15:,10:5,15:10,20:10] 
          }
        | ( 
            <>Return{dd} & VP[1:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,5]} 
                | Drawup[ 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[ 62:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[ 5:, 10:5] 
                | Since{Max & index[0,10]} 
                | Drawup[ 5:] 
              )
            & Since[ 125:, 250:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
    | 
        <>FaceValue{Volume| Open| Close} 
        | Return{mix[1,2,4,5,7,8,11,12,13,15,17,18,19]}
        | Return{ it} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2011.5, 2012.5, 2012.75, 2009.75, 2013.25, 2014.75, 2014.5, 2009.5, 2011.75, 2009.0, 2013.75, 2014.25, 2015.25}), frozenset({2010.0, 2010.5, 2010.75, 2011.25, 2012.25, 2013.5, 2009.25, 2010.25, 2011.0, 2012.0, 2013.0, 2014.0, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (125, 51)
train = (0.94649685262868677, 0.95053690381388656)
scores = (0.31110291917596156, 0.3989292658668408)
score = 0.3550160925214012
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (200, 35)
train = (1.1139607742787931, 0.87106130293993744)
scores = (0.33133266098913255, 0.3349518293130635)
score = 0.333142245151098
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (148, 58)
train = (0.92035519716725633, 0.95087282962732167)
scores = (0.31399053398768506, 0.44684636439201042)
score = 0.38041844918984774
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (148, 58)
train = (0.92035519716725633, 0.95087282962732167)
scores = (0.31399053398768506, 0.44684636439201042)
score = 0.38041844918984774
>>> t = 8301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 191
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|vp1dd)
            & index[0,1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|Volatility)
            & [10:,15:,10:5,15:10,20:10] 
          }
        | ( 
            <>Return{dd} & VP[1:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,5]} 
                | Drawup[ 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[ 62:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[ 5:, 10:5] 
                | Since{Max & index[0,10]} 
                | Drawup[ 5:] 
              )
            & Since[ 125:, 250:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
    | 
        <>FaceValue{Volume| Open| Close} 
        | Return{mix[1,2,4,5,7,8,11,12,13,15,17,18,19]}
        | Return{ it} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|vp1dd)
            & index[0,1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|Volatility)
            & [10:,15:,10:5,15:10,20:10] 
          }
        | ( 
            <>Return{dd} & VP[1:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,5]} 
                | Drawup[ 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[ 62:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[ 5:, 10:5] 
                | Since{Max & index[0,10]} 
                | Drawup[ 5:] 
              )
            & Since[ 125:, 250:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
    | 
        <>FaceValue{Volume| Open| Close} 
        | Return{mix[1,2,4,5,7,8,11,12,13,15,17,18,19]}
        | Return{ it} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2011.0, 2011.5, 2011.75, 2012.75, 2012.0, 2013.5, 2009.75, 2010.25, 2011.25, 2009.25, 2013.75, 2014.75, 2015.25}), frozenset({2010.5, 2010.75, 2012.5, 2009.0, 2013.25, 2014.25, 2014.0, 2009.5, 2010.0, 2012.25, 2013.0, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (128, 223)
train = (1.1232308586780524, 0.9846355973739489)
scores = (0.28607729488993616, 0.39191538548079258)
score = 0.3389963401853644
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (174, 248)
train = (1.3263855420986297, 1.098301491936559)
scores = (0.28973022690755751, 0.4084118228875086)
score = 0.34907102489753306
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (175, 130)
train = (1.1309324485108792, 0.866099580247226)
scores = (0.30464269525996257, 0.37483660682630088)
score = 0.33973965104313175
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (174, 248)
train = (1.3263855420986297, 1.098301491936559)
scores = (0.28973022690755751, 0.4084118228875086)
score = 0.34907102489753306
>>> t = 8400 ===================================================================================================
(pair) len(F.columns) = 67
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 136
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo)
            & [15:,10:5,15:10,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[ 5:,10:, 10:5] 
                | Since{Max&index[20]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,125:,250:] 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.25, 2011.75, 2012.75, 2012.25, 2009.0, 2009.5, 2010.5, 2011.5, 2012.5, 2013.5, 2014.5, 2015.0}), frozenset({2010.75, 2009.75, 2013.25, 2013.75, 2014.25, 2014.0, 2009.25, 2010.0, 2011.0, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (87, 1)
train = (1.0288643317570811, 0.50562726185185158)
scores = (0.27954963291805007, 0.36503367972578277)
score = 0.3222916563219164
>>> t = 8401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 136
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo)
            & [15:,10:5,15:10,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[ 5:,10:, 10:5] 
                | Since{Max&index[20]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,125:,250:] 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.5, 2012.75, 2012.0, 2009.25, 2014.0, 2014.5, 2009.5, 2010.0, 2011.25, 2012.5, 2013.75, 2014.25}), frozenset({2010.75, 2015.0, 2011.75, 2009.75, 2013.25, 2013.5, 2009.0, 2010.5, 2011.0, 2012.25, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (11, 40)
train = (0.56451599360622184, 0.74121523240610798)
scores = (0.26270636715842055, 0.33122451365381816)
score = 0.2969654404061194
>>> t = 8500 ===================================================================================================
(pair) len(F.columns) = 118
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 222
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|daoc|vp1dd)
            & index[0,1, 0:1,0:2] 
          }
        | ( 
            <> Volatility[20:, 60:] 
            | Volatility[ 20:]
            & (
                | Since{Min & index[5]} 
              )
            & Since[ 62:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & ( Volatility)
        & [1:,20:] 
      }
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[62:] 
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:]|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:] 
                | Since{Min&index[10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.5, 2010.25, 2012.0, 2012.5, 2012.75, 2013.75, 2014.0, 2009.5, 2010.75, 2011.25, 2012.25, 2013.5, 2014.5}), frozenset({2015.0, 2011.5, 2011.75, 2009.75, 2013.25, 2014.25, 2009.0, 2010.0, 2011.0, 2009.25, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 263)
train = (0.89042073803608246, 1.0996574998538629)
scores = (0.32481038521370892, 0.43111147974736075)
score = 0.37796093248053486
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (121, 307)
train = (1.504129919771938, 1.2725786970869708)
scores = (0.33554548406401746, 0.43480474603205999)
score = 0.3851751150480387
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 327)
train = (0.72713815978359175, 1.1200419992042525)
scores = (0.353952174974, 0.49695055740562966)
score = 0.42545136618981483
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (1, 327)
train = (0.72713815978359175, 1.1200419992042525)
scores = (0.353952174974, 0.49695055740562966)
score = 0.42545136618981483
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (168, 296)
train = (1.5756671223432204, 1.3181658178078821)
scores = (0.35872544329534245, 0.47709049089581457)
score = 0.41790796709557854
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (185, 202)
train = (1.8225500901668665, 1.3889742160663794)
scores = (0.35010776993223408, 0.44837261524924288)
score = 0.3992401925907385
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 290)
train = (0.80463421189707562, 1.2004529659934298)
scores = (0.34746292836637693, 0.47194534369192526)
score = 0.4097041360291511
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (168, 296)
train = (1.5756671223432204, 1.3181658178078821)
scores = (0.35872544329534245, 0.47709049089581457)
score = 0.41790796709557854
>>> t = 8501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 222
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|daoc|vp1dd)
            & index[0,1, 0:1,0:2] 
          }
        | ( 
            <> Volatility[20:, 60:] 
            | Volatility[ 20:]
            & (
                | Since{Min & index[5]} 
              )
            & Since[ 62:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & ( Volatility)
        & [1:,20:] 
      }
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[62:] 
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:]|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:] 
                | Since{Min&index[10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2010.0, 2010.5, 2015.25, 2012.0, 2013.25, 2014.0, 2010.25, 2011.75, 2012.25, 2013.0, 2014.25, 2015.0}), frozenset({2011.0, 2011.5, 2012.75, 2009.0, 2009.25, 2013.75, 2009.75, 2014.5, 2009.5, 2011.25, 2012.5, 2013.5, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (68, 2)
train = (1.2316404882222174, 0.72701568065930988)
scores = (0.40777766658335435, 0.24465318551547016)
score = 0.3262154260494122
>>> t = 8600 ===================================================================================================
(pair) len(F.columns) = 36
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 76
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doc|daoc)
            & index[0,1, 0:1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|vp5dd)
            & [10:,15:,10:5,15:10,20:10] 
          }
        | ( 
            <>Return{(doo[1:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:,20:10] 
                | Since{Max&index[20]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP)
        & [1:,10:,20:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2012.0, 2012.5, 2012.75, 2009.5, 2013.75, 2013.25, 2014.25, 2009.0, 2010.75, 2011.75, 2012.25, 2013.0, 2014.5}), frozenset({2010.0, 2010.5, 2015.0, 2011.25, 2011.5, 2014.0, 2009.25, 2010.25, 2011.0, 2009.75, 2013.5, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (20, 1)
train = (0.76998830639066274, 0.25868420139384557)
scores = (0.010928401326432162, 0.16390067826270965)
score = 0.08741453979457091
>>> t = 8601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 76
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doc|daoc)
            & index[0,1, 0:1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|vp5dd)
            & [10:,15:,10:5,15:10,20:10] 
          }
        | ( 
            <>Return{(doo[1:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:,20:10] 
                | Since{Max&index[20]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP)
        & [1:,10:,20:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.0, 2012.0, 2012.25, 2009.25, 2009.0, 2014.75, 2009.5, 2010.25, 2011.0, 2012.75, 2013.0, 2014.5, 2015.25}), frozenset({2010.5, 2011.25, 2011.75, 2013.5, 2013.75, 2014.0, 2009.75, 2010.75, 2011.5, 2012.5, 2013.25, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (216, 86)
train = (0.83597271033094123, 1.2792564675076799)
scores = (0.1580676440594902, 0.076862102031849316)
score = 0.11746487304566976
>>> t = 8700 ===================================================================================================
(pair) len(F.columns) = 34
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 37
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|vp1dd)
            & index[0,1,2,0:2] 
          }
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP)
        & [1:] 
      }
#<>#
    <>~Market & (
        | ( 
            <>Return{(doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                | Since{Max & index[0,5]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.5, 2011.75, 2011.5, 2009.75, 2013.5, 2013.75, 2009.25, 2015.25, 2011.25, 2012.0, 2013.25, 2014.0, 2015.0}), frozenset({2010.25, 2010.75, 2012.5, 2012.75, 2009.0, 2014.25, 2014.75, 2009.5, 2010.0, 2011.0, 2012.25, 2013.0, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 1)
train = (0.49992652127297554, 0.41114283326491124)
scores = (0.23458158150757605, 0.24958418440902547)
score = 0.24208288295830077
>>> t = 8701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 37
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|vp1dd)
            & index[0,1,2,0:2] 
          }
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP)
        & [1:] 
      }
#<>#
    <>~Market & (
        | ( 
            <>Return{(doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                | Since{Max & index[0,5]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2011.25, 2011.0, 2011.5, 2012.25, 2012.0, 2009.25, 2009.75, 2013.0, 2009.5, 2010.25, 2011.75, 2012.75, 2013.75}), frozenset({2010.5, 2010.75, 2015.0, 2013.5, 2014.5, 2014.25, 2014.0, 2009.0, 2010.0, 2012.5, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (25, 1)
train = (0.56463842561693689, 0.44747009230928808)
scores = (0.22604962548935587, 0.25297097553845871)
score = 0.2395103005139073
>>> t = 8800 ===================================================================================================
(pair) len(F.columns) = 91
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 166
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|daoc|vp1dd)
            & index[0,1,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(doo|vp5dd|Volatility)
            & [5:,10:,10:5,15:10,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]}|aoo[10:])} 
            & (
                | Drawdown[ 5:, 10:5] 
                | Since{Max&index[0]} 
                | Drawup[20:10] 
                | Since{Min&index[0,10,20]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [15:,20:15,15:5,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,10]} 
                | Drawup[20:] 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return)
        & [1:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.75, 2011.25, 2012.25, 2012.0, 2009.0, 2013.25, 2014.5, 2009.25, 2010.5, 2011.5, 2012.75, 2013.5, 2014.75}), frozenset({2010.25, 2015.0, 2011.75, 2009.75, 2013.75, 2014.0, 2009.5, 2010.0, 2011.0, 2012.5, 2013.0, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 2)
train = (0.63659474989904952, 0.70048183444148127)
scores = (0.3821769422815175, 0.44337853919769826)
score = 0.4127777407396079
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 8)
train = (0.59766183643653736, 0.76366472173047728)
scores = (0.36905194764701371, 0.42648990785734464)
score = 0.39777092775217915
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 152)
train = (0.68683506252003934, 1.2890858024780827)
scores = (0.37116061913916071, 0.52793751697736357)
score = 0.4495490680582621
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (2, 152)
train = (0.68683506252003934, 1.2890858024780827)
scores = (0.37116061913916071, 0.52793751697736357)
score = 0.4495490680582621
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 69)
train = (0.7252901642730023, 1.3114718556983669)
scores = (0.39327547892139986, 0.49308831760646232)
score = 0.44318189826393106
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 104)
train = (0.67909899397655793, 1.6437470396694738)
scores = (0.39250304094687893, 0.4647358743727496)
score = 0.42861945765981424
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 87)
train = (0.75003332052453797, 1.2614154631921868)
scores = (0.36312229089410009, 0.51584204837595449)
score = 0.4394821696350273
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (2, 69)
train = (0.7252901642730023, 1.3114718556983669)
scores = (0.39327547892139986, 0.49308831760646232)
score = 0.44318189826393106
>>> t = 8801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 166
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|daoc|vp1dd)
            & index[0,1,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(doo|vp5dd|Volatility)
            & [5:,10:,10:5,15:10,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]}|aoo[10:])} 
            & (
                | Drawdown[ 5:, 10:5] 
                | Since{Max&index[0]} 
                | Drawup[20:10] 
                | Since{Min&index[0,10,20]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [15:,20:15,15:5,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,10]} 
                | Drawup[20:] 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return)
        & [1:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2011.25, 2012.0, 2012.25, 2013.0, 2014.5, 2014.75, 2009.5, 2010.5, 2011.5, 2012.75, 2013.25, 2014.25, 2015.0}), frozenset({2010.0, 2010.75, 2011.75, 2009.25, 2009.75, 2013.75, 2009.0, 2010.25, 2011.0, 2012.5, 2013.5, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (54, 1)
train = (0.88582333138057845, 0.60059189190186213)
scores = (0.49456166745754049, 0.38618902098680874)
score = 0.4403753442221746
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (29, 37)
train = (0.8198592820908831, 0.76282798711378763)
scores = (0.45790898916265371, 0.36135018964888921)
score = 0.40962958940577143
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (171, 91)
train = (1.0617803729827029, 0.97513155053802358)
scores = (0.47728434328687969, 0.36692443668135266)
score = 0.42210438998411615
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (54, 1)
train = (0.88582333138057845, 0.60059189190186213)
scores = (0.49456166745754049, 0.38618902098680874)
score = 0.4403753442221746
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (65, 1)
train = (1.0496367965966282, 0.74245554965461069)
scores = (0.48959240529808812, 0.37987451776732256)
score = 0.4347334615327053
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (49, 72)
train = (1.121105729205774, 1.1038022069949753)
scores = (0.44574750100696109, 0.37220006123376165)
score = 0.40897378112036137
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (138, 19)
train = (1.098141970956811, 0.82148203277072851)
scores = (0.4772642744348255, 0.36738842455648441)
score = 0.42232634949565495
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (65, 1)
train = (1.0496367965966282, 0.74245554965461069)
scores = (0.48959240529808812, 0.37987451776732256)
score = 0.4347334615327053
>>> t = 8900 ===================================================================================================
(pair) len(F.columns) = 117
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 145
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|doc)
            & index[0, 0:1,0:2] 
          }
        | ( 
            <>Return{(aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:] 
                | Since{Max&index[0,10]} 
                | Since{Min&index[20]} 
              )
            & Since[ 125:] 
          )
      )
    | 
    | 
        <>FaceValue{ Open} 
        | Return{mix[4,11,12,13,14,16,18,19]}
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(vp1dd)
            & index[0,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:] 
                | Since{Min&index[10]} 
              )
            & Since[ 125:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
              )
            & Since[ 125:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[125:] 
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2011.0, 2011.75, 2013.5, 2013.0, 2014.0, 2014.25, 2014.75, 2009.75, 2015.25, 2011.25, 2013.25, 2014.5, 2015.0}), frozenset({2010.5, 2010.75, 2010.25, 2012.25, 2012.5, 2012.75, 2009.0, 2009.25, 2009.5, 2010.0, 2011.5, 2012.0, 2013.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (307, 680)
train = (1.364101320266389, 1.1772760289773487)
scores = (0.31489836389352543, 0.3527920438596906)
score = 0.333845203876608
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 369)
train = (0.74595663673491419, 1.0588152919473182)
scores = (0.19793430971170267, 0.34425382627143714)
score = 0.2710940679915699
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 3)
train = (0.67829846018699846, 0.49135382301811908)
scores = (0.15990270940293774, 0.13200739951898324)
score = 0.1459550544609605
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (307, 680)
train = (1.364101320266389, 1.1772760289773487)
scores = (0.31489836389352543, 0.3527920438596906)
score = 0.333845203876608
>>> t = 8901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 145
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|doc)
            & index[0, 0:1,0:2] 
          }
        | ( 
            <>Return{(aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:] 
                | Since{Max&index[0,10]} 
                | Since{Min&index[20]} 
              )
            & Since[ 125:] 
          )
      )
    | 
    | 
        <>FaceValue{ Open} 
        | Return{mix[4,11,12,13,14,16,18,19]}
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(vp1dd)
            & index[0,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:] 
                | Since{Min&index[10]} 
              )
            & Since[ 125:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
              )
            & Since[ 125:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[125:] 
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2011.5, 2012.5, 2009.5, 2009.0, 2013.25, 2014.5, 2009.25, 2010.0, 2011.0, 2012.75, 2013.0, 2014.25, 2015.25}), frozenset({2010.25, 2010.75, 2011.75, 2012.25, 2013.75, 2014.0, 2009.75, 2010.5, 2011.25, 2012.0, 2013.5, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (49, 70)
train = (0.72256627877425128, 1.0180940208317315)
scores = (0.40222054886894781, 0.35080246729461251)
score = 0.37651150808178013
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (61, 634)
train = (0.6846484605658486, 1.5372397909245974)
scores = (0.40776307394835054, 0.42452333552971416)
score = 0.4161432047390323
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (64, 242)
train = (0.79398855486552622, 1.2657997722838377)
scores = (0.39727493660062069, 0.39594849363585283)
score = 0.3966117151182368
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (61, 634)
train = (0.6846484605658486, 1.5372397909245974)
scores = (0.40776307394835054, 0.42452333552971416)
score = 0.4161432047390323
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (53, 47)
train = (0.85592040246016921, 1.0735196827717608)
scores = (0.38091841407558147, 0.3631743561947432)
score = 0.3720463851351623
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (44, 178)
train = (0.7883220369825068, 1.4452146662587977)
scores = (0.37713195876554007, 0.36998184554480995)
score = 0.373556902155175
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (121, 316)
train = (0.96312981125339803, 1.4032395225241192)
scores = (0.39767051630830086, 0.42394526876740846)
score = 0.41080789253785466
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (121, 316)
train = (0.96312981125339803, 1.4032395225241192)
scores = (0.39767051630830086, 0.42394526876740846)
score = 0.41080789253785466
>>> t = 9000 ===================================================================================================
(pair) len(F.columns) = 36
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 62
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|dcc|doc)
            & index[0,1,2, 0:1,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                | Drawdown[20:10] 
                | Since{Max&index[0,5]} 
                | Drawup[1:,10:] 
                | Since{Min&index[20]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doc|vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo)
            & [5:,10:,15:,10:5,15:5,20:10,20:5] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2011.5, 2012.5, 2012.25, 2009.25, 2013.75, 2013.25, 2009.5, 2010.0, 2011.25, 2009.0, 2013.5, 2014.25}), frozenset({2010.5, 2015.0, 2011.75, 2012.75, 2014.5, 2014.0, 2009.75, 2010.25, 2011.0, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (72, 61)
train = (0.64111073306391064, 0.75356354884813392)
scores = (0.29723418823289022, 0.3794337332995148)
score = 0.3383339607662025
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (301, 50)
train = (0.9294154299380013, 0.8102520208216476)
scores = (0.31537394647148814, 0.35282820101143908)
score = 0.3341010737414636
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 64)
train = (0.46339551448162758, 0.64894221880309055)
scores = (0.28846635095696466, 0.40857519775613405)
score = 0.3485207743565494
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (1, 64)
train = (0.46339551448162758, 0.64894221880309055)
scores = (0.28846635095696466, 0.40857519775613405)
score = 0.3485207743565494
>>> t = 9001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 62
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|dcc|doc)
            & index[0,1,2, 0:1,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                | Drawdown[20:10] 
                | Since{Max&index[0,5]} 
                | Drawup[1:,10:] 
                | Since{Min&index[20]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doc|vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo)
            & [5:,10:,15:,10:5,15:5,20:10,20:5] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.75, 2011.5, 2012.0, 2012.75, 2013.25, 2009.75, 2010.25, 2011.25, 2009.0, 2013.75, 2014.75, 2015.0}), frozenset({2011.75, 2012.5, 2009.25, 2013.5, 2014.25, 2014.0, 2009.5, 2010.5, 2011.0, 2012.25, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 33)
train = (0.51370865300321422, 0.60312306184782971)
scores = (0.28021042506493482, 0.34315224538973815)
score = 0.3116813352273365
>>> t = 9100 ===================================================================================================
(pair) len(F.columns) = 31
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 97
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doc|vp1dd)
            & index[ 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|doo[1:]|aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:] 
                | Since{Min&index[20]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doc|vp1dd)
            & index[ 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|doo[1:]|aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:] 
                | Since{Min&index[20]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2015.0, 2012.0, 2009.0, 2014.75, 2014.0, 2014.25, 2009.75, 2010.0, 2011.5, 2012.75, 2013.25, 2014.5, 2015.25}), frozenset({2010.5, 2010.75, 2011.25, 2011.75, 2012.5, 2009.25, 2013.5, 2013.75, 2009.5, 2010.25, 2011.0, 2012.25, 2013.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 8)
train = (0.70368232357583349, 0.45386429951196433)
scores = (0.31939554899163097, 0.17709085290534848)
score = 0.24824320094848973
>>> t = 9101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 97
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doc|vp1dd)
            & index[ 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|doo[1:]|aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:] 
                | Since{Min&index[20]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doc|vp1dd)
            & index[ 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|doo[1:]|aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:] 
                | Since{Min&index[20]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2015.0, 2011.75, 2009.0, 2013.25, 2013.0, 2014.5, 2009.25, 2010.0, 2011.25, 2012.0, 2013.5, 2014.25, 2015.25}), frozenset({2010.5, 2010.75, 2011.5, 2012.5, 2012.75, 2009.75, 2014.0, 2009.5, 2010.25, 2011.0, 2012.25, 2013.75, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (58, 37)
train = (0.8211430648028899, 0.76296695527153713)
scores = (0.4595982606429011, 0.31530663756004973)
score = 0.3874524491014754
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 51)
train = (0.46326079925861224, 0.93670585777785764)
scores = (0.44258946590384352, 0.30620114726196246)
score = 0.374395306582903
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (8, 42)
train = (0.53737808055850322, 0.7300334659501535)
scores = (0.42938786587892969, 0.3749430279712368)
score = 0.40216544692508327
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (8, 42)
train = (0.53737808055850322, 0.7300334659501535)
scores = (0.42938786587892969, 0.3749430279712368)
score = 0.40216544692508327
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (6, 55)
train = (0.64093741809491345, 1.0258395308742652)
scores = (0.43413465612614671, 0.2958560490859668)
score = 0.36499535260605676
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (34, 7)
train = (0.81621863931580285, 0.75157617703589208)
scores = (0.43663201718464134, 0.27619669201315655)
score = 0.3564143545988989
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (7, 41)
train = (0.64314494892684315, 0.84257201988131392)
scores = (0.44251753829959495, 0.34989823167332301)
score = 0.396207884986459
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (7, 41)
train = (0.64314494892684315, 0.84257201988131392)
scores = (0.44251753829959495, 0.34989823167332301)
score = 0.396207884986459
>>> t = 9200 ===================================================================================================
(pair) len(F.columns) = 21
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 24
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|doo|daoc)
            & index[0,1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp1dd|vp5dd)
            & [3:,6:,9:,12:,18:,12:9,15:12,            15:9,18:9,21:12,15:3,18:6,21:9,18:3] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[10]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.75, 2011.0, 2012.25, 2009.75, 2013.5, 2013.0, 2009.25, 2010.25, 2011.75, 2012.75, 2013.75, 2014.0, 2015.0}), frozenset({2010.5, 2011.5, 2012.5, 2009.0, 2014.5, 2014.25, 2009.5, 2010.0, 2011.25, 2012.0, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (214, 226)
train = (0.71213571381226692, 0.62064783092274456)
scores = (0.32695744152577222, 0.31157053621196246)
score = 0.3192639888688673
>>> t = 9201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 24
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|doo|daoc)
            & index[0,1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp1dd|vp5dd)
            & [3:,6:,9:,12:,18:,12:9,15:12,            15:9,18:9,21:12,15:3,18:6,21:9,18:3] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[10]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2015.0, 2011.25, 2012.0, 2013.0, 2013.25, 2013.75, 2009.0, 2010.5, 2011.0, 2009.25, 2013.5, 2014.75, 2015.25}), frozenset({2010.25, 2010.75, 2011.75, 2012.5, 2012.75, 2009.75, 2014.25, 2014.0, 2009.5, 2010.0, 2011.5, 2012.25, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (548, 14)
train = (0.75238848563690341, 0.44177699308509755)
scores = (0.40943444291090664, 0.27518040755510653)
score = 0.3423074252330066
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (305, 437)
train = (0.73528079619926612, 1.172656570071567)
scores = (0.40462291868684475, 0.31743254076373062)
score = 0.3610277297252877
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (414, 255)
train = (0.63162644282753533, 0.62440975563553602)
scores = (0.39482906795673833, 0.29886582107007043)
score = 0.3468474445134044
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (305, 437)
train = (0.73528079619926612, 1.172656570071567)
scores = (0.40462291868684475, 0.31743254076373062)
score = 0.3610277297252877
>>> t = 9300 ===================================================================================================
(pair) len(F.columns) = 41
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 83
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|vp5dd|Volatility)
            & [15:,15:5,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:10] 
                | Since{Max&index[0]} 
                | Drawup[20:10] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:10] 
                | Since{Max & index[10]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 62:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.5, 2011.75, 2012.75, 2012.5, 2014.25, 2014.75, 2009.25, 2010.0, 2011.25, 2012.25, 2013.5, 2014.0}), frozenset({2015.0, 2011.5, 2009.0, 2009.75, 2013.25, 2013.75, 2009.5, 2010.75, 2011.0, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (83, 45)
train = (0.84463407366490884, 0.75410592094332052)
scores = (0.25535303008958438, 0.37120428770076747)
score = 0.3132786588951759
>>> t = 9301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 83
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|vp5dd|Volatility)
            & [15:,15:5,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:10] 
                | Since{Max&index[0]} 
                | Drawup[20:10] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:10] 
                | Since{Max & index[10]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 62:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.75, 2011.5, 2009.25, 2013.5, 2013.25, 2014.75, 2009.75, 2010.25, 2011.75, 2012.25, 2013.75, 2014.5, 2015.25}), frozenset({2010.5, 2011.25, 2012.5, 2012.75, 2009.0, 2014.0, 2009.5, 2010.0, 2011.0, 2012.0, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 56)
train = (0.71131426204951109, 0.73071663906766382)
scores = (0.29226236026094815, 0.37423283657891476)
score = 0.33324759841993146
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 40)
train = (0.66356367118188331, 0.70323693824525535)
scores = (0.32939017993993236, 0.35146009340869072)
score = 0.3404251366743115
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (70, 86)
train = (0.89641741532896346, 0.86395796359943999)
scores = (0.32131425689020188, 0.46393568079896375)
score = 0.3926249688445828
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (70, 86)
train = (0.89641741532896346, 0.86395796359943999)
scores = (0.32131425689020188, 0.46393568079896375)
score = 0.3926249688445828
>>> t = 9400 ===================================================================================================
(pair) len(F.columns) = 73
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 93
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|acc)
            & index[0,2,1:2] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:] 
                | Since{Max&index[0]} 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp5dd)
            & [9:,18:,9:3,12:6,            15:9,21:15,12:3,15:6,18:9,15:3,18:6,21:6,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[ 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Drawup[ 5:] 
                | Since{Min&index[0,20]} 
              )
            & Since[21:, 62:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|vp1dd)
            & index[0,1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd)
            & [5:,10:,15:,10:5,15:10,15:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max&index[0]} 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[21:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.25, 2012.5, 2012.25, 2012.0, 2009.0, 2013.0, 2014.25, 2014.75, 2009.75, 2010.5, 2012.75, 2013.5, 2014.0}), frozenset({2010.75, 2015.0, 2011.25, 2011.5, 2011.75, 2013.75, 2009.5, 2010.0, 2011.0, 2009.25, 2013.25, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (142, 250)
train = (0.88581785046350447, 1.010079591394949)
scores = (0.47921785659472449, 0.3533356407145769)
score = 0.4162767486546507
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (183, 144)
train = (0.89457746969709317, 0.95772675291422416)
scores = (0.43685165265640175, 0.33513930383277801)
score = 0.3859954782445899
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (189, 415)
train = (0.95620176336337959, 1.0978115232848449)
scores = (0.48185818701223976, 0.38862177573030487)
score = 0.4352399813712723
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (189, 415)
train = (0.95620176336337959, 1.0978115232848449)
scores = (0.48185818701223976, 0.38862177573030487)
score = 0.4352399813712723
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (117, 218)
train = (0.98339356499992758, 1.1498081932959769)
scores = (0.4793215396338259, 0.3681612317834036)
score = 0.42374138570861475
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (440, 448)
train = (1.3266331069783863, 1.5760903119486145)
scores = (0.46834823496127803, 0.39709664030761327)
score = 0.4327224376344456
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (183, 254)
train = (1.025583263844271, 1.1045074127103505)
scores = (0.48158340645066949, 0.38577508587060749)
score = 0.43367924616063847
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (183, 254)
train = (1.025583263844271, 1.1045074127103505)
scores = (0.48158340645066949, 0.38577508587060749)
score = 0.43367924616063847
>>> t = 9401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 93
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|acc)
            & index[0,2,1:2] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:] 
                | Since{Max&index[0]} 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp5dd)
            & [9:,18:,9:3,12:6,            15:9,21:15,12:3,15:6,18:9,15:3,18:6,21:6,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[ 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Drawup[ 5:] 
                | Since{Min&index[0,20]} 
              )
            & Since[21:, 62:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|vp1dd)
            & index[0,1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd)
            & [5:,10:,15:,10:5,15:10,15:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max&index[0]} 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[21:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2011.75, 2012.5, 2009.0, 2009.75, 2014.75, 2014.25, 2009.25, 2010.0, 2011.5, 2012.25, 2013.75, 2014.0, 2015.25}), frozenset({2010.5, 2010.75, 2011.25, 2012.75, 2013.25, 2013.5, 2009.5, 2010.25, 2011.0, 2012.0, 2013.0, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (392, 3)
train = (0.95320365900412274, 0.82518687849751959)
scores = (0.55221490273086982, 0.40336277107072255)
score = 0.4777888369007962
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (240, 8)
train = (0.89522302486217975, 0.88872088828729756)
scores = (0.54075819256805735, 0.3876589988125233)
score = 0.4642085956902903
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (125, 3)
train = (0.78632073893930787, 0.72419239339216634)
scores = (0.49766274991432669, 0.39885230811136552)
score = 0.4482575290128461
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (392, 3)
train = (0.95320365900412274, 0.82518687849751959)
scores = (0.55221490273086982, 0.40336277107072255)
score = 0.4777888369007962
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (250, 3)
train = (1.0075943388554804, 0.93051201963148322)
scores = (0.55757823174743193, 0.41369185414911575)
score = 0.48563504294827387
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (184, 13)
train = (1.0262965050023767, 1.0780705262545762)
scores = (0.54291796498219769, 0.3869354244388446)
score = 0.46492669471052117
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (223, 3)
train = (0.97840012427475309, 0.75351017838921897)
scores = (0.53348128349548385, 0.40984667029193411)
score = 0.471663976893709
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (250, 3)
train = (1.0075943388554804, 0.93051201963148322)
scores = (0.55757823174743193, 0.41369185414911575)
score = 0.48563504294827387
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (209, 3)
train = (1.075917176878201, 0.97493272507313644)
scores = (0.5441613728365936, 0.4107431109454347)
score = 0.47745224189101415
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (174, 308)
train = (1.2020006858509107, 1.8238905993488319)
scores = (0.54550170372217088, 0.43189735877922941)
score = 0.48869953125070015
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (263, 3)
train = (1.0792949843768815, 0.75525356082502892)
scores = (0.53506759486336963, 0.41058769233467862)
score = 0.47282764359902413
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (174, 308)
train = (1.2020006858509107, 1.8238905993488319)
scores = (0.54550170372217088, 0.43189735877922941)
score = 0.48869953125070015
>>> t = 9402 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 93
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|acc)
            & index[0,2,1:2] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:] 
                | Since{Max&index[0]} 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp5dd)
            & [9:,18:,9:3,12:6,            15:9,21:15,12:3,15:6,18:9,15:3,18:6,21:6,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[ 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Drawup[ 5:] 
                | Since{Min&index[0,20]} 
              )
            & Since[21:, 62:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|vp1dd)
            & index[0,1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd)
            & [5:,10:,15:,10:5,15:10,15:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max&index[0]} 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[21:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.5, 2015.0, 2011.75, 2012.0, 2012.75, 2012.25, 2014.5, 2009.75, 2010.0, 2011.5, 2009.5, 2014.0, 2015.25}), frozenset({2010.75, 2011.25, 2009.25, 2013.25, 2013.5, 2013.75, 2014.25, 2009.0, 2010.25, 2011.0, 2012.5, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (7, 96)
train = (0.76148401896421258, 0.86047693033992945)
scores = (0.52339182530754003, 0.42105797952658414)
score = 0.47222490241706205
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (15, 114)
train = (0.87306045999258131, 0.87924187804454446)
scores = (0.5150091884840039, 0.42546497622055296)
score = 0.47023708235227846
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 248)
train = (0.65765834671081524, 1.0123632574525614)
scores = (0.51738005531874298, 0.43275085876625791)
score = 0.47506545704250047
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (3, 248)
train = (0.65765834671081524, 1.0123632574525614)
scores = (0.51738005531874298, 0.43275085876625791)
score = 0.47506545704250047
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 84)
train = (0.83450062042910256, 0.95542457383181356)
scores = (0.53687396465397841, 0.43910412015126604)
score = 0.4879890424026222
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (9, 306)
train = (0.96305812599358775, 1.2654244253647087)
scores = (0.52128368630124255, 0.4697884209995567)
score = 0.49553605365039965
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 287)
train = (0.69831674913398278, 1.1591314085913778)
scores = (0.51610764059304193, 0.44421106222464324)
score = 0.4801593514088426
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (9, 306)
train = (0.96305812599358775, 1.2654244253647087)
scores = (0.52128368630124255, 0.4697884209995567)
score = 0.49553605365039965
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 77)
train = (0.88192262204491545, 1.0267950941729436)
scores = (0.54518072172741683, 0.44528393585564596)
score = 0.4952323287915314
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (9, 264)
train = (1.1034967046541229, 1.4229098097477026)
scores = (0.51839961318167904, 0.48484670714585637)
score = 0.5016231601637677
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (59, 315)
train = (1.0445387523901464, 1.2435435895387528)
scores = (0.52620642736800238, 0.44882356579576094)
score = 0.4875149965818817
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (9, 264)
train = (1.1034967046541229, 1.4229098097477026)
scores = (0.51839961318167904, 0.48484670714585637)
score = 0.5016231601637677
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 311)
train = (0.92662570598055927, 1.3604183593537693)
scores = (0.54566064382244173, 0.46574920503276285)
score = 0.5057049244276023
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (15, 208)
train = (1.252597489755582, 1.5225756080687844)
scores = (0.54118756784501276, 0.49415579950631028)
score = 0.5176716836756615
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 277)
train = (0.70810339032598579, 1.2747115475568562)
scores = (0.51824212023709626, 0.44701585197793225)
score = 0.48262898610751426
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (15, 208)
train = (1.252597489755582, 1.5225756080687844)
scores = (0.54118756784501276, 0.49415579950631028)
score = 0.5176716836756615
>>> t = 9403 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 93
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|acc)
            & index[0,2,1:2] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:] 
                | Since{Max&index[0]} 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp5dd)
            & [9:,18:,9:3,12:6,            15:9,21:15,12:3,15:6,18:9,15:3,18:6,21:6,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[ 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Drawup[ 5:] 
                | Since{Min&index[0,20]} 
              )
            & Since[21:, 62:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|vp1dd)
            & index[0,1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd)
            & [5:,10:,15:,10:5,15:10,15:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max&index[0]} 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[21:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.75, 2012.75, 2012.5, 2012.25, 2013.25, 2014.25, 2014.75, 2009.5, 2010.0, 2011.75, 2012.0, 2013.0, 2014.5}), frozenset({2010.25, 2015.0, 2011.25, 2011.5, 2009.75, 2013.75, 2009.0, 2010.5, 2011.0, 2009.25, 2013.5, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (55, 4)
train = (1.0151772177612943, 0.6315913219779038)
scores = (0.46174055469166952, 0.36103312108977881)
score = 0.41138683789072417
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (49, 154)
train = (0.99789210032121256, 0.86192345843592788)
scores = (0.4531077240549245, 0.35471282528102122)
score = 0.40391027466797286
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (95, 2)
train = (1.0883036039007075, 0.62706250171120481)
scores = (0.47552849426486549, 0.38681693466670564)
score = 0.43117271446578553
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (95, 2)
train = (1.0883036039007075, 0.62706250171120481)
scores = (0.47552849426486549, 0.38681693466670564)
score = 0.43117271446578553
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (65, 4)
train = (1.2093336154559915, 0.72387213609590684)
scores = (0.47233586094304991, 0.39536036197638486)
score = 0.43384811145971736
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (55, 8)
train = (1.2087381732014018, 0.6652318272554465)
scores = (0.43406974610809662, 0.34957313454034583)
score = 0.3918214403242212
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (86, 2)
train = (1.1362545687260981, 0.67088206005578432)
scores = (0.47534753459142737, 0.37888069901556548)
score = 0.4271141168034964
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (65, 4)
train = (1.2093336154559915, 0.72387213609590684)
scores = (0.47233586094304991, 0.39536036197638486)
score = 0.43384811145971736
>>> t = 9500 ===================================================================================================
(pair) len(F.columns) = 22
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 25
0
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [9:,15:,9:6,12:9,12:6,            15:9,18:12,15:6,18:9,15:3,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP| Volatility)
        & [10:] 
      }
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[62:] 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.5, 2011.0, 2011.75, 2013.25, 2014.5, 2009.25, 2010.75, 2011.5, 2009.0, 2013.0, 2014.0, 2015.25}), frozenset({2012.25, 2012.5, 2012.75, 2009.75, 2013.75, 2014.25, 2009.5, 2010.0, 2011.25, 2012.0, 2013.5, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 1)
train = (0.41296408961657666, 0.36783463363540558)
scores = (0.30198728937815683, 0.30783902514416861)
score = 0.30491315726116275
>>> t = 9501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 25
0
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [9:,15:,9:6,12:9,12:6,            15:9,18:12,15:6,18:9,15:3,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP| Volatility)
        & [10:] 
      }
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[62:] 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2012.25, 2012.0, 2009.0, 2013.5, 2013.25, 2014.25, 2014.75, 2009.25, 2010.0, 2012.5, 2013.0, 2014.5, 2015.25}), frozenset({2010.75, 2010.5, 2011.25, 2011.5, 2011.75, 2009.75, 2009.5, 2010.25, 2011.0, 2012.75, 2013.75, 2014.0, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 1)
train = (0.37518469368870733, 0.45704126725881977)
scores = (0.30535071523764606, 0.29507878570023205)
score = 0.3002147504689391
>>> t = 9600 ===================================================================================================
(pair) len(F.columns) = 19
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 56
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd|Volatility)
            & [5:,10:,10:5,20:15,15:5,20:10] 
          }
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd|Volatility)
            & [5:,10:,10:5,20:15,15:5,20:10] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.75, 2009.25, 2009.0, 2013.75, 2013.5, 2014.75, 2009.75, 2010.0, 2011.75, 2012.5, 2013.25, 2014.25, 2015.25}), frozenset({2010.5, 2011.25, 2011.5, 2012.25, 2012.75, 2014.0, 2009.5, 2010.25, 2011.0, 2012.0, 2013.0, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (842, 135)
train = (0.98801541446335572, 0.83400660440380769)
scores = (0.32028264918854521, 0.40486573763439337)
score = 0.3625741934114693
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (402, 40)
train = (0.8719568811996572, 0.71982509681422779)
scores = (0.30243334065841077, 0.40625968216402569)
score = 0.3543465114112182
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (657, 416)
train = (0.90620560022522356, 0.97800988251895837)
scores = (0.31882484613626877, 0.42248643903437899)
score = 0.3706556425853239
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (657, 416)
train = (0.90620560022522356, 0.97800988251895837)
scores = (0.31882484613626877, 0.42248643903437899)
score = 0.3706556425853239
>>> t = 9601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 56
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd|Volatility)
            & [5:,10:,10:5,20:15,15:5,20:10] 
          }
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd|Volatility)
            & [5:,10:,10:5,20:15,15:5,20:10] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2011.0, 2011.25, 2012.75, 2012.25, 2013.5, 2014.5, 2009.25, 2010.25, 2011.5, 2012.5, 2013.25, 2014.25, 2015.25}), frozenset({2010.5, 2010.75, 2009.0, 2009.75, 2013.75, 2014.0, 2009.5, 2010.0, 2011.75, 2012.0, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (126, 95)
train = (0.72133842342757737, 0.63753259988451605)
scores = (0.27167693612853971, 0.38585583044615801)
score = 0.32876638328734886
>>> t = 9700 ===================================================================================================
(pair) len(F.columns) = 10
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 22
    <>~Market & (
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Max & index[10]} 
                | Drawup[10:] 
                | Since{Min & index[0,10]} 
              )
            & Since[ 62:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [5:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.25, 2012.75, 2012.25, 2013.0, 2014.5, 2014.0, 2009.25, 2010.75, 2011.25, 2012.5, 2013.25, 2014.25, 2015.0}), frozenset({2010.5, 2011.5, 2011.75, 2009.0, 2009.75, 2013.75, 2009.5, 2010.0, 2011.0, 2012.0, 2013.5, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (416, 150)
train = (1.6529855011011472, 1.0723073218072254)
scores = (0.27838008349792631, 0.28808774893888928)
score = 0.28323391621840777
>>> t = 9701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 22
    <>~Market & (
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Max & index[10]} 
                | Drawup[10:] 
                | Since{Min & index[0,10]} 
              )
            & Since[ 62:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [5:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.25, 2010.0, 2009.25, 2014.0, 2014.75, 2014.25, 2009.5, 2010.75, 2011.75, 2012.25, 2013.5, 2014.5, 2015.25}), frozenset({2011.0, 2011.25, 2012.5, 2012.75, 2009.75, 2013.25, 2013.75, 2009.0, 2010.5, 2011.5, 2012.0, 2013.0, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (189, 322)
train = (1.1757724636292399, 1.3534554147196318)
scores = (0.16845418731195599, 0.25280989329416553)
score = 0.21063204030306076
>>> t = 9800 ===================================================================================================
(pair) len(F.columns) = 57
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 65
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|daoc|vp1dd)
            & index[1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[10:,20:,20:10] 
                | Since{Max&index[0,20]} 
                | Since{Min&index[0,5,10]} 
              )
            & Since[ 125:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp5dd|Volatility)
            & [15:,10:5,15:10,20:15,15:5,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:])} 
            & (
                | Drawdown[1:, 10:5,20:10] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2011.75, 2012.75, 2012.25, 2009.75, 2009.25, 2013.75, 2009.0, 2010.75, 2011.0, 2012.5, 2013.0, 2014.75, 2015.0}), frozenset({2010.25, 2010.5, 2011.5, 2013.5, 2014.25, 2014.0, 2009.5, 2010.0, 2011.25, 2012.0, 2013.25, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (662, 201)
train = (1.1233808205157343, 1.1570619733246346)
scores = (0.52891813430838874, 0.4109367203476495)
score = 0.4699274273280191
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (582, 229)
train = (1.1410086427899615, 1.448122895396309)
scores = (0.5694573687092549, 0.40377684924293922)
score = 0.48661710897609706
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (192, 339)
train = (0.77652218020282981, 1.0872989206876358)
scores = (0.45434617942755379, 0.39409404196003223)
score = 0.424220110693793
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (582, 229)
train = (1.1410086427899615, 1.448122895396309)
scores = (0.5694573687092549, 0.40377684924293922)
score = 0.48661710897609706
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (477, 231)
train = (1.1848492300357902, 1.4067848953229971)
scores = (0.54987821807692505, 0.41809261978918472)
score = 0.4839854189330549
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (419, 194)
train = (1.2592989985672987, 1.6877053868356446)
scores = (0.59037704630723276, 0.41229769674997324)
score = 0.501337371528603
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (710, 280)
train = (1.140690289702748, 1.1568124526197097)
scores = (0.53772743725804306, 0.39563766247590454)
score = 0.4666825498669738
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (419, 194)
train = (1.2592989985672987, 1.6877053868356446)
scores = (0.59037704630723276, 0.41229769674997324)
score = 0.501337371528603
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (492, 180)
train = (1.3150110685511582, 1.4618820351564474)
scores = (0.57641541002625807, 0.42279011883423157)
score = 0.4996027644302448
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (319, 248)
train = (1.3657520354350934, 1.8177590619055555)
scores = (0.61634565133548147, 0.41422471243843756)
score = 0.5152851818869595
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (359, 364)
train = (1.0743533874473337, 1.2974734518362385)
scores = (0.5329878741566576, 0.39889144536365834)
score = 0.46593965976015794
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (319, 248)
train = (1.3657520354350934, 1.8177590619055555)
scores = (0.61634565133548147, 0.41422471243843756)
score = 0.5152851818869595
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (478, 232)
train = (1.3816687842101221, 1.5846014465753198)
scores = (0.57902596253886884, 0.42715536164683982)
score = 0.5030906620928544
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (392, 92)
train = (1.5530761171475655, 1.8133872125142425)
scores = (0.64231825866598702, 0.402828039617671)
score = 0.5225731491418291
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (528, 347)
train = (1.2274843821788359, 1.3293028164772922)
scores = (0.54727117717936791, 0.40438391536007351)
score = 0.4758275462697207
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (392, 92)
train = (1.5530761171475655, 1.8133872125142425)
scores = (0.64231825866598702, 0.402828039617671)
score = 0.5225731491418291
>>> t = 9801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 65
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|daoc|vp1dd)
            & index[1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[10:,20:,20:10] 
                | Since{Max&index[0,20]} 
                | Since{Min&index[0,5,10]} 
              )
            & Since[ 125:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp5dd|Volatility)
            & [15:,10:5,15:10,20:15,15:5,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:])} 
            & (
                | Drawdown[1:, 10:5,20:10] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.75, 2011.5, 2012.75, 2014.5, 2014.0, 2009.5, 2010.5, 2011.75, 2012.25, 2013.25, 2014.25, 2015.0}), frozenset({2011.25, 2012.5, 2009.25, 2009.75, 2013.5, 2013.75, 2009.0, 2010.25, 2011.0, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (60, 5)
train = (0.78462888181153501, 0.56216730959477079)
scores = (0.36113649764307076, 0.34942754627124956)
score = 0.3552820219571602
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (49, 6)
train = (0.93479441127817675, 0.56689912591272673)
scores = (0.36626340343782321, 0.34968735191650208)
score = 0.35797537767716264
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (46, 5)
train = (0.63627857535784016, 0.58199299000837568)
scores = (0.34416084507503941, 0.34646377916136184)
score = 0.3453123121182006
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (49, 6)
train = (0.93479441127817675, 0.56689912591272673)
scores = (0.36626340343782321, 0.34968735191650208)
score = 0.35797537767716264
>>> t = 9802 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 65
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|daoc|vp1dd)
            & index[1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[10:,20:,20:10] 
                | Since{Max&index[0,20]} 
                | Since{Min&index[0,5,10]} 
              )
            & Since[ 125:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp5dd|Volatility)
            & [15:,10:5,15:10,20:15,15:5,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:])} 
            & (
                | Drawdown[1:, 10:5,20:10] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.0, 2011.75, 2012.25, 2009.75, 2013.75, 2013.5, 2009.25, 2010.75, 2011.25, 2012.5, 2013.25, 2015.0}), frozenset({2011.5, 2012.75, 2009.0, 2014.75, 2014.25, 2014.0, 2009.5, 2010.5, 2011.0, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (476, 29)
train = (1.2713777727468965, 0.60001825984442181)
scores = (0.37846323256942338, 0.38912954851041859)
score = 0.383796390539921
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (653, 326)
train = (1.5150652959774988, 0.97921503409841681)
scores = (0.3690980945433831, 0.42377644892752481)
score = 0.39643727173545396
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (438, 97)
train = (1.0820498672910122, 0.70180946201074945)
scores = (0.36874460018466187, 0.39173835418181863)
score = 0.38024147718324025
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (653, 326)
train = (1.5150652959774988, 0.97921503409841681)
scores = (0.3690980945433831, 0.42377644892752481)
score = 0.39643727173545396
>>> t = 9803 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 65
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|daoc|vp1dd)
            & index[1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[10:,20:,20:10] 
                | Since{Max&index[0,20]} 
                | Since{Min&index[0,5,10]} 
              )
            & Since[ 125:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp5dd|Volatility)
            & [15:,10:5,15:10,20:15,15:5,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:])} 
            & (
                | Drawdown[1:, 10:5,20:10] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.5, 2010.75, 2012.0, 2012.25, 2012.5, 2013.25, 2014.0, 2009.75, 2010.0, 2011.75, 2012.75, 2013.75, 2014.5}), frozenset({2015.0, 2011.25, 2011.5, 2009.25, 2013.5, 2014.25, 2009.5, 2010.25, 2011.0, 2009.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (39, 352)
train = (0.79533693627580404, 0.99860247878742192)
scores = (0.3971035996821991, 0.35837023600670059)
score = 0.37773691784444985
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (34, 76)
train = (0.91161091977970399, 0.78519348604827433)
scores = (0.37674129830039083, 0.32228335697106764)
score = 0.34951232763572926
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (93, 1)
train = (0.84855987005651934, 0.49768959786770961)
scores = (0.39330551636280853, 0.30444769804595284)
score = 0.3488766072043807
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (39, 352)
train = (0.79533693627580404, 0.99860247878742192)
scores = (0.3971035996821991, 0.35837023600670059)
score = 0.37773691784444985
>>> t = 9900 ===================================================================================================
(pair) len(F.columns) = 20
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 61
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|dcc|doc|vp1dd)
            & index[2,1:2,0:2] 
          }
        | ( 
            | Volatility[ 20:]
            & (
                | Drawup[1:,20:,20:10] 
                | Since{Min & index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & ( VP)
        & [10:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|dcc|doc|vp1dd)
            & index[2,1:2,0:2] 
          }
        | ( 
            | Volatility[ 20:]
            & (
                | Drawup[1:,20:,20:10] 
                | Since{Min & index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & ( VP)
        & [10:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.75, 2011.75, 2011.5, 2012.25, 2009.75, 2009.25, 2014.0, 2009.0, 2010.0, 2011.25, 2012.75, 2013.75, 2014.75}), frozenset({2010.5, 2015.0, 2012.5, 2013.25, 2013.5, 2014.25, 2009.5, 2010.25, 2011.0, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (21, 32)
train = (0.69078539953383133, 0.74251638434034395)
scores = (0.13733720717518963, 0.22501896048071685)
score = 0.18117808382795325
>>> t = 9901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 61
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|dcc|doc|vp1dd)
            & index[2,1:2,0:2] 
          }
        | ( 
            | Volatility[ 20:]
            & (
                | Drawup[1:,20:,20:10] 
                | Since{Min & index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & ( VP)
        & [10:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|dcc|doc|vp1dd)
            & index[2,1:2,0:2] 
          }
        | ( 
            | Volatility[ 20:]
            & (
                | Drawup[1:,20:,20:10] 
                | Since{Min & index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & ( VP)
        & [10:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2015.0, 2011.0, 2011.75, 2012.0, 2013.25, 2014.25, 2014.75, 2010.0, 2011.5, 2012.25, 2013.0, 2014.0, 2015.25}), frozenset({2010.75, 2010.5, 2012.75, 2009.0, 2009.25, 2013.75, 2009.75, 2009.5, 2010.25, 2011.25, 2012.5, 2013.5, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (67, 6)
train = (0.91552186963706561, 0.51763809328727683)
scores = (0.17562658970902081, 0.1998958187277739)
score = 0.18776120421839737
>>> t = 10000 ===================================================================================================
(pair) len(F.columns) = 65
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 98
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|vp5dd|Volatility)
            & [5:,10:,15:,15:10,20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:10] 
                | Since{Max&index[0]} 
                | Drawup[ 5:,20:10] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| Volatility)
        & [10:,20:] 
      }
    | 
    | 
        Time{long| short}
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|daoc)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Max & index[0,10,20]} 
                | Drawup[1,10:,20:] 
                | Since{Min & index[5,20]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        | FracRec[21:,62:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.0, 2011.5, 2011.0, 2011.75, 2012.0, 2014.0, 2009.0, 2010.25, 2011.25, 2012.25, 2013.5, 2014.5, 2015.25}), frozenset({2010.75, 2012.75, 2009.25, 2009.75, 2013.25, 2013.75, 2014.25, 2009.5, 2010.5, 2012.5, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (158, 195)
train = (1.0127977757854361, 1.0812863330708378)
scores = (0.35183201800420366, 0.42373497823753781)
score = 0.38778349812087076
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (84, 298)
train = (0.93990226565697688, 1.2799012521334887)
scores = (0.33755161152410651, 0.41083442175988805)
score = 0.3741930166419973
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (226, 86)
train = (0.98751523271092212, 0.81548659243307497)
scores = (0.33944370002726787, 0.45901368402950044)
score = 0.3992286920283842
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (226, 86)
train = (0.98751523271092212, 0.81548659243307497)
scores = (0.33944370002726787, 0.45901368402950044)
score = 0.3992286920283842
>>> t = 10001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 98
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|vp5dd|Volatility)
            & [5:,10:,15:,15:10,20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:10] 
                | Since{Max&index[0]} 
                | Drawup[ 5:,20:10] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| Volatility)
        & [10:,20:] 
      }
    | 
    | 
        Time{long| short}
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|daoc)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Max & index[0,10,20]} 
                | Drawup[1,10:,20:] 
                | Since{Min & index[5,20]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        | FracRec[21:,62:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[10]
      }
len(samps) = 2
(frozenset({2011.0, 2012.0, 2012.75, 2013.75, 2013.5, 2014.0, 2009.0, 2010.0, 2011.25, 2009.5, 2013.25, 2014.25, 2015.25}), frozenset({2010.25, 2010.75, 2011.75, 2012.5, 2009.75, 2014.5, 2009.25, 2010.5, 2011.5, 2012.25, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (151, 128)
train = (0.91225046531016918, 1.023636571871378)
scores = (0.32196417477147304, 0.26272168563892345)
score = 0.29234293020519825
>>> t = 10100 ===================================================================================================
(pair) len(F.columns) = 170
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 302
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|daoc)
            & index[0,1,2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd)
            & [6:,9:,12:,18:,6:3,9:6,21:18,9:3,12:6,12:3,15:6,18:9,21:12,15:3,18:6,21:9] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:, 10:5] 
                | Since{Max&index[0]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Max & index[5,20]} 
                | Drawup[1] 
                | Since{Min & index[0,5,20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | 
        Time{long| short}
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doo|doc|vp1dd)
            & index[0,2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd|Volatility)
            & [6:,15:,9:3,            15:9,21:15,12:3,21:12,15:3,18:3,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|doo[10:])} 
            & (
                | Drawdown[20:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[5]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2011.25, 2011.0, 2012.5, 2012.25, 2009.25, 2009.5, 2009.0, 2015.25, 2011.75, 2012.0, 2013.5, 2014.0, 2015.0}), frozenset({2010.25, 2010.5, 2010.75, 2013.25, 2013.75, 2014.5, 2014.25, 2009.75, 2010.0, 2011.5, 2012.75, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (10, 224)
train = (0.64284523682362804, 1.4131875136696963)
scores = (0.3565300427059917, 0.24908564010595299)
score = 0.30280784140597233
>>> t = 10101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 302
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|daoc)
            & index[0,1,2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd)
            & [6:,9:,12:,18:,6:3,9:6,21:18,9:3,12:6,12:3,15:6,18:9,21:12,15:3,18:6,21:9] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:, 10:5] 
                | Since{Max&index[0]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Max & index[5,20]} 
                | Drawup[1] 
                | Since{Min & index[0,5,20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | 
        Time{long| short}
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doo|doc|vp1dd)
            & index[0,2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd|Volatility)
            & [6:,15:,9:3,            15:9,21:15,12:3,21:12,15:3,18:3,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|doo[10:])} 
            & (
                | Drawdown[20:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[5]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.0, 2011.25, 2012.75, 2012.25, 2009.25, 2014.75, 2014.0, 2009.5, 2010.5, 2011.5, 2012.0, 2013.5, 2014.25}), frozenset({2010.75, 2015.0, 2011.75, 2009.75, 2013.25, 2013.75, 2009.0, 2010.25, 2011.0, 2012.5, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (147, 97)
train = (0.98877214236544331, 1.0778915817948274)
scores = (0.28260072957859261, 0.30814311624810875)
score = 0.2953719229133507
>>> t = 10200 ===================================================================================================
(pair) len(F.columns) = 64
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 76
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [9:,12:,6:3,15:12,18:12,21:15,12:3,18:9,15:3,21:6] 
          }
      )
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[21:,125:] 
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd|Volatility)
            & [5:,10:,10:5,15:10,15:5,20:5] 
          }
        | ( 
            <>Return{(doo[1:])} 
            & (
                | Drawdown[20:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[0]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[1:, 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Drawup[20:,20:10] 
                | Since{Min & index[10]} 
              )
            & Since[ 125:, 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd)
            & [9:,6:3,            15:9,18:12,15:6,21:12,18:3,21:3] 
          }
      )
    | 
        <>AssetEnc{InUni} 
    | 
        Time{long| short}
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.5, 2010.0, 2011.5, 2012.5, 2009.5, 2009.0, 2009.75, 2010.25, 2011.0, 2012.25, 2013.25, 2014.5, 2015.0}), frozenset({2011.75, 2012.75, 2013.5, 2013.75, 2014.25, 2014.0, 2009.25, 2010.75, 2011.25, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 33)
train = (0.49818939336917994, 0.75809290887987024)
scores = (0.23718445293721491, 0.42776688354828635)
score = 0.33247566824275065
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (144, 30)
train = (0.97480647179415469, 0.85001338026480366)
scores = (0.25867290433810586, 0.42604888037700378)
score = 0.34236089235755485
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (300, 115)
train = (1.0400289431733867, 0.96679777426661617)
scores = (0.28109860072960208, 0.45537374808790904)
score = 0.36823617440875556
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (300, 115)
train = (1.0400289431733867, 0.96679777426661617)
scores = (0.28109860072960208, 0.45537374808790904)
score = 0.36823617440875556
>>> t = 10201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 76
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [9:,12:,6:3,15:12,18:12,21:15,12:3,18:9,15:3,21:6] 
          }
      )
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[21:,125:] 
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd|Volatility)
            & [5:,10:,10:5,15:10,15:5,20:5] 
          }
        | ( 
            <>Return{(doo[1:])} 
            & (
                | Drawdown[20:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[0]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[1:, 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Drawup[20:,20:10] 
                | Since{Min & index[10]} 
              )
            & Since[ 125:, 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd)
            & [9:,6:3,            15:9,18:12,15:6,21:12,18:3,21:3] 
          }
      )
    | 
        <>AssetEnc{InUni} 
    | 
        Time{long| short}
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.25, 2011.5, 2011.75, 2011.0, 2014.75, 2014.5, 2009.25, 2010.5, 2011.25, 2009.5, 2013.5, 2014.0, 2015.25}), frozenset({2010.0, 2012.25, 2012.5, 2012.75, 2009.75, 2013.25, 2013.75, 2009.0, 2010.75, 2012.0, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (103, 74)
train = (0.96241771086435668, 0.887516063577383)
scores = (0.2737402618275222, 0.37549494608991729)
score = 0.32461760395871975
>>> t = 10300 ===================================================================================================
(pair) len(F.columns) = 32
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 40
    <>~Market & (
      )
    | Market{.& 
        <>( Weight)
        & ( VP| Volatility)
        & [10:,60:] 
      }
    | 
        <>Return{pure&~dd} & VP[1:] 
        | FracRec[21:,62:] 
    | 
        Time{long}
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|Volatility)
            & [5:,10:,10:5,15:10,15:5,20:10] 
          }
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                | Since{Max & index[0,10]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 250:] 
          )
      )
    | 
        | FracRec[21:,250:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.25, 2010.75, 2012.5, 2013.25, 2013.0, 2014.0, 2014.75, 2009.25, 2010.0, 2011.0, 2012.0, 2013.75, 2014.25}), frozenset({2015.0, 2011.5, 2011.75, 2012.75, 2009.0, 2009.75, 2009.5, 2010.5, 2011.25, 2012.25, 2013.5, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 2)
train = (0.33970195075832632, 0.49744958465703171)
scores = (0.34093967637254868, 0.22551730796064259)
score = 0.2832284921665956
>>> t = 10301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 40
    <>~Market & (
      )
    | Market{.& 
        <>( Weight)
        & ( VP| Volatility)
        & [10:,60:] 
      }
    | 
        <>Return{pure&~dd} & VP[1:] 
        | FracRec[21:,62:] 
    | 
        Time{long}
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|Volatility)
            & [5:,10:,10:5,15:10,15:5,20:10] 
          }
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                | Since{Max & index[0,10]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 250:] 
          )
      )
    | 
        | FracRec[21:,250:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.0, 2011.0, 2009.0, 2009.75, 2013.5, 2013.25, 2013.75, 2009.5, 2010.75, 2011.5, 2012.0, 2013.0, 2014.0}), frozenset({2010.5, 2015.0, 2011.75, 2012.5, 2012.75, 2014.5, 2014.25, 2009.25, 2010.25, 2011.25, 2012.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 1)
train = (0.48485728570119913, 0.35108690182172475)
scores = (0.30936038499808899, 0.28359892763869582)
score = 0.2964796563183924
>>> t = 10400 ===================================================================================================
(pair) len(F.columns) = 31
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 34
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc)
            & index[1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd)
            & [5:,10:,15:,15:5,20:10,20:5] 
          }
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 125:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.5, 2010.75, 2012.0, 2009.5, 2009.0, 2009.25, 2009.75, 2010.25, 2011.75, 2012.25, 2013.25, 2014.0, 2015.0}), frozenset({2011.25, 2011.5, 2012.75, 2013.5, 2013.75, 2014.25, 2014.75, 2010.0, 2011.0, 2012.5, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 177)
train = (0.40561568130025549, 0.75919013655476009)
scores = (0.32469290720105154, 0.12782000618837558)
score = 0.22625645669471356
>>> t = 10401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 34
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc)
            & index[1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd)
            & [5:,10:,15:,15:5,20:10,20:5] 
          }
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 125:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.0, 2012.0, 2009.5, 2009.75, 2013.0, 2013.25, 2009.0, 2010.5, 2011.75, 2012.25, 2013.75, 2014.5, 2015.25}), frozenset({2010.25, 2011.25, 2011.5, 2012.75, 2014.25, 2014.0, 2009.25, 2010.75, 2011.0, 2012.5, 2013.5, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (266, 548)
train = (0.7071402874206737, 0.96880785640671618)
scores = (0.39023811252843649, 0.2411060823688034)
score = 0.31567209744861996
>>> t = 10500 ===================================================================================================
(pair) len(F.columns) = 24
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 50
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp5dd)
            & [9:,15:,9:6,15:12,18:15,12:6,            15:9,21:15,12:3,18:9,15:3,18:3,21:3] 
          }
        | ( 
            <>Return{(aoo[10:])} 
            & (
                | Drawdown[1:, 5:,20:, 10:5,20:10] 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [1:,5:,10:,20:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.5, 2015.0, 2011.5, 2012.0, 2012.5, 2014.25, 2009.0, 2010.25, 2011.25, 2012.75, 2014.0, 2015.25}), frozenset({2011.75, 2009.25, 2009.75, 2013.25, 2013.5, 2013.75, 2014.5, 2009.5, 2010.75, 2011.0, 2012.25, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (192, 86)
train = (1.021293868627634, 0.92179591666909355)
scores = (0.38600704298228111, 0.43344310408304798)
score = 0.4097250735326645
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (182, 76)
train = (1.0278149301193753, 0.96286835296893425)
scores = (0.3743151616134045, 0.37009862376095498)
score = 0.37220689268717977
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (262, 160)
train = (1.0578621295057775, 1.0016756498970198)
scores = (0.43439499033658613, 0.49917558323746153)
score = 0.4667852867870238
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (262, 160)
train = (1.0578621295057775, 1.0016756498970198)
scores = (0.43439499033658613, 0.49917558323746153)
score = 0.4667852867870238
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (142, 61)
train = (1.0618380196965567, 1.0233099242970023)
scores = (0.36922362682408272, 0.43083620972368708)
score = 0.4000299182738849
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (80, 151)
train = (1.0132840122504263, 1.4678816867900895)
scores = (0.35130694149456515, 0.39114650274116719)
score = 0.37122672211786617
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (305, 121)
train = (1.1458622279563659, 1.0599664021299309)
scores = (0.43612992801415107, 0.48971426639670557)
score = 0.4629220972054283
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (305, 121)
train = (1.1458622279563659, 1.0599664021299309)
scores = (0.43612992801415107, 0.48971426639670557)
score = 0.4629220972054283
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (57, 47)
train = (1.0075671839957761, 1.0745349412931058)
scores = (0.35305435263733081, 0.42145557327450717)
score = 0.387254962955919
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (56, 70)
train = (1.0444387557573998, 1.4410796248719959)
scores = (0.33334405241143106, 0.39475021864079435)
score = 0.3640471355261127
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (269, 82)
train = (1.1752892368801406, 1.0799007669527287)
scores = (0.43128273587581312, 0.47990081287680864)
score = 0.4555917743763109
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (269, 82)
train = (1.1752892368801406, 1.0799007669527287)
scores = (0.43128273587581312, 0.47990081287680864)
score = 0.4555917743763109
>>> t = 10501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 50
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp5dd)
            & [9:,15:,9:6,15:12,18:15,12:6,            15:9,21:15,12:3,18:9,15:3,18:3,21:3] 
          }
        | ( 
            <>Return{(aoo[10:])} 
            & (
                | Drawdown[1:, 5:,20:, 10:5,20:10] 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [1:,5:,10:,20:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.75, 2015.0, 2011.25, 2009.75, 2013.0, 2009.25, 2010.5, 2011.0, 2012.75, 2013.25, 2014.75, 2015.25}), frozenset({2011.75, 2012.25, 2012.5, 2009.0, 2013.75, 2014.25, 2014.0, 2009.5, 2010.25, 2011.5, 2012.0, 2013.5, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (58, 15)
train = (0.78465576739149612, 0.84023092972762925)
scores = (0.40850379473054765, 0.31927721135728976)
score = 0.3638905030439187
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (47, 46)
train = (0.80986747245819513, 0.97773035102929451)
scores = (0.33016989389811591, 0.29238515536028048)
score = 0.3112775246291982
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (102, 9)
train = (0.89836875847487474, 0.78291201170393765)
scores = (0.45613597913227122, 0.31791923919365556)
score = 0.3870276091629634
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (102, 9)
train = (0.89836875847487474, 0.78291201170393765)
scores = (0.45613597913227122, 0.31791923919365556)
score = 0.3870276091629634
>>> t = 10502 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 50
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp5dd)
            & [9:,15:,9:6,15:12,18:15,12:6,            15:9,21:15,12:3,18:9,15:3,18:3,21:3] 
          }
        | ( 
            <>Return{(aoo[10:])} 
            & (
                | Drawdown[1:, 5:,20:, 10:5,20:10] 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [1:,5:,10:,20:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.0, 2012.75, 2009.0, 2013.0, 2014.25, 2009.75, 2010.5, 2011.75, 2012.5, 2013.75, 2014.5, 2015.0}), frozenset({2011.25, 2011.5, 2012.25, 2009.25, 2013.5, 2014.0, 2009.5, 2010.75, 2011.0, 2012.0, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (290, 76)
train = (1.1272942815657465, 0.7746976023394373)
scores = (0.37752906257726643, 0.39675321273599223)
score = 0.38714113765662933
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (237, 182)
train = (1.110345568389381, 1.1321554783981089)
scores = (0.38877745686411858, 0.36112857912104745)
score = 0.374953017992583
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (495, 76)
train = (1.1574613529737989, 0.78254613493573022)
scores = (0.42110273134565468, 0.44648669555308756)
score = 0.43379471344937115
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (495, 76)
train = (1.1574613529737989, 0.78254613493573022)
scores = (0.42110273134565468, 0.44648669555308756)
score = 0.43379471344937115
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (122, 2)
train = (1.1128408577943016, 0.56715844533970228)
scores = (0.37178709114165198, 0.37345689833931511)
score = 0.3726219947404835
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (56, 121)
train = (0.97661862156329549, 1.2408173944983834)
scores = (0.39272985601458965, 0.3630118145091849)
score = 0.37787083526188725
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (260, 93)
train = (1.1484342927147078, 0.89381279540164649)
scores = (0.40726148865000839, 0.45488357585368044)
score = 0.4310725322518444
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (260, 93)
train = (1.1484342927147078, 0.89381279540164649)
scores = (0.40726148865000839, 0.45488357585368044)
score = 0.4310725322518444
>>> t = 10600 ===================================================================================================
(pair) len(F.columns) = 30
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 49
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|daoc|vp1dd)
            & index[0,1:2,0:2] 
          }
      )
    | Market{.& 
        <>(~Weight)
        & ( VP| Volatility)
        & [60:] 
      }
    | 
#<>#
0
#<>#
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:])} 
            & (
                | Drawdown[10:,20:] 
                | Since{Min&index[0,20]} 
              )
            & Since[21:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( VP| Volatility)
        & [1:,5:,10:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2015.0, 2012.5, 2012.0, 2009.25, 2009.75, 2013.75, 2014.75, 2009.5, 2010.75, 2012.25, 2013.0, 2014.0, 2015.25}), frozenset({2010.0, 2010.5, 2011.25, 2011.5, 2011.75, 2013.5, 2014.25, 2009.0, 2010.25, 2011.0, 2012.75, 2013.25, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 109)
train = (0.46300825377879179, 0.78249715233233019)
scores = (0.3900356377344843, 0.24459938694585265)
score = 0.3173175123401685
>>> t = 10601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 49
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|daoc|vp1dd)
            & index[0,1:2,0:2] 
          }
      )
    | Market{.& 
        <>(~Weight)
        & ( VP| Volatility)
        & [60:] 
      }
    | 
#<>#
0
#<>#
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:])} 
            & (
                | Drawdown[10:,20:] 
                | Since{Min&index[0,20]} 
              )
            & Since[21:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( VP| Volatility)
        & [1:,5:,10:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.5, 2011.0, 2012.75, 2009.0, 2009.5, 2013.75, 2009.75, 2010.0, 2011.75, 2012.5, 2013.0, 2014.25, 2015.0}), frozenset({2010.25, 2011.5, 2012.25, 2013.5, 2014.5, 2014.0, 2009.25, 2010.75, 2011.25, 2012.0, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 1)
train = (0.68491782447461147, 0.47797252204952489)
scores = (0.35797322100555112, 0.27726363499944495)
score = 0.31761842800249807
>>> t = 10700 ===================================================================================================
(pair) len(F.columns) = 82
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 154
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|dcc|doc)
            & index[0,1, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,15:,10:5,15:10,20:15,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[10:]})} 
            & (
                | Drawdown[1:,20:10] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,10]} 
                | Drawup[1, 10:5] 
                | Since{Min & index[10,20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,20:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [5:,10:,10:5,15:5,20:10,20:5] 
          }
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp5dd|Volatility)
            & [5:,15:,15:10,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[20:,20:10] 
                | Since{Max&index[0,10]} 
                | Since{Min&index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.0, 2015.0, 2011.5, 2009.5, 2013.75, 2014.5, 2009.25, 2010.75, 2011.0, 2012.75, 2013.0, 2014.25, 2015.25}), frozenset({2010.25, 2011.25, 2012.25, 2012.5, 2009.75, 2013.5, 2014.0, 2009.0, 2010.5, 2011.75, 2012.0, 2013.25, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (12, 1)
train = (0.64854157746840246, 0.65773584681614816)
scores = (0.35626045514083537, 0.25527261687668057)
score = 0.30576653600875797
>>> t = 10701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 154
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|dcc|doc)
            & index[0,1, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,15:,10:5,15:10,20:15,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[10:]})} 
            & (
                | Drawdown[1:,20:10] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,10]} 
                | Drawup[1, 10:5] 
                | Since{Min & index[10,20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,20:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [5:,10:,10:5,15:5,20:10,20:5] 
          }
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp5dd|Volatility)
            & [5:,15:,15:10,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[20:,20:10] 
                | Since{Max&index[0,10]} 
                | Since{Min&index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2012.25, 2009.25, 2009.0, 2013.0, 2013.5, 2014.75, 2009.75, 2010.25, 2011.25, 2012.0, 2013.25, 2014.0, 2015.25}), frozenset({2010.5, 2010.75, 2011.5, 2011.75, 2012.75, 2014.25, 2009.5, 2010.0, 2011.0, 2012.5, 2013.75, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (71, 92)
train = (0.70114956643270165, 1.0035835133045166)
scores = (0.41704842413698318, 0.46470431755774733)
score = 0.44087637084736525
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (98, 102)
train = (0.81677019915506244, 1.1276382188230063)
scores = (0.42578123484689423, 0.46723309595257728)
score = 0.4465071653997358
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (167, 196)
train = (0.82550722867952087, 1.1376309269332112)
scores = (0.42715719063196905, 0.49506044755734369)
score = 0.4611088190946564
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (167, 196)
train = (0.82550722867952087, 1.1376309269332112)
scores = (0.42715719063196905, 0.49506044755734369)
score = 0.4611088190946564
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (74, 143)
train = (0.80904045984836037, 1.3226880059048072)
scores = (0.42669657239747866, 0.48327098875072116)
score = 0.45498378057409994
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (216, 111)
train = (1.1581396195945362, 1.4646952428007218)
scores = (0.46989143785055154, 0.48379159556589119)
score = 0.4768415167082214
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (211, 243)
train = (0.96386120018344179, 1.3251588240016003)
scores = (0.44108816340220119, 0.49796926804487285)
score = 0.46952871572353705
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (216, 111)
train = (1.1581396195945362, 1.4646952428007218)
scores = (0.46989143785055154, 0.48379159556589119)
score = 0.4768415167082214
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (103, 153)
train = (0.94683576868620889, 1.5083753272057832)
scores = (0.42946780275427315, 0.47950914725443117)
score = 0.4544884750043522
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (232, 107)
train = (1.3480612555115397, 1.7202772353798994)
scores = (0.47412478610280528, 0.47553078147969846)
score = 0.4748277837912519
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (136, 375)
train = (0.94203182925466633, 1.6147791473184532)
scores = (0.44293345386204236, 0.50160289568310024)
score = 0.4722681747725713
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (232, 107)
train = (1.3480612555115397, 1.7202772353798994)
scores = (0.47412478610280528, 0.47553078147969846)
score = 0.4748277837912519
>>> t = 10702 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 154
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|dcc|doc)
            & index[0,1, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,15:,10:5,15:10,20:15,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[10:]})} 
            & (
                | Drawdown[1:,20:10] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,10]} 
                | Drawup[1, 10:5] 
                | Since{Min & index[10,20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,20:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [5:,10:,10:5,15:5,20:10,20:5] 
          }
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp5dd|Volatility)
            & [5:,15:,15:10,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[20:,20:10] 
                | Since{Max&index[0,10]} 
                | Since{Min&index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.25, 2010.75, 2010.0, 2013.75, 2013.0, 2014.25, 2014.75, 2014.0, 2009.0, 2010.5, 2011.75, 2013.5, 2014.5}), frozenset({2011.0, 2011.25, 2012.25, 2012.5, 2012.75, 2009.25, 2009.75, 2009.5, 2015.0, 2011.5, 2012.0, 2013.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (130, 326)
train = (0.92080005631942818, 1.132546210393627)
scores = (0.38593655237734709, 0.37175269279992662)
score = 0.3788446225886368
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (190, 247)
train = (1.0323980876950265, 1.1518823374767748)
scores = (0.37292696305473089, 0.35569969231693077)
score = 0.3643133276858308
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (251, 1)
train = (1.0082320354432737, 0.52204113505392324)
scores = (0.40628680957365049, 0.42376009788792035)
score = 0.4150234537307854
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (251, 1)
train = (1.0082320354432737, 0.52204113505392324)
scores = (0.40628680957365049, 0.42376009788792035)
score = 0.4150234537307854
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (145, 1)
train = (1.0791085508804121, 0.60882594115901267)
scores = (0.39967433016309978, 0.37329752963307072)
score = 0.3864859298980853
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (217, 3)
train = (1.2890793624359402, 0.66741412682039591)
scores = (0.38147775917173621, 0.36207553901504475)
score = 0.3717766490933905
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (188, 1)
train = (1.0268237246178058, 0.59629577281905866)
scores = (0.40376682102289024, 0.42307847072072269)
score = 0.41342264587180644
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (188, 1)
train = (1.0268237246178058, 0.59629577281905866)
scores = (0.40376682102289024, 0.42307847072072269)
score = 0.41342264587180644
>>> t = 10800 ===================================================================================================
(pair) len(F.columns) = 68
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 117
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|doo|doc|vp1dd)
            & index[0,2, 0:1,0:2] 
          }
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0]} 
                | Drawup[1,20:] 
                | Since{Min & index[0]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:]
            & (
                <>Drawdown[20:, 10:5,20:10] 
                | Since{Max & index[10]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc)
            & index[2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [10:5,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,20:10] 
                | Since{Max&index[20]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[10]
        & ay[10]
      }
len(samps) = 2
(frozenset({2011.5, 2012.0, 2009.5, 2013.75, 2013.25, 2014.5, 2009.25, 2015.25, 2011.25, 2012.25, 2013.5, 2014.75, 2015.0}), frozenset({2010.0, 2010.5, 2010.75, 2011.75, 2012.75, 2009.75, 2014.0, 2009.0, 2010.25, 2011.0, 2012.5, 2013.0, 2014.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (83, 166)
train = (1.0355550825538031, 1.0156993568637489)
scores = (0.23106698980689871, 0.31254621971289126)
score = 0.271806604759895
>>> t = 10801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 117
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|doo|doc|vp1dd)
            & index[0,2, 0:1,0:2] 
          }
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0]} 
                | Drawup[1,20:] 
                | Since{Min & index[0]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:]
            & (
                <>Drawdown[20:, 10:5,20:10] 
                | Since{Max & index[10]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc)
            & index[2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [10:5,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,20:10] 
                | Since{Max&index[20]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[10]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.5, 2010.75, 2015.25, 2011.25, 2011.75, 2014.0, 2014.75, 2009.0, 2010.25, 2011.0, 2012.25, 2014.25, 2015.0}), frozenset({2012.5, 2012.75, 2009.25, 2009.75, 2013.25, 2013.5, 2013.75, 2009.5, 2010.0, 2011.5, 2012.0, 2013.0, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (268, 80)
train = (1.120573486337173, 1.0089217549898228)
scores = (0.33944582285277597, 0.26588855131912748)
score = 0.30266718708595175
>>> t = 10900 ===================================================================================================
(pair) len(F.columns) = 34
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......