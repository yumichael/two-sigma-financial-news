>>> t = 0 ===================================================================================================
(pair) len(F.columns) = 116
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 257
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:,10:5,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,125:,250:] 
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:,10:5,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,125:,250:] 
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd)
            & index[2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo|vp1dd|vp5dd|Volatility)
            & [10:,10:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.25, 2011.0, 2012.5, 2009.75, 2013.25, 2014.0, 2009.25, 2010.0, 2011.5, 2012.25, 2013.75, 2014.75, 2015.0}), frozenset({2010.75, 2011.75, 2012.75, 2009.0, 2013.5, 2014.25, 2009.5, 2010.5, 2011.25, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (243, 52)
train = (1.1839463096147378, 0.87566176008019492)
scores = (0.26687738112090453, 0.3605979724692609)
score = 0.3137376767950827
holdout = (0.6079646050835283, 0.5800119616238479)
>>> t = 1 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 257
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:,10:5,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,125:,250:] 
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:,10:5,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,125:,250:] 
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd)
            & index[2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo|vp1dd|vp5dd|Volatility)
            & [10:,10:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.75, 2010.0, 2012.25, 2012.0, 2009.0, 2013.0, 2009.25, 2010.25, 2011.25, 2012.75, 2013.25, 2014.0, 2015.25}), frozenset({2011.5, 2011.75, 2009.75, 2013.75, 2014.5, 2014.25, 2009.5, 2010.5, 2011.0, 2012.5, 2013.5, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (66, 139)
train = (0.87508180186556395, 1.2101296933232504)
scores = (0.47157293228631508, 0.43729693124548508)
score = 0.4544349317659001
holdout = (0.6023269660008774, 0.6929210185436985)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (105, 273)
train = (1.0047461779562408, 1.5007231313261398)
scores = (0.46443603628689445, 0.48730247819996397)
score = 0.4758692572434292
holdout = (0.6259159522268255, 0.7508754351779952)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (110, 293)
train = (0.9681200956292354, 1.3227264566790682)
scores = (0.45320642829409047, 0.4299845324473236)
score = 0.44159548037070706
holdout = (0.634688366881688, 0.7087046627895676)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (105, 273)
train = (1.0047461779562408, 1.5007231313261398)
scores = (0.46443603628689445, 0.48730247819996397)
score = 0.4758692572434292
holdout = (0.6259159522268255, 0.7508754351779952)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (106, 174)
train = (1.130657000463573, 1.4585773163914051)
scores = (0.46490593801037078, 0.44991098187255762)
score = 0.4574084599414642
holdout = (0.6725309902686497, 0.7488976157419185)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 157)
train = (0.75008281222689654, 1.5838035021876191)
scores = (0.46390181513441903, 0.47529352633837402)
score = 0.4695976707363965
holdout = (0.5399964773511416, 0.7724017112215579)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (137, 194)
train = (1.0695035008968201, 1.3081080191125591)
scores = (0.46485372406392667, 0.43777904166920628)
score = 0.4513163828665665
holdout = (0.6702922890589889, 0.7109364928148015)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (2, 157)
train = (0.75008281222689654, 1.5838035021876191)
scores = (0.46390181513441903, 0.47529352633837402)
score = 0.4695976707363965
holdout = (0.5399964773511416, 0.7724017112215579)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (89, 135)
train = (1.1490336507462979, 1.5011772164343351)
scores = (0.46309577271375157, 0.45639213588176225)
score = 0.45974395429775694
holdout = (0.6763382485371124, 0.7645386646092485)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 192)
train = (0.84238627637294328, 1.9500404024083779)
scores = (0.4961764752716733, 0.47973243093059492)
score = 0.4879544531011341
holdout = (0.5770935152778449, 0.8084603692926867)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (120, 162)
train = (1.1199279468681209, 1.345258159403357)
scores = (0.47628707533454256, 0.4429795060287357)
score = 0.45963329068163916
holdout = (0.6865727303726198, 0.7261651089166018)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (1, 192)
train = (0.84238627637294328, 1.9500404024083779)
scores = (0.4961764752716733, 0.47973243093059492)
score = 0.4879544531011341
holdout = (0.5770935152778449, 0.8084603692926867)
>>> t = 2 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 257
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:,10:5,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,125:,250:] 
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:,10:5,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,125:,250:] 
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd)
            & index[2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo|vp1dd|vp5dd|Volatility)
            & [10:,10:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2011.75, 2012.0, 2009.25, 2009.75, 2014.75, 2014.0, 2009.0, 2010.0, 2011.0, 2012.5, 2013.75, 2014.5, 2015.0}), frozenset({2010.5, 2010.75, 2011.5, 2012.75, 2013.25, 2013.5, 2009.5, 2010.25, 2011.25, 2012.25, 2013.0, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (211, 151)
train = (1.1401134739797825, 1.473250457153942)
scores = (0.54568036484849303, 0.46229387886481871)
score = 0.5039871218566558
holdout = (0.6740901928208234, 0.7526553862814226)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (5, 172)
train = (0.66881026185442449, 1.6421879965519204)
scores = (0.43212195357636335, 0.42837754339209366)
score = 0.4302497484842285
holdout = (0.5026468017407688, 0.7746833211323718)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (220, 183)
train = (1.1012216222223445, 1.4149543343736557)
scores = (0.51333303221800741, 0.48495811317376936)
score = 0.4991455726958884
holdout = (0.678978699193588, 0.7622564672105108)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (211, 151)
train = (1.1401134739797825, 1.473250457153942)
scores = (0.54568036484849303, 0.46229387886481871)
score = 0.5039871218566558
holdout = (0.6740901928208234, 0.7526553862814226)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (194, 137)
train = (1.2378666727713399, 1.6418926762219894)
scores = (0.53295518860119551, 0.44793220258874283)
score = 0.49044369559496914
holdout = (0.6896460409945554, 0.7927003104110205)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (258, 148)
train = (1.4787485009823358, 1.885144260174088)
scores = (0.54464773386014753, 0.41141596681210557)
score = 0.47803185033612655
holdout = (0.71646886190449, 0.8076844640587645)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (184, 91)
train = (1.1665918132130313, 1.2631796180917336)
scores = (0.49866815416801941, 0.4778528738671689)
score = 0.4882605140175942
holdout = (0.6920510008685027, 0.7256610508476447)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (194, 137)
train = (1.2378666727713399, 1.6418926762219894)
scores = (0.53295518860119551, 0.44793220258874283)
score = 0.49044369559496914
holdout = (0.6896460409945554, 0.7927003104110205)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (140, 151)
train = (1.2680565589252573, 1.8048443064093644)
scores = (0.52764683040037086, 0.45660223113611731)
score = 0.4921245307682441
holdout = (0.7057813023498262, 0.8167938323165648)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (156, 191)
train = (1.5042949737310298, 2.2459926062015185)
scores = (0.53326170605571332, 0.41515018429883255)
score = 0.47420594517727294
holdout = (0.7135824024951186, 0.8347997199256209)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (307, 89)
train = (1.3446209356215661, 1.3555816298305061)
scores = (0.50663250986595576, 0.48621027439946402)
score = 0.49642139213270986
holdout = (0.7207296560123485, 0.7476240326773257)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (307, 89)
train = (1.3446209356215661, 1.3555816298305061)
scores = (0.50663250986595576, 0.48621027439946402)
score = 0.49642139213270986
holdout = (0.7207296560123485, 0.7476240326773257)
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (174, 107)
train = (1.4012647024500484, 1.7786449496830159)
scores = (0.52889641336222437, 0.45820419993129935)
score = 0.49355030664676186
holdout = (0.7241571795981718, 0.8122394031804999)
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (159, 138)
train = (1.6316877776767806, 2.2813100665639205)
scores = (0.5177577517840114, 0.42199663899465845)
score = 0.4698771953893349
holdout = (0.727898211510617, 0.8455225940979957)
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (308, 110)
train = (1.4013688600147256, 1.5007945462895074)
scores = (0.51654122602952934, 0.48215460143279315)
score = 0.4993479137311613
holdout = (0.7343647861433955, 0.7779498240734012)
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (308, 110)
train = (1.4013688600147256, 1.5007945462895074)
scores = (0.51654122602952934, 0.48215460143279315)
score = 0.4993479137311613
holdout = (0.7343647861433955, 0.7779498240734012)
>>> t = 100 ===================================================================================================
(pair) len(F.columns) = 53
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 160
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|daoc)
            & index[0,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [10:5,15:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Drawup[1:, 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|daoc)
            & index[0,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [10:5,15:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Drawup[1:, 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2015.0, 2011.25, 2011.5, 2011.75, 2012.0, 2014.5, 2009.25, 2010.75, 2011.0, 2009.0, 2013.5, 2014.0, 2015.25}), frozenset({2010.25, 2010.5, 2012.5, 2012.75, 2009.75, 2013.25, 2013.75, 2014.25, 2009.5, 2010.0, 2012.25, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (188, 287)
train = (1.0582649024103612, 1.3438918095681034)
scores = (0.44799122586972168, 0.55849948728655885)
score = 0.5032453565781403
holdout = (0.6609173656527654, 0.7736496371022311)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (130, 169)
train = (1.049092884327981, 1.301644479506433)
scores = (0.457518680534449, 0.46943349821205799)
score = 0.46347608937325346
holdout = (0.6432496637289837, 0.7273198948591718)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (187, 430)
train = (1.0627677035431238, 1.3691409440675695)
scores = (0.45005198694174497, 0.5706864276404513)
score = 0.5103692072910981
holdout = (0.6682737146919591, 0.7863626436097998)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (187, 430)
train = (1.0627677035431238, 1.3691409440675695)
scores = (0.45005198694174497, 0.5706864276404513)
score = 0.5103692072910981
holdout = (0.6682737146919591, 0.7863626436097998)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (143, 304)
train = (1.1480791455991686, 1.5785740093908014)
scores = (0.46213385831238984, 0.56319872239821567)
score = 0.5126662903553028
holdout = (0.6889632329850549, 0.8078260049172986)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (157, 229)
train = (1.3272371751796324, 1.7784894825147972)
scores = (0.48183135536556732, 0.47416803779488464)
score = 0.477999696580226
holdout = (0.7078207589730241, 0.8000953076504732)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (357, 528)
train = (1.3040609974821591, 1.5749619636223049)
scores = (0.47297901676420778, 0.58369347213503797)
score = 0.5283362444496229
holdout = (0.7328104092907651, 0.8142510388914411)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (357, 528)
train = (1.3040609974821591, 1.5749619636223049)
scores = (0.47297901676420778, 0.58369347213503797)
score = 0.5283362444496229
holdout = (0.7328104092907651, 0.8142510388914411)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (115, 323)
train = (1.2046257404977612, 1.7348562393045421)
scores = (0.46679980353080847, 0.56604496131218163)
score = 0.5164223824214951
holdout = (0.7059800405687859, 0.8243641949072373)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (102, 201)
train = (1.369956385495726, 2.0220938475501957)
scores = (0.49099262635268076, 0.47883776710106113)
score = 0.48491519672687095
holdout = (0.7185246598372317, 0.8244240403815939)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (381, 379)
train = (1.42045342423247, 1.5634156252999658)
scores = (0.48367669467196334, 0.5827246640570054)
score = 0.5332006793644843
holdout = (0.7572204621129643, 0.8177331872891452)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (381, 379)
train = (1.42045342423247, 1.5634156252999658)
scores = (0.48367669467196334, 0.5827246640570054)
score = 0.5332006793644843
holdout = (0.7572204621129643, 0.8177331872891452)
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (90, 262)
train = (1.1961204183600787, 1.7673196858320481)
scores = (0.46417613402523117, 0.58890269750735746)
score = 0.5265394157662944
holdout = (0.7007652707033107, 0.8340589999446031)
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (92, 38)
train = (1.4934843109132998, 1.6185425986634876)
scores = (0.49781538382617263, 0.42504478704497206)
score = 0.46143008543557235
holdout = (0.7368567481241991, 0.7748331183665814)
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (120, 389)
train = (1.1860632136893758, 1.6612983444730609)
scores = (0.45508757919851062, 0.5951755927450012)
score = 0.5251315859717559
holdout = (0.7084842480485399, 0.835148873119067)
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (90, 262)
train = (1.1961204183600787, 1.7673196858320481)
scores = (0.46417613402523117, 0.58890269750735746)
score = 0.5265394157662944
holdout = (0.7007652707033107, 0.8340589999446031)
>>> t = 101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 160
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|daoc)
            & index[0,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [10:5,15:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Drawup[1:, 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|daoc)
            & index[0,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [10:5,15:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Drawup[1:, 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2011.25, 2011.5, 2012.5, 2009.5, 2009.75, 2013.75, 2009.25, 2010.75, 2011.0, 2012.75, 2013.25, 2014.25, 2015.0}), frozenset({2010.25, 2010.5, 2012.25, 2013.5, 2014.5, 2014.0, 2009.0, 2010.0, 2011.75, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (31, 1)
train = (0.81616592405976185, 0.66388330837994447)
scores = (0.3164539992227608, 0.25151115792512307)
score = 0.28398257857394194
holdout = (0.5285794949693695, 0.41918554145956544)
>>> t = 102 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 160
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|daoc)
            & index[0,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [10:5,15:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Drawup[1:, 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|daoc)
            & index[0,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [10:5,15:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Drawup[1:, 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.5, 2010.25, 2012.25, 2012.5, 2009.75, 2009.0, 2009.5, 2010.75, 2011.5, 2012.0, 2013.75, 2014.5, 2015.25}), frozenset({2011.25, 2011.75, 2013.25, 2013.5, 2014.25, 2014.0, 2009.25, 2010.0, 2011.0, 2012.75, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (198, 1)
train = (1.1261893602002084, 0.67346151033760848)
scores = (0.44386530425651183, 0.28339458431644771)
score = 0.36362994428647977
holdout = (0.6797595302160518, 0.44720756763296055)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (122, 1)
train = (1.0645988213038646, 0.60536350435092889)
scores = (0.43879925740009196, 0.25162044745387041)
score = 0.3452098524269812
holdout = (0.6532080090818728, 0.4097796394587468)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (301, 1)
train = (1.1711591855941057, 0.62843473742209077)
scores = (0.45239782382295912, 0.2801099775195387)
score = 0.3662539006712489
holdout = (0.6997557869333888, 0.4232744282569685)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (301, 1)
train = (1.1711591855941057, 0.62843473742209077)
scores = (0.45239782382295912, 0.2801099775195387)
score = 0.3662539006712489
holdout = (0.6997557869333888, 0.4232744282569685)
>>> t = 103 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 160
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|daoc)
            & index[0,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [10:5,15:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Drawup[1:, 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|daoc)
            & index[0,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd)
            & [10:5,15:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Since{Max & index[5]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Drawup[1:, 10:5] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2011.0, 2011.75, 2012.75, 2012.5, 2013.75, 2014.5, 2009.25, 2010.5, 2011.5, 2012.25, 2013.0, 2014.0, 2015.25}), frozenset({2010.25, 2010.75, 2009.0, 2009.75, 2013.5, 2014.25, 2009.5, 2010.0, 2011.25, 2012.0, 2013.25, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (94, 28)
train = (1.0570925811766001, 0.8404372566406747)
scores = (0.2794453161573639, 0.41157849509996014)
score = 0.345511905628662
holdout = (0.5596260531550077, 0.5883689943840599)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (159, 152)
train = (1.3267848534580782, 1.1415943285866985)
scores = (0.24506161296116186, 0.41760440859543674)
score = 0.3313330107782993
holdout = (0.6430118176623553, 0.6770460316377949)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (70, 26)
train = (0.97399486902684485, 0.77832656266369149)
scores = (0.33999139172574455, 0.37361076563367634)
score = 0.35680107867971045
holdout = (0.5635815767901603, 0.5448912062660825)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (70, 26)
train = (0.97399486902684485, 0.77832656266369149)
scores = (0.33999139172574455, 0.37361076563367634)
score = 0.35680107867971045
holdout = (0.5635815767901603, 0.5448912062660825)
>>> t = 200 ===================================================================================================
(pair) len(F.columns) = 103
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 214
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:,20:10] 
                | Since{Max&index[0]} 
                | Drawup[ 10:5] 
                | Since{Min&index[0,5]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[10:]
            & (
                | Since{Max & index[5,20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & ( Volatility)
        & [5:,10:] 
      }
    | 
        Time{long}
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[1,10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2011.0, 2011.75, 2011.25, 2012.25, 2009.25, 2009.5, 2013.0, 2013.25, 2009.0, 2011.5, 2012.0, 2013.5, 2014.5}), frozenset({2010.0, 2010.5, 2010.75, 2015.0, 2012.75, 2014.25, 2014.0, 2009.75, 2010.25, 2012.5, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (30, 15)
train = (0.67365901626507607, 0.77554066742637962)
scores = (0.24917662499116333, 0.28649352076484608)
score = 0.2678350728780047
holdout = (0.4240807146827434, 0.4916387882097438)
>>> t = 201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 214
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:,20:10] 
                | Since{Max&index[0]} 
                | Drawup[ 10:5] 
                | Since{Min&index[0,5]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[10:]
            & (
                | Since{Max & index[5,20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & ( Volatility)
        & [5:,10:] 
      }
    | 
        Time{long}
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[1,10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.5, 2011.25, 2012.0, 2009.75, 2013.0, 2013.5, 2009.0, 2010.0, 2011.75, 2012.5, 2013.25, 2014.5, 2015.0}), frozenset({2010.75, 2011.5, 2012.75, 2009.25, 2014.25, 2014.0, 2009.5, 2010.25, 2011.0, 2012.25, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (28, 196)
train = (0.96894173609910694, 1.0931009450423128)
scores = (0.27392507688587975, 0.18573015647661295)
score = 0.22982761668124635
holdout = (0.5373090847898331, 0.5729473560696156)
>>> t = 300 ===================================================================================================
(pair) len(F.columns) = 22
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 46
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|daoc|vp1dd)
            & index[1, 0:1,1:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                | Drawdown[20:,20:10] 
                | Since{Max&index[0,20]} 
                | Since{Min&index[0,5,10,20]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | Return{rr} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.75, 2011.25, 2012.5, 2012.25, 2009.0, 2013.0, 2009.75, 2010.5, 2011.5, 2012.0, 2013.5, 2014.0, 2015.0}), frozenset({2010.25, 2011.75, 2009.25, 2013.75, 2014.5, 2014.25, 2009.5, 2010.0, 2011.0, 2012.75, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 1)
train = (0.60310638196675415, 0.44558617957077412)
scores = (0.22162400140900451, 0.22417712262352821)
score = 0.22290056201626635
holdout = (0.3188829801280916, 0.3043589801888151)
>>> t = 301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 46
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|daoc|vp1dd)
            & index[1, 0:1,1:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                | Drawdown[20:,20:10] 
                | Since{Max&index[0,20]} 
                | Since{Min&index[0,5,10,20]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | Return{rr} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.5, 2011.25, 2011.75, 2012.0, 2013.5, 2014.75, 2009.75, 2010.0, 2011.5, 2012.5, 2013.25, 2014.25, 2015.0}), frozenset({2010.75, 2012.75, 2009.0, 2009.25, 2013.75, 2014.0, 2009.5, 2010.25, 2011.0, 2012.25, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (7, 5)
train = (0.69629556868818654, 0.27672410803266478)
scores = (0.24422391443155761, 0.18775436344127835)
score = 0.21598913893641797
holdout = (0.4117032220395804, 0.20073299468947794)
>>> t = 400 ===================================================================================================
(pair) len(F.columns) = 41
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 64
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo|doc|vp1dd)
            & index[0,2, 0:1,1:2] 
          }
      )
    | 
        Time{long}
#<>#
    <>~Market & (
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                | Since{Max & index[0,10]} 
                | Drawup[20:10] 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2011.25, 2011.75, 2011.5, 2012.0, 2009.75, 2014.75, 2009.25, 2010.25, 2011.0, 2012.25, 2013.5, 2014.0, 2015.0}), frozenset({2010.5, 2010.75, 2012.75, 2009.0, 2013.25, 2013.75, 2014.25, 2009.5, 2010.0, 2012.5, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (73, 3)
train = (1.2742689606721085, 0.65216066647107795)
scores = (0.16576321206986308, 0.20374334370649377)
score = 0.1847532778881784
holdout = (0.5523650304271216, 0.3446906120736236)
>>> t = 401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 64
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo|doc|vp1dd)
            & index[0,2, 0:1,1:2] 
          }
      )
    | 
        Time{long}
#<>#
    <>~Market & (
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                | Since{Max & index[0,10]} 
                | Drawup[20:10] 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2012.0, 2009.25, 2009.5, 2013.0, 2014.5, 2014.25, 2009.0, 2010.25, 2011.5, 2012.25, 2013.5, 2014.75}), frozenset({2010.0, 2015.0, 2011.25, 2011.75, 2012.75, 2013.75, 2009.75, 2010.5, 2011.0, 2012.5, 2013.25, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 2)
train = (0.70372969085222059, 0.53862662710670506)
scores = (0.079877868709571989, 0.14555764808865296)
score = 0.11271775839911247
holdout = (0.3113331652374538, 0.30241435878089934)
>>> t = 500 ===================================================================================================
(pair) len(F.columns) = 14
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 28
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(Volatility)
            & [10:5,15:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[20:, 10:5,20:10] 
                | Since{Max&index[5]} 
                | Since{Min&index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [1:,5:,10:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.75, 2011.5, 2011.75, 2012.75, 2013.75, 2013.0, 2009.0, 2010.0, 2011.0, 2012.5, 2013.5, 2014.75, 2015.0}), frozenset({2010.5, 2012.25, 2009.25, 2009.75, 2014.25, 2014.0, 2009.5, 2010.25, 2011.25, 2012.0, 2013.25, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (11, 283)
train = (0.75831846272794412, 1.006714803079273)
scores = (0.28859033584807697, 0.23582007650433806)
score = 0.2622052061762075
holdout = (0.45035491234098324, 0.5607431068200863)
>>> t = 501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 28
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(Volatility)
            & [10:5,15:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[20:, 10:5,20:10] 
                | Since{Max&index[5]} 
                | Since{Min&index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [1:,5:,10:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.0, 2012.25, 2012.0, 2009.75, 2013.25, 2014.25, 2009.0, 2010.5, 2011.75, 2012.5, 2013.75, 2014.0, 2015.25}), frozenset({2010.75, 2011.25, 2011.5, 2009.25, 2013.5, 2014.5, 2009.5, 2010.25, 2011.0, 2012.75, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (119, 305)
train = (1.0743860602866639, 1.1344031910996148)
scores = (0.2715714818603237, 0.20803041978272177)
score = 0.23980095082152275
holdout = (0.5719584624352746, 0.5833805945162144)
>>> t = 600 ===================================================================================================
(pair) len(F.columns) = 34
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 74
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|daoc|vp1dd)
            & index[1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd)
            & [3:,9:,15:,6:3,12:9,15:12,21:18,9:3,12:6,            15:9,18:12,21:15,12:3,15:6,18:9,21:12,18:6,21:9,18:3] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                | Drawdown[1:,20:, 10:5,20:10] 
                | Since{Max & index[0]} 
                | Drawup[20:10] 
                | Since{Min & index[0]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & ( Volatility)
        & [20:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2011.75, 2011.5, 2012.5, 2009.25, 2014.25, 2014.0, 2009.0, 2010.75, 2011.0, 2009.75, 2013.5, 2014.75, 2015.0}), frozenset({2010.25, 2010.5, 2012.25, 2012.75, 2013.25, 2013.75, 2009.5, 2010.0, 2011.25, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 23)
train = (0.52002999361814028, 0.8776305598294446)
scores = (0.30986820720322544, 0.32599867491923673)
score = 0.3179334410612311
holdout = (0.35724267613993543, 0.5217224170305291)
>>> t = 601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 74
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|daoc|vp1dd)
            & index[1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd)
            & [3:,9:,15:,6:3,12:9,15:12,21:18,9:3,12:6,            15:9,18:12,21:15,12:3,15:6,18:9,21:12,18:6,21:9,18:3] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                | Drawdown[1:,20:, 10:5,20:10] 
                | Since{Max & index[0]} 
                | Drawup[20:10] 
                | Since{Min & index[0]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & ( Volatility)
        & [20:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.5, 2011.75, 2012.0, 2012.75, 2009.75, 2014.0, 2009.0, 2010.75, 2011.25, 2009.5, 2013.75, 2014.75, 2015.0}), frozenset({2010.25, 2011.5, 2012.5, 2013.25, 2013.5, 2014.25, 2009.25, 2010.0, 2011.0, 2012.25, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (104, 2)
train = (1.0572948028063172, 0.63509846221110311)
scores = (0.31262593567955704, 0.24948702251089483)
score = 0.2810564790952259
holdout = (0.595881166069034, 0.42543423563438243)
>>> t = 700 ===================================================================================================
(pair) len(F.columns) = 58
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 115
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo|vp1dd|vp5dd|Volatility)
            & [5:,10:,15:,15:10,20:15,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,10:] 
      }
    | 
    | 
        <>AssetEnc{InUni} 
    | 
        <>FaceValue{Volume| Close} 
        | Return{mix[4,7,14,15,17,18]}
        | Return{ af} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.75, 2015.0, 2011.25, 2012.5, 2009.75, 2009.0, 2010.5, 2011.5, 2012.0, 2013.75, 2014.0, 2015.25}), frozenset({2011.75, 2012.75, 2009.25, 2013.25, 2013.5, 2014.25, 2014.75, 2009.5, 2010.0, 2011.0, 2012.25, 2013.0, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (48, 1)
train = (0.97421874484837567, 0.67585812847907001)
scores = (0.40053203204303939, 0.21687069259355382)
score = 0.3087013623182966
holdout = (0.6075468666528002, 0.4212146796981257)
>>> t = 701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 115
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo|vp1dd|vp5dd|Volatility)
            & [5:,10:,15:,15:10,20:15,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,10:] 
      }
    | 
    | 
        <>AssetEnc{InUni} 
    | 
        <>FaceValue{Volume| Close} 
        | Return{mix[4,7,14,15,17,18]}
        | Return{ af} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[20]
      }
len(samps) = 2
(frozenset({2015.0, 2011.75, 2012.25, 2013.25, 2014.75, 2014.0, 2009.75, 2010.0, 2011.5, 2012.5, 2013.0, 2014.25, 2015.25}), frozenset({2010.5, 2010.75, 2011.25, 2012.75, 2009.0, 2009.25, 2013.75, 2009.5, 2010.25, 2011.0, 2012.0, 2013.5, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (42, 350)
train = (1.0885364509782822, 1.2274293782980654)
scores = (0.25868407151476325, 0.33027013193107374)
score = 0.2944771017229185
holdout = (0.5894085479342019, 0.6546333832567303)
>>> t = 800 ===================================================================================================
(pair) len(F.columns) = 23
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 46
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|daoc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [5:,10:,15:,10:5,15:10,20:15,20:10,20:5] 
          }
      )
    | 
        Time{ short}
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.0, 2011.5, 2012.0, 2012.5, 2014.5, 2014.75, 2009.25, 2010.5, 2011.0, 2009.0, 2013.75, 2014.0, 2015.25}), frozenset({2010.75, 2011.75, 2012.75, 2009.75, 2013.25, 2013.5, 2009.5, 2010.25, 2011.25, 2012.25, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (107, 61)
train = (0.64323973966501136, 0.59829799736461364)
scores = (0.36395093531546552, 0.31493919413486771)
score = 0.3394450647251666
holdout = (0.471875934862204, 0.4046701145849723)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (96, 252)
train = (0.65810126321284479, 1.1866140064123432)
scores = (0.36202833749181401, 0.32569187608276484)
score = 0.3438601067872894
holdout = (0.47671466230313586, 0.6039778022866713)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (166, 351)
train = (0.62043735532257693, 0.81124272345762394)
scores = (0.35943346619998895, 0.32406432188745893)
score = 0.34174889404372394
holdout = (0.4617928656135194, 0.480974775924325)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (96, 252)
train = (0.65810126321284479, 1.1866140064123432)
scores = (0.36202833749181401, 0.32569187608276484)
score = 0.3438601067872894
holdout = (0.47671466230313586, 0.6039778022866713)
>>> t = 801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 46
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|daoc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [5:,10:,15:,10:5,15:10,20:15,20:10,20:5] 
          }
      )
    | 
        Time{ short}
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2012.75, 2012.0, 2009.0, 2009.25, 2013.0, 2014.5, 2014.25, 2009.75, 2011.75, 2012.25, 2013.25, 2014.75, 2015.0}), frozenset({2010.25, 2010.5, 2010.75, 2011.25, 2011.5, 2013.75, 2009.5, 2010.0, 2011.0, 2012.5, 2013.5, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (112, 245)
train = (0.64599805688886358, 0.9413640132104043)
scores = (0.43184026911290346, 0.25712292716276791)
score = 0.3444815981378357
holdout = (0.4904148845519927, 0.46914774508724044)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (66, 77)
train = (0.63164174441920151, 0.85035486233589386)
scores = (0.44126729589294389, 0.24694040558251315)
score = 0.34410385073772853
holdout = (0.47239233556221244, 0.44727292711414035)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (87, 612)
train = (0.52297374394595109, 1.0271259812558582)
scores = (0.43115203053499096, 0.27228733551647882)
score = 0.35171968302573486
holdout = (0.43843490589875306, 0.502849444528039)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (87, 612)
train = (0.52297374394595109, 1.0271259812558582)
scores = (0.43115203053499096, 0.27228733551647882)
score = 0.35171968302573486
holdout = (0.43843490589875306, 0.502849444528039)
>>> t = 900 ===================================================================================================
(pair) len(F.columns) = 54
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 54
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo)
            & index[2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|vp5dd)
            & [10:,15:,10:5,15:10,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Drawup[20:, 10:5] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.0, 2010.25, 2010.75, 2011.25, 2011.0, 2011.75, 2013.5, 2009.25, 2010.5, 2011.5, 2012.25, 2013.25, 2015.0}), frozenset({2012.5, 2012.75, 2009.0, 2009.75, 2013.75, 2014.5, 2014.25, 2014.0, 2009.5, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (133, 230)
train = (0.84443757915440121, 0.94329551814780199)
scores = (0.42504157628552736, 0.38253015385686856)
score = 0.40378586507119796
holdout = (0.544850613571153, 0.5837954120213589)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (73, 211)
train = (0.85479217452976697, 0.91330030574263832)
scores = (0.39668657134667817, 0.36198239201340676)
score = 0.37933448168004247
holdout = (0.542486057462942, 0.5690506558754536)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (193, 206)
train = (0.8451909303895323, 0.87457279991099024)
scores = (0.44195795145660338, 0.39525351850100471)
score = 0.41860573497880404
holdout = (0.5429531837098995, 0.5646210719646553)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (193, 206)
train = (0.8451909303895323, 0.87457279991099024)
scores = (0.44195795145660338, 0.39525351850100471)
score = 0.41860573497880404
holdout = (0.5429531837098995, 0.5646210719646553)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (90, 157)
train = (0.87946027148310313, 0.99475369913745737)
scores = (0.43426474848468255, 0.38515124016827307)
score = 0.4097079943264778
holdout = (0.5596209471515746, 0.5999578720572132)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (70, 141)
train = (1.0378828989680324, 0.9802771794916868)
scores = (0.40065713772752809, 0.3664542580552454)
score = 0.38355569789138677
holdout = (0.6022066991051144, 0.592742844186741)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (89, 190)
train = (0.77111612561720333, 0.9365446149787352)
scores = (0.44523444479516305, 0.39957476372313994)
score = 0.4224046042591515
holdout = (0.5222183041585621, 0.586460319661608)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (89, 190)
train = (0.77111612561720333, 0.9365446149787352)
scores = (0.44523444479516305, 0.39957476372313994)
score = 0.4224046042591515
holdout = (0.5222183041585621, 0.586460319661608)
>>> t = 901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 54
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo)
            & index[2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|vp5dd)
            & [10:,15:,10:5,15:10,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:] 
                | Drawup[20:, 10:5] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2011.25, 2011.0, 2011.5, 2012.5, 2013.5, 2013.75, 2014.5, 2009.0, 2011.75, 2009.25, 2013.0, 2014.0, 2015.0}), frozenset({2010.25, 2010.5, 2010.75, 2012.25, 2012.75, 2009.75, 2014.25, 2009.5, 2010.0, 2012.0, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (195, 128)
train = (0.80704843672128512, 0.86551097443777825)
scores = (0.3442087443480345, 0.49126372738412261)
score = 0.41773623586607855
holdout = (0.5094680616693903, 0.5908406006339744)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (119, 90)
train = (0.77953168586934007, 0.96218357583371017)
scores = (0.33695639847362391, 0.49837745182959281)
score = 0.41766692515160836
holdout = (0.5008258303277601, 0.6372220030001594)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (283, 148)
train = (0.79199194007364793, 0.82245081246985441)
scores = (0.33913485395065091, 0.48930771681260316)
score = 0.41422128538162706
holdout = (0.4997828696098678, 0.5919743131330979)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (195, 128)
train = (0.80704843672128512, 0.86551097443777825)
scores = (0.3442087443480345, 0.49126372738412261)
score = 0.41773623586607855
holdout = (0.5094680616693903, 0.5908406006339744)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 248)
train = (0.67714683533892917, 1.1090203757913253)
scores = (0.33266402581022142, 0.50963359764282234)
score = 0.42114881172652185
holdout = (0.4710261764157504, 0.6765437363168438)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (452, 133)
train = (1.1407821663361744, 1.2192662301757049)
scores = (0.37784147923783956, 0.50728686495932007)
score = 0.4425641720985798
holdout = (0.6171924108914728, 0.7181073941555792)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (203, 176)
train = (0.8198314254651653, 0.92825193851208054)
scores = (0.3451700163599577, 0.49780710208325279)
score = 0.4214885592216052
holdout = (0.5116707605413321, 0.631813232525976)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (452, 133)
train = (1.1407821663361744, 1.2192662301757049)
scores = (0.37784147923783956, 0.50728686495932007)
score = 0.4425641720985798
holdout = (0.6171924108914728, 0.7181073941555792)
>>> t = 1000 ===================================================================================================
(pair) len(F.columns) = 36
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 74
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Drawup[1:] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[21:,62:] 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2011.25, 2012.25, 2009.75, 2009.0, 2014.5, 2014.25, 2009.5, 2010.5, 2011.75, 2012.5, 2013.0, 2014.0, 2015.25}), frozenset({2010.0, 2010.75, 2011.5, 2012.75, 2013.5, 2013.75, 2009.25, 2010.25, 2011.0, 2012.0, 2013.25, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (133, 45)
train = (1.0823955308501931, 0.76228442456327705)
scores = (0.21775896007271672, 0.17234409033348561)
score = 0.19505152520310115
holdout = (0.5594214089665822, 0.4461327835142006)
>>> t = 1001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 74
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Drawup[1:] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[21:,62:] 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.5, 2010.75, 2015.0, 2011.5, 2009.0, 2009.5, 2009.75, 2010.25, 2011.75, 2012.0, 2014.5, 2015.25}), frozenset({2011.0, 2012.5, 2012.75, 2013.25, 2013.5, 2013.75, 2014.25, 2014.0, 2009.25, 2011.25, 2012.25, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (45, 1)
train = (0.736376611326923, 0.68189441506942827)
scores = (0.18166482383664453, 0.13576387277796817)
score = 0.15871434830730635
holdout = (0.4218232687564325, 0.3982645335421079)
>>> t = 1100 ===================================================================================================
(pair) len(F.columns) = 109
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 184
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp5dd|Volatility)
            & [5:,10:,10:5,15:10,20:15,15:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:]|doo[10:])} 
            & (
                | Drawdown[10:,20:,20:10] 
                | Since{Max&index[0,5,10]} 
                | Since{Min&index[5]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Drawdown[20:10] 
                | Since{Max & index[0,5]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP)
        & [10:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|dcc|doc|daoc|vp1dd)
            & index[1,2, 0:1,1:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[1:,20:10] 
                | Drawup[20:10] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        | FracRec[21:,125:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.25, 2010.0, 2012.75, 2009.75, 2013.25, 2014.5, 2009.5, 2010.5, 2011.0, 2012.0, 2013.0, 2014.25, 2015.25}), frozenset({2011.75, 2011.25, 2012.5, 2009.25, 2013.75, 2014.0, 2009.0, 2010.75, 2011.5, 2012.25, 2013.5, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (152, 124)
train = (1.2057291630938582, 1.0473963307134428)
scores = (0.41614187792995211, 0.44075817905943249)
score = 0.42845002849469227
holdout = (0.6953055483777706, 0.6247849651779276)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (214, 31)
train = (1.4035465659325994, 0.78802064058100829)
scores = (0.38801014997273464, 0.4152583415459945)
score = 0.40163424575936457
holdout = (0.7264130585233619, 0.5280868006463705)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (48, 2)
train = (0.98645542175472356, 0.70462861666812193)
scores = (0.40453205861625441, 0.40925089252528363)
score = 0.406891475570769
holdout = (0.6206968453543812, 0.5290711410786313)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (152, 124)
train = (1.2057291630938582, 1.0473963307134428)
scores = (0.41614187792995211, 0.44075817905943249)
score = 0.42845002849469227
holdout = (0.6953055483777706, 0.6247849651779276)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (188, 87)
train = (1.3791204733736389, 1.1051476603710448)
scores = (0.4238068089850584, 0.44416782307934621)
score = 0.4339873160322023
holdout = (0.7322066082281303, 0.6409654726097419)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (300, 34)
train = (1.6620838216669795, 0.99821021059104886)
scores = (0.41563194044420704, 0.4256631655306069)
score = 0.42064755298740697
holdout = (0.7708501779780702, 0.5943588053103382)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (96, 3)
train = (1.1759723983619863, 0.81091262335007708)
scores = (0.42229077805626802, 0.42186769441382083)
score = 0.4220792362350444
holdout = (0.694151349576906, 0.5717719236422857)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (188, 87)
train = (1.3791204733736389, 1.1051476603710448)
scores = (0.4238068089850584, 0.44416782307934621)
score = 0.4339873160322023
holdout = (0.7322066082281303, 0.6409654726097419)
>>> t = 1101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 184
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp5dd|Volatility)
            & [5:,10:,10:5,15:10,20:15,15:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:]|doo[10:])} 
            & (
                | Drawdown[10:,20:,20:10] 
                | Since{Max&index[0,5,10]} 
                | Since{Min&index[5]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Drawdown[20:10] 
                | Since{Max & index[0,5]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP)
        & [10:,20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|dcc|doc|daoc|vp1dd)
            & index[1,2, 0:1,1:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[1:,20:10] 
                | Drawup[20:10] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        | FracRec[21:,125:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2011.0, 2011.5, 2012.5, 2012.75, 2013.25, 2013.0, 2014.25, 2009.25, 2010.75, 2011.25, 2009.5, 2013.75, 2014.75}), frozenset({2010.0, 2010.5, 2015.0, 2012.25, 2009.75, 2014.0, 2009.0, 2010.25, 2011.75, 2012.0, 2013.5, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (27, 53)
train = (0.78487133386892405, 0.93186580639150851)
scores = (0.32807893264247184, 0.40232396372790258)
score = 0.3652014481851872
holdout = (0.5360005242260413, 0.6052277081809522)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (99, 53)
train = (1.0861155967981906, 0.91859776787528735)
scores = (0.33341937296398427, 0.3979648427661292)
score = 0.36569210786505674
holdout = (0.6225590770479016, 0.6081908680299768)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (16, 33)
train = (0.74165305632997447, 0.78661276108629918)
scores = (0.35930670484686533, 0.40477566254337455)
score = 0.38204118369511997
holdout = (0.5281306356617044, 0.5460007904566317)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (16, 33)
train = (0.74165305632997447, 0.78661276108629918)
scores = (0.35930670484686533, 0.40477566254337455)
score = 0.38204118369511997
holdout = (0.5281306356617044, 0.5460007904566317)
>>> t = 1200 ===================================================================================================
(pair) len(F.columns) = 65
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 111
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|acc|dcc|daoc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                | Drawdown[ 10:5] 
                | Since{Max & index[10]} 
                | Drawup[ 5:] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            | Volatility[10:]
            & (
                <>Drawdown[1:,20:] 
                | Since{Max & index[0,10]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|vp5dd)
            & [6:3,9:6,12:9,15:12,21:18,12:6,18:12,21:15,12:3,15:6,15:3,18:6,21:9,18:3] 
          }
        | ( 
            <>Return{(oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:, 10:5] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
    | 
        Time{ short}
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1,10]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2015.0, 2011.5, 2012.75, 2012.25, 2013.5, 2014.5, 2009.0, 2010.75, 2011.25, 2012.5, 2013.75, 2014.0, 2015.25}), frozenset({2010.25, 2010.5, 2011.75, 2009.25, 2009.75, 2013.25, 2014.25, 2009.5, 2010.0, 2011.0, 2012.0, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (14, 1)
train = (0.7450072013196356, 0.68546952180668608)
scores = (0.22477053710431136, 0.29755704123083992)
score = 0.26116378916757566
holdout = (0.42444661526817823, 0.4608589845274305)
>>> t = 1201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 111
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|acc|dcc|daoc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                | Drawdown[ 10:5] 
                | Since{Max & index[10]} 
                | Drawup[ 5:] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            | Volatility[10:]
            & (
                <>Drawdown[1:,20:] 
                | Since{Max & index[0,10]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|vp5dd)
            & [6:3,9:6,12:9,15:12,21:18,12:6,18:12,21:15,12:3,15:6,15:3,18:6,21:9,18:3] 
          }
        | ( 
            <>Return{(oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:, 10:5] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
    | 
        Time{ short}
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1,10]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.25, 2011.25, 2012.5, 2009.75, 2013.75, 2013.25, 2014.0, 2009.25, 2010.75, 2011.5, 2012.25, 2013.5, 2014.5}), frozenset({2010.5, 2015.0, 2011.75, 2012.75, 2009.0, 2014.25, 2009.5, 2010.0, 2011.0, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (511, 57)
train = (1.5875376066857105, 0.82276671760397679)
scores = (0.31157591752223557, 0.39267692440323149)
score = 0.3521264209627335
holdout = (0.728046612016209, 0.5485386266684567)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (592, 121)
train = (1.7862929655887947, 0.96923354702039843)
scores = (0.33812419158299795, 0.40274883493801394)
score = 0.370436513260506
holdout = (0.7510941205089786, 0.5917993136004673)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (683, 86)
train = (1.5791170353498223, 0.90754546994034224)
scores = (0.31156716598759809, 0.39990708244266637)
score = 0.35573712421513226
holdout = (0.729467903584216, 0.5794503050809505)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (592, 121)
train = (1.7862929655887947, 0.96923354702039843)
scores = (0.33812419158299795, 0.40274883493801394)
score = 0.370436513260506
holdout = (0.7510941205089786, 0.5917993136004673)
>>> t = 1300 ===================================================================================================
(pair) len(F.columns) = 9
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 22
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [15:,10:5,15:10,20:10] 
          }
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [60:] 
      }
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[62:,250:] 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2012.25, 2012.0, 2009.75, 2009.5, 2013.25, 2013.75, 2009.25, 2009.0, 2010.75, 2011.0, 2012.75, 2013.0, 2015.0}), frozenset({2010.25, 2010.5, 2011.5, 2011.75, 2014.5, 2014.25, 2014.0, 2010.0, 2011.25, 2012.5, 2013.5, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (119, 22)
train = (0.94208759027621225, 0.70838959066168783)
scores = (0.45161798420943289, 0.26310156014478753)
score = 0.35735977217711024
holdout = (0.6355325970437931, 0.4458383246864713)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (100, 14)
train = (0.92841442175909905, 0.73343814490531312)
scores = (0.48172161677306369, 0.27644203540994328)
score = 0.3790818260915035
holdout = (0.6260848606006905, 0.4663650996539953)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (107, 21)
train = (0.88254782130068277, 0.61466727531889198)
scores = (0.47707016200792485, 0.25039359616795992)
score = 0.36373187908794236
holdout = (0.6172319274462605, 0.41089206630871733)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (100, 14)
train = (0.92841442175909905, 0.73343814490531312)
scores = (0.48172161677306369, 0.27644203540994328)
score = 0.3790818260915035
holdout = (0.6260848606006905, 0.4663650996539953)
>>> t = 1301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 22
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [15:,10:5,15:10,20:10] 
          }
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [60:] 
      }
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[62:,250:] 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.0, 2010.25, 2011.0, 2012.5, 2009.5, 2013.25, 2014.75, 2009.75, 2010.75, 2011.75, 2012.75, 2013.75, 2014.5}), frozenset({2015.0, 2011.5, 2012.25, 2009.25, 2013.5, 2014.0, 2009.0, 2010.5, 2011.25, 2012.0, 2013.0, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (64, 69)
train = (0.7665903577476425, 0.75988691750634429)
scores = (0.23709044682234576, 0.42976997641204456)
score = 0.33343021161719516
holdout = (0.47826923298367024, 0.5417696214399719)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (40, 100)
train = (0.81081619441597386, 0.90721956243229673)
scores = (0.24591355158590467, 0.41837301910494695)
score = 0.3321432853454258
holdout = (0.5071580340983118, 0.5826150867106716)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (175, 115)
train = (0.81940779047659473, 0.74678911821252214)
scores = (0.23313184162794387, 0.46434472411817901)
score = 0.3487382828730614
holdout = (0.494317575910136, 0.5215504824723217)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (175, 115)
train = (0.81940779047659473, 0.74678911821252214)
scores = (0.23313184162794387, 0.46434472411817901)
score = 0.3487382828730614
holdout = (0.494317575910136, 0.5215504824723217)
>>> t = 1400 ===================================================================================================
(pair) len(F.columns) = 25
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 74
    <>~Market & (
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [10:,60:] 
      }
#<>#
    <>~Market & (
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [10:,60:] 
      }
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.0, 2010.25, 2010.5, 2015.0, 2011.0, 2012.75, 2012.5, 2012.25, 2009.75, 2010.75, 2011.75, 2009.0, 2015.25}), frozenset({2011.5, 2009.25, 2013.25, 2013.5, 2013.75, 2014.5, 2014.25, 2014.0, 2009.5, 2011.25, 2012.0, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (229, 22)
train = (1.2130517103748359, 0.6234901298482044)
scores = (0.10217787772798001, 0.061284408021769779)
score = 0.0817311428748749
holdout = (0.5392833807186301, 0.34131723819488236)
>>> t = 1401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 74
    <>~Market & (
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [10:,60:] 
      }
#<>#
    <>~Market & (
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [10:,60:] 
      }
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.25, 2011.5, 2011.0, 2009.5, 2014.5, 2014.0, 2009.25, 2010.0, 2011.25, 2009.75, 2013.5, 2014.75, 2015.25}), frozenset({2010.5, 2012.25, 2012.5, 2012.75, 2013.25, 2013.75, 2009.0, 2010.75, 2011.75, 2012.0, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 79)
train = (0.51680686059000602, 0.78574703824513292)
scores = (0.13456499504158825, 0.1534978812103994)
score = 0.14403143812599384
holdout = (0.29485436732115317, 0.44178416634159784)
>>> t = 1500 ===================================================================================================
(pair) len(F.columns) = 18
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 40
    <>~Market & (
        | ( 
            | Volatility[10:]
            & (
                | Since{Max & index[10,20]} 
                | Drawup[20:10] 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[21:,62:,125:,250:] 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.25, 2011.0, 2011.25, 2012.25, 2012.75, 2014.5, 2009.0, 2010.75, 2011.5, 2012.0, 2013.5, 2014.0}), frozenset({2015.0, 2009.25, 2009.75, 2013.25, 2013.75, 2014.25, 2009.5, 2010.5, 2011.75, 2012.5, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (5, 165)
train = (0.66278042792047587, 1.040423138860822)
scores = (0.14874806134223389, 0.16455136798588224)
score = 0.15664971466405808
holdout = (0.35345248158901676, 0.5348963411552133)
>>> t = 1501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 40
    <>~Market & (
        | ( 
            | Volatility[10:]
            & (
                | Since{Max & index[10,20]} 
                | Drawup[20:10] 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[60:] 
        | FracRec[21:,62:,125:,250:] 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2011.25, 2012.0, 2009.0, 2013.25, 2014.0, 2014.5, 2009.75, 2010.0, 2011.75, 2012.25, 2013.0, 2014.75}), frozenset({2010.5, 2015.0, 2011.5, 2012.75, 2009.25, 2013.75, 2009.5, 2010.25, 2011.0, 2012.5, 2013.5, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (103, 184)
train = (1.0414867549806837, 1.094944808041918)
scores = (0.16487659578036082, 0.18609248431622294)
score = 0.1754845400482919
holdout = (0.5389280284509307, 0.5169448002778412)
>>> t = 1600 ===================================================================================================
(pair) len(F.columns) = 19
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 38
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doo|doc|daoc)
            & index[0,1,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:] 
                | Since{Max&index[10]} 
                | Since{Min&index[0,10]} 
              )
            & Since[21:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
    | 
        | Return{rr} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.5, 2012.5, 2012.0, 2009.75, 2013.75, 2013.0, 2009.0, 2010.25, 2011.0, 2012.25, 2013.25, 2014.5, 2015.0}), frozenset({2010.75, 2011.5, 2011.75, 2009.25, 2014.25, 2014.0, 2009.5, 2010.0, 2011.25, 2012.75, 2013.5, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (171, 442)
train = (0.91586079560088807, 1.1622650320905188)
scores = (0.36324712228643985, 0.32015951848189778)
score = 0.34170332038416884
holdout = (0.5568658127525827, 0.6288233730033959)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (225, 144)
train = (0.9103685791890227, 0.97598753664450177)
scores = (0.37160871238477261, 0.3103144857395968)
score = 0.3409615990621847
holdout = (0.5626076762141025, 0.5803291376891655)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (333, 1)
train = (0.92201619389230138, 0.45510098900557178)
scores = (0.36378057961007665, 0.23333948576740457)
score = 0.2985600326887406
holdout = (0.5539171406403539, 0.32899442184453104)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (171, 442)
train = (0.91586079560088807, 1.1622650320905188)
scores = (0.36324712228643985, 0.32015951848189778)
score = 0.34170332038416884
holdout = (0.5568658127525827, 0.6288233730033959)
>>> t = 1601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 38
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doo|doc|daoc)
            & index[0,1,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:] 
                | Since{Max&index[10]} 
                | Since{Min&index[0,10]} 
              )
            & Since[21:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
    | 
        | Return{rr} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2011.75, 2011.5, 2009.5, 2013.75, 2013.25, 2013.5, 2014.75, 2009.0, 2011.0, 2009.25, 2013.0, 2014.25, 2015.25}), frozenset({2010.0, 2010.75, 2010.5, 2012.25, 2012.5, 2012.75, 2014.0, 2009.75, 2010.25, 2011.25, 2012.0, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (174, 138)
train = (0.83853086608214189, 1.1720379067186788)
scores = (0.30453815712445176, 0.36386716785668499)
score = 0.3342026624905684
holdout = (0.5290796394003524, 0.6129665851751906)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (197, 142)
train = (0.91175830388649381, 1.3790037696287516)
scores = (0.30781933298376996, 0.36252674645846766)
score = 0.3351730397211188
holdout = (0.5535894628453049, 0.6676172028176826)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (297, 206)
train = (0.80712227411312287, 1.0165065627692367)
scores = (0.29591419180428019, 0.36411586576787996)
score = 0.3300150287860801
holdout = (0.5078738921747806, 0.5625329769860405)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (197, 142)
train = (0.91175830388649381, 1.3790037696287516)
scores = (0.30781933298376996, 0.36252674645846766)
score = 0.3351730397211188
holdout = (0.5535894628453049, 0.6676172028176826)
>>> t = 1700 ===================================================================================================
(pair) len(F.columns) = 18
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 18
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [5:,10:,15:,10:5,15:10,15:5,20:10,20:5] 
          }
      )
    | 
        | FracRec[21:] 
#<>#
0
#<>#
    <>0
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.5, 2010.25, 2011.0, 2011.5, 2012.25, 2009.5, 2014.0, 2009.0, 2010.0, 2011.25, 2012.5, 2013.75, 2014.5}), frozenset({2015.0, 2012.75, 2009.75, 2013.25, 2013.5, 2014.25, 2009.25, 2010.75, 2011.75, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (200, 27)
train = (0.57373705915515127, 0.47428531388967593)
scores = (0.22591198760062556, 0.39008978375485021)
score = 0.30800088567773787
holdout = (0.3680388508500402, 0.41495404211240583)
>>> t = 1701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 18
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [5:,10:,15:,10:5,15:10,15:5,20:10,20:5] 
          }
      )
    | 
        | FracRec[21:] 
#<>#
0
#<>#
    <>0
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.25, 2012.75, 2012.25, 2009.5, 2009.0, 2013.5, 2009.75, 2010.75, 2011.5, 2012.0, 2013.75, 2014.5, 2015.0}), frozenset({2010.5, 2011.25, 2011.75, 2013.25, 2014.25, 2014.0, 2009.25, 2010.0, 2011.0, 2012.5, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (163, 90)
train = (0.57593411517733384, 0.48411013066057151)
scores = (0.29750176181480159, 0.321553103176274)
score = 0.3095274324955378
holdout = (0.41197771932828076, 0.3771048971180027)
>>> t = 1800 ===================================================================================================
(pair) len(F.columns) = 25
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 38
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:, 10:5] 
                | Drawup[10:] 
                | Since{Min&index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [1:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp5dd|Volatility)
            & [10:,15:10,20:10] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[20]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.25, 2012.5, 2009.5, 2013.25, 2014.25, 2014.0, 2014.75, 2009.0, 2010.5, 2011.5, 2012.0, 2013.5, 2014.5}), frozenset({2010.0, 2015.0, 2011.25, 2011.75, 2012.75, 2009.75, 2013.75, 2009.25, 2010.75, 2011.0, 2012.25, 2013.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (7, 34)
train = (0.62741816187058486, 0.54386739394735473)
scores = (0.27805183886205692, 0.15150703922540529)
score = 0.2147794390437311
holdout = (0.4178433828655907, 0.34040477050963897)
>>> t = 1801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 38
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:, 10:5] 
                | Drawup[10:] 
                | Since{Min&index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [1:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp5dd|Volatility)
            & [10:,15:10,20:10] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[20]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.25, 2011.25, 2012.5, 2012.0, 2009.25, 2009.0, 2009.75, 2010.5, 2011.5, 2012.25, 2013.5, 2014.75}), frozenset({2015.0, 2011.75, 2013.25, 2013.75, 2014.25, 2014.0, 2009.5, 2010.75, 2011.0, 2012.75, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (26, 33)
train = (0.70750619706587814, 0.87564455767590543)
scores = (0.3827103685222854, 0.33417403196062617)
score = 0.3584422002414558
holdout = (0.5115719351453738, 0.5392008714784671)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (15, 50)
train = (0.59246780238508556, 1.1086816213040174)
scores = (0.35896343702593519, 0.33056691883089484)
score = 0.344765177928415
holdout = (0.4464056774395218, 0.6097197927558837)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (11, 35)
train = (0.64186039707534648, 0.79285517249506321)
scores = (0.37248459783770416, 0.34795063323068998)
score = 0.36021761553419707
holdout = (0.48333447582865163, 0.5183048017064722)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (11, 35)
train = (0.64186039707534648, 0.79285517249506321)
scores = (0.37248459783770416, 0.34795063323068998)
score = 0.36021761553419707
holdout = (0.48333447582865163, 0.5183048017064722)
>>> t = 1900 ===================================================================================================
(pair) len(F.columns) = 108
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 109
0
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|daoc)
            & index[0,1,2,1:2] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Drawdown[1:,20:] 
                | Since{Max & index[0,10]} 
                | Since{Min & index[10]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[10:, 20:]
            & (
                | Since{Min & index[0,10]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [10:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.0, 2011.5, 2011.0, 2012.25, 2012.0, 2009.25, 2009.5, 2010.25, 2011.25, 2012.75, 2013.0, 2014.0, 2015.25}), frozenset({2010.5, 2009.75, 2013.5, 2013.75, 2014.5, 2014.25, 2009.0, 2010.75, 2011.75, 2012.5, 2013.25, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (8, 8)
train = (0.61061826187211832, 0.68997024484808422)
scores = (0.13753780114876646, 0.18227724245920551)
score = 0.15990752180398599
holdout = (0.2985638980799512, 0.37793523739275936)
>>> t = 1901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 109
0
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|daoc)
            & index[0,1,2,1:2] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Drawdown[1:,20:] 
                | Since{Max & index[0,10]} 
                | Since{Min & index[10]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[10:, 20:]
            & (
                | Since{Min & index[0,10]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [10:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.25, 2012.25, 2012.5, 2009.0, 2014.0, 2014.5, 2009.5, 2010.0, 2011.0, 2012.75, 2014.75, 2015.25}), frozenset({2010.5, 2011.75, 2009.75, 2013.25, 2013.5, 2013.75, 2009.25, 2010.75, 2011.5, 2012.0, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (132, 40)
train = (0.91919166796991936, 0.95077523367233352)
scores = (0.18980223835891402, 0.23653718985676428)
score = 0.21316971410783914
holdout = (0.47392714436085104, 0.49744143257595935)
>>> t = 2000 ===================================================================================================
(pair) len(F.columns) = 166
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 246
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp5dd)
            & [5:,10:,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max&index[10]} 
                | Drawup[20:10] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo|acc|dcc)
            & index[2, 0:1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd)
            & [15:,10:5,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|doo[10:])} 
            & (
                | Drawdown[1:,10:, 10:5,20:10] 
                | Since{Max&index[0,5,20]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[10]} 
                | Drawup[20:10] 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,5:,10:,60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2011.75, 2011.5, 2012.25, 2012.5, 2012.75, 2009.25, 2009.5, 2010.25, 2011.0, 2012.0, 2013.5, 2015.0}), frozenset({2010.75, 2013.25, 2013.75, 2014.5, 2014.25, 2014.0, 2009.0, 2010.5, 2011.25, 2009.75, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (16, 219)
train = (0.70943709319710035, 1.1007560010854471)
scores = (0.26815546073104246, 0.32869310861540868)
score = 0.29842428467322557
holdout = (0.4659174350070053, 0.6255966538799035)
>>> t = 2001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 246
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp5dd)
            & [5:,10:,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max&index[10]} 
                | Drawup[20:10] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo|acc|dcc)
            & index[2, 0:1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd)
            & [15:,10:5,20:15,15:5,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|doo[10:])} 
            & (
                | Drawdown[1:,10:, 10:5,20:10] 
                | Since{Max&index[0,5,20]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[10]} 
                | Drawup[20:10] 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( Volatility)
        & [1:,5:,10:,60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.0, 2011.25, 2009.5, 2013.25, 2013.0, 2009.0, 2010.5, 2011.5, 2012.75, 2013.75, 2014.75, 2015.25}), frozenset({2010.0, 2012.25, 2012.5, 2009.75, 2014.25, 2014.0, 2009.25, 2010.75, 2011.75, 2012.0, 2013.5, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 14)
train = (0.68268844381048599, 0.64899686316760041)
scores = (0.32042349206067539, 0.30660717834827883)
score = 0.3135153352044771
holdout = (0.4956982549073161, 0.44861547994252815)
>>> t = 2100 ===================================================================================================
(pair) len(F.columns) = 57
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 70
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [5:,15:,10:5,15:10,15:5,20:10] 
          }
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|dcc)
            & index[0,1,2,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd|Volatility)
            & [6:,15:,18:,6:3,21:18,9:3,21:15,15:6,15:3,18:3,21:6] 
          }
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Max & index[0]} 
                | Drawup[20:] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.5, 2011.75, 2011.0, 2013.25, 2013.0, 2014.5, 2009.5, 2010.25, 2011.5, 2012.5, 2013.5, 2014.0, 2015.0}), frozenset({2010.0, 2012.25, 2012.75, 2009.25, 2009.75, 2014.25, 2009.0, 2010.75, 2011.25, 2012.0, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 26)
train = (0.53365289085845891, 0.7781818039447832)
scores = (0.20740661904941157, 0.32091164833335362)
score = 0.2641591336913826
holdout = (0.32167497610040136, 0.5169843549034594)
>>> t = 2101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 70
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [5:,15:,10:5,15:10,15:5,20:10] 
          }
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|dcc)
            & index[0,1,2,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd|Volatility)
            & [6:,15:,18:,6:3,21:18,9:3,21:15,15:6,15:3,18:3,21:6] 
          }
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,20:] 
                | Since{Max & index[0]} 
                | Drawup[20:] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2012.0, 2009.0, 2013.0, 2013.75, 2013.25, 2014.75, 2014.25, 2009.5, 2011.0, 2012.25, 2013.5, 2014.5, 2015.25}), frozenset({2010.0, 2010.75, 2010.5, 2011.5, 2011.75, 2012.75, 2009.75, 2009.25, 2010.25, 2011.25, 2012.5, 2014.0, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (191, 1)
train = (0.91409494911651179, 0.50488229148495123)
scores = (0.29988478079734882, 0.29833433306985063)
score = 0.29910955693359975
holdout = (0.5537803113803439, 0.3644725874010336)
>>> t = 2200 ===================================================================================================
(pair) len(F.columns) = 197
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 325
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [10:,15:,10:5,15:10,20:15,15:5,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:, 10:5,20:10] 
                | Since{Max&index[0,5,10]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Drawdown[ 10:5,20:10] 
                | Since{Max & index[10,20]} 
                | Drawup[10:, 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[0,10]} 
                | Drawup[1:, 10:5,20:10] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doo|doc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [6:,9:,12:,6:3,12:9,15:12,18:15,9:3,18:12,12:3,15:6,18:6,21:9,21:6] 
          }
        | ( 
            <>Return{dd} & VP[1:, 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Drawup[1,20:,20:10] 
                | Since{Min & index[0,10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | 
        | Return{ af} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.0, 2011.75, 2011.0, 2012.0, 2012.75, 2013.0, 2009.5, 2015.0, 2011.25, 2012.25, 2013.5, 2014.5, 2015.25}), frozenset({2010.25, 2010.75, 2009.25, 2009.75, 2013.75, 2014.25, 2014.0, 2009.0, 2010.5, 2011.5, 2012.5, 2013.25, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (96, 394)
train = (1.2837595036828746, 1.2603765635552233)
scores = (0.46404149011411894, 0.42645132764208937)
score = 0.4452464088781042
holdout = (0.7205602595806068, 0.6706334823580589)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (207, 393)
train = (1.5492510629907343, 1.3593773544889498)
scores = (0.48827301462985617, 0.46504411095686798)
score = 0.47665856279336205
holdout = (0.746529667184127, 0.6884910141912843)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (222, 305)
train = (1.3693503220524534, 1.1475070822863147)
scores = (0.46426312799119501, 0.43957025396197813)
score = 0.4519166909765866
holdout = (0.734530917158619, 0.6680278128560108)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (207, 393)
train = (1.5492510629907343, 1.3593773544889498)
scores = (0.48827301462985617, 0.46504411095686798)
score = 0.47665856279336205
holdout = (0.746529667184127, 0.6884910141912843)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (172, 159)
train = (1.5391939574992255, 1.1703708704574829)
scores = (0.48942978599218873, 0.42182271656612308)
score = 0.4556262512791559
holdout = (0.7638749828117177, 0.6585048211495028)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (208, 376)
train = (1.7553902976164852, 1.604717277323116)
scores = (0.5178240497450548, 0.48507092999034485)
score = 0.5014474898676998
holdout = (0.7688518406985642, 0.7240155370856847)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (53, 479)
train = (1.1641873654022068, 1.3462819479776005)
scores = (0.4448064717306292, 0.46981542430189438)
score = 0.4573109480162618
holdout = (0.670146993066556, 0.7143481641045464)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (208, 376)
train = (1.7553902976164852, 1.604717277323116)
scores = (0.5178240497450548, 0.48507092999034485)
score = 0.5014474898676998
holdout = (0.7688518406985642, 0.7240155370856847)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (81, 1)
train = (1.4869315084982664, 0.91716740141000574)
scores = (0.48580122539967791, 0.38075692199769468)
score = 0.4332790736986863
holdout = (0.7582631723611831, 0.5669447507423246)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (106, 130)
train = (1.7464679760748976, 1.5021869932520244)
scores = (0.51481841592778343, 0.47715974050105564)
score = 0.4959890782144195
holdout = (0.7677534171400773, 0.7114015824460223)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (40, 376)
train = (1.185096071575843, 1.374489084685425)
scores = (0.45984702317793763, 0.46109421065557915)
score = 0.4604706169167584
holdout = (0.6938627773568649, 0.7189096140549603)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (106, 130)
train = (1.7464679760748976, 1.5021869932520244)
scores = (0.51481841592778343, 0.47715974050105564)
score = 0.4959890782144195
holdout = (0.7677534171400773, 0.7114015824460223)
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (67, 1)
train = (1.5033740625278278, 0.98836505546168241)
scores = (0.47917692287134617, 0.39964535862993661)
score = 0.43941114075064136
holdout = (0.7678880251903561, 0.595111781054558)
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (53, 119)
train = (1.7187417504898983, 1.6053777013014101)
scores = (0.49111300251615636, 0.47229382206477777)
score = 0.4817034122904671
holdout = (0.7590431682355463, 0.7257864781724899)
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (38, 291)
train = (1.2187353627469735, 1.3702142750559596)
scores = (0.47139870152924818, 0.45799815569064178)
score = 0.464698428609945
holdout = (0.7031289408829161, 0.7261987896408153)
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (53, 119)
train = (1.7187417504898983, 1.6053777013014101)
scores = (0.49111300251615636, 0.47229382206477777)
score = 0.4817034122904671
holdout = (0.7590431682355463, 0.7257864781724899)
>>> t = 2201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 325
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [10:,15:,10:5,15:10,20:15,15:5,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:, 10:5,20:10] 
                | Since{Max&index[0,5,10]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Drawdown[ 10:5,20:10] 
                | Since{Max & index[10,20]} 
                | Drawup[10:, 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[0,10]} 
                | Drawup[1:, 10:5,20:10] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doo|doc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [6:,9:,12:,6:3,12:9,15:12,18:15,9:3,18:12,12:3,15:6,18:6,21:9,21:6] 
          }
        | ( 
            <>Return{dd} & VP[1:, 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Drawup[1,20:,20:10] 
                | Since{Min & index[0,10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | 
        | Return{ af} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.0, 2011.25, 2013.75, 2013.25, 2014.25, 2014.75, 2009.25, 2010.75, 2011.75, 2012.0, 2013.5, 2014.5, 2015.0}), frozenset({2010.5, 2011.5, 2012.5, 2012.75, 2009.0, 2009.75, 2009.5, 2010.25, 2011.0, 2012.25, 2013.0, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (71, 28)
train = (1.0328075751869148, 0.74916184433387312)
scores = (0.30925901141090267, 0.33594599104736811)
score = 0.32260250122913536
holdout = (0.611302754452113, 0.5085381127561113)
>>> t = 2202 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 325
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [10:,15:,10:5,15:10,20:15,15:5,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:, 10:5,20:10] 
                | Since{Max&index[0,5,10]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Drawdown[ 10:5,20:10] 
                | Since{Max & index[10,20]} 
                | Drawup[10:, 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[0,10]} 
                | Drawup[1:, 10:5,20:10] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doo|doc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [6:,9:,12:,6:3,12:9,15:12,18:15,9:3,18:12,12:3,15:6,18:6,21:9,21:6] 
          }
        | ( 
            <>Return{dd} & VP[1:, 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Drawup[1,20:,20:10] 
                | Since{Min & index[0,10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | 
        | Return{ af} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.75, 2010.0, 2011.25, 2012.75, 2012.0, 2009.5, 2013.0, 2009.25, 2010.5, 2011.0, 2009.75, 2013.75, 2014.75}), frozenset({2015.0, 2011.75, 2012.5, 2013.5, 2014.25, 2014.0, 2009.0, 2010.25, 2011.5, 2012.25, 2013.25, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (66, 102)
train = (0.92375755412744309, 1.0689701947818295)
scores = (0.36048748649594536, 0.26799724973991773)
score = 0.31424236811793155
holdout = (0.590379563268398, 0.5873083342852963)
>>> t = 2300 ===================================================================================================
(pair) len(F.columns) = 36
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 47
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|vp1dd)
            & index[0,2, 0:1,0:2] 
          }
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|doc|vp1dd)
            & index[0, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [5:,10:,15:,15:5,20:10] 
          }
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                | Since{Max & index[0,10]} 
                | Since{Min & index[5,20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2012.25, 2012.5, 2009.0, 2013.75, 2013.25, 2014.0, 2009.25, 2010.0, 2011.0, 2012.0, 2013.0, 2014.75, 2015.0}), frozenset({2010.5, 2010.75, 2011.5, 2011.75, 2009.75, 2014.25, 2009.5, 2010.25, 2011.25, 2012.75, 2013.5, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (274, 301)
train = (0.8481909849439544, 0.97775253661927475)
scores = (0.41071482642933577, 0.29215042002414182)
score = 0.3514326232267388
holdout = (0.5318735323223213, 0.5090673558707058)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (198, 400)
train = (0.92501695129617667, 1.4113718715816199)
scores = (0.40753971272981365, 0.30131965153539242)
score = 0.35442968213260306
holdout = (0.5676168805760445, 0.6344892695746056)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (281, 643)
train = (0.67718337310976351, 0.99148905546819177)
scores = (0.40750745591778947, 0.28935728663487509)
score = 0.3484323712763323
holdout = (0.4855446414828305, 0.5102388986824046)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (198, 400)
train = (0.92501695129617667, 1.4113718715816199)
scores = (0.40753971272981365, 0.30131965153539242)
score = 0.35442968213260306
holdout = (0.5676168805760445, 0.6344892695746056)
>>> t = 2301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 47
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|vp1dd)
            & index[0,2, 0:1,0:2] 
          }
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|doc|vp1dd)
            & index[0, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [5:,10:,15:,15:5,20:10] 
          }
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                | Since{Max & index[0,10]} 
                | Since{Min & index[5,20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2011.75, 2011.25, 2012.0, 2012.25, 2012.5, 2014.25, 2009.25, 2010.0, 2011.5, 2012.75, 2013.75, 2014.0, 2015.0}), frozenset({2010.5, 2010.75, 2009.75, 2013.25, 2013.5, 2014.5, 2009.5, 2010.25, 2011.0, 2009.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (135, 418)
train = (0.92294405940115842, 0.87889181342362688)
scores = (0.4082322665561427, 0.25216341690981126)
score = 0.33019784173297695
holdout = (0.5555646001622461, 0.5020194708329686)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (50, 290)
train = (0.92821919658581431, 0.9390965274475287)
scores = (0.40358330597188774, 0.24435301518076138)
score = 0.32396816057632455
holdout = (0.5505697481786144, 0.5306905694513069)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (7, 472)
train = (0.41308121660078317, 0.77081056046895846)
scores = (0.3815417192129511, 0.24091769595299228)
score = 0.3112297075829717
holdout = (0.36264202633596904, 0.4521418803806306)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (135, 418)
train = (0.92294405940115842, 0.87889181342362688)
scores = (0.4082322665561427, 0.25216341690981126)
score = 0.33019784173297695
holdout = (0.5555646001622461, 0.5020194708329686)
>>> t = 2400 ===================================================================================================
(pair) len(F.columns) = 22
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 46
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|dcc)
            & index[1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd|Volatility)
            & [3:,6:,9:,12:,15:,9:6,18:12,18:9,21:12,15:3,18:6,21:9] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0]} 
                | Drawup[10:] 
                | Since{Min & index[0]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.75, 2011.5, 2012.25, 2012.0, 2009.75, 2014.5, 2009.25, 2010.0, 2011.0, 2012.75, 2013.0, 2014.75, 2015.25}), frozenset({2010.5, 2011.75, 2009.0, 2013.5, 2013.75, 2014.0, 2009.5, 2010.25, 2011.25, 2012.5, 2013.25, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (191, 72)
train = (1.0980163024825305, 0.75524026555209556)
scores = (0.37515388696368435, 0.25398085675911125)
score = 0.3145673718613978
holdout = (0.6265093704815482, 0.45112535552873473)
>>> t = 2401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 46
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|dcc)
            & index[1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd|Volatility)
            & [3:,6:,9:,12:,15:,9:6,18:12,18:9,21:12,15:3,18:6,21:9] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0]} 
                | Drawup[10:] 
                | Since{Min & index[0]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2015.0, 2011.25, 2011.75, 2012.25, 2012.0, 2009.25, 2014.25, 2009.5, 2010.5, 2011.0, 2012.5, 2014.75, 2015.25}), frozenset({2010.0, 2010.75, 2009.75, 2013.25, 2013.5, 2013.75, 2014.0, 2009.0, 2010.25, 2011.5, 2012.75, 2013.0, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (71, 1)
train = (0.93371964831024501, 0.5751111070805508)
scores = (0.34341940539870536, 0.19427567284861319)
score = 0.2688475391236593
holdout = (0.5456152296606872, 0.3517863809849471)
>>> t = 2500 ===================================================================================================
(pair) len(F.columns) = 81
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 142
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo)
            & index[1,2, 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:])} 
            & (
                | Drawdown[1:,20:,20:10] 
                | Since{Min&index[0,5]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[0,10]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [20:] 
      }
    | 
        <>Return{pure&~dd} & VP[10:] 
        | FracRec[21:,62:,125:,250:] 
    | 
        Time{ short}
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp1dd)
            & [3:,9:,12:,15:,18:,9:3,12:6,            15:9,21:15,12:3,15:6,15:3,21:9,21:6] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 125:] 
          )
      )
#<>#
0
#<>#
    <>0
len(samps) = 2
(frozenset({2010.5, 2011.75, 2012.0, 2012.5, 2013.0, 2013.25, 2014.0, 2010.75, 2011.0, 2012.75, 2013.75, 2014.5, 2015.0}), frozenset({2010.25, 2011.5, 2009.0, 2009.25, 2009.75, 2014.25, 2009.5, 2010.0, 2011.25, 2012.25, 2013.5, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (48, 601)
train = (1.1788199621186211, 1.2999568786371536)
scores = (0.48716538353454214, 0.42146706241062598)
score = 0.45431622297258406
holdout = (0.713121849680622, 0.6999625229074806)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (111, 560)
train = (1.4757605367921729, 1.4270975996307069)
scores = (0.4552973674062486, 0.42191433280045998)
score = 0.4386058501033543
holdout = (0.7583767865737813, 0.7160720579411208)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (205, 1)
train = (1.477925780448337, 0.74463700306001834)
scores = (0.53596852349449509, 0.28806929700828682)
score = 0.4120189102513909
holdout = (0.7864459829325723, 0.4690063601166411)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (48, 601)
train = (1.1788199621186211, 1.2999568786371536)
scores = (0.48716538353454214, 0.42146706241062598)
score = 0.45431622297258406
holdout = (0.713121849680622, 0.6999625229074806)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (50, 317)
train = (1.3422869333913039, 1.2975447732831238)
scores = (0.51099855751176548, 0.40119147907564873)
score = 0.45609501829370713
holdout = (0.7608324774621141, 0.7002006936612095)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (60, 310)
train = (1.5103644423433285, 1.4508638445493718)
scores = (0.47451546445225856, 0.42471117603081926)
score = 0.4496133202415389
holdout = (0.7665835490711879, 0.7171914760625435)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (95, 507)
train = (1.4146572502399446, 1.29585595047862)
scores = (0.52864932004090937, 0.40693931278658829)
score = 0.4677943164137488
holdout = (0.7754680244209119, 0.7178716721029732)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (95, 507)
train = (1.4146572502399446, 1.29585595047862)
scores = (0.52864932004090937, 0.40693931278658829)
score = 0.4677943164137488
holdout = (0.7754680244209119, 0.7178716721029732)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (50, 596)
train = (1.4811550724210125, 1.5201345336591225)
scores = (0.51631832043971493, 0.44758887982656936)
score = 0.48195360013314215
holdout = (0.7962834828133902, 0.7336443555999282)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (56, 416)
train = (1.6420550950890713, 1.7568165183174409)
scores = (0.47536005945508797, 0.43917070432122901)
score = 0.45726538188815846
holdout = (0.773339243757637, 0.7509163103662021)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (101, 967)
train = (1.4695069227823183, 1.5018637991124786)
scores = (0.54682052261705894, 0.46628491175870351)
score = 0.5065527171878812
holdout = (0.78943547588916, 0.7499504204716093)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (101, 967)
train = (1.4695069227823183, 1.5018637991124786)
scores = (0.54682052261705894, 0.46628491175870351)
score = 0.5065527171878812
holdout = (0.78943547588916, 0.7499504204716093)
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (37, 672)
train = (1.4824169336948321, 1.6335913211288031)
scores = (0.49233223612975946, 0.461434747775817)
score = 0.47688349195278823
holdout = (0.7813773592027033, 0.7494068830957208)
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (86, 253)
train = (1.8982496228373495, 1.7330434681693416)
scores = (0.51412380646732625, 0.45640895675098014)
score = 0.4852663816091532
holdout = (0.7928529162201714, 0.7551471185907324)
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (82, 542)
train = (1.4586438666689414, 1.4435566877720871)
scores = (0.55232178760046746, 0.44588971549379686)
score = 0.49910575154713216
holdout = (0.7918997426672783, 0.746460687079241)
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (82, 542)
train = (1.4586438666689414, 1.4435566877720871)
scores = (0.55232178760046746, 0.44588971549379686)
score = 0.49910575154713216
holdout = (0.7918997426672783, 0.746460687079241)
>>> t = 2501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 142
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo)
            & index[1,2, 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:])} 
            & (
                | Drawdown[1:,20:,20:10] 
                | Since{Min&index[0,5]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[0,10]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [20:] 
      }
    | 
        <>Return{pure&~dd} & VP[10:] 
        | FracRec[21:,62:,125:,250:] 
    | 
        Time{ short}
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp1dd)
            & [3:,9:,12:,15:,18:,9:3,12:6,            15:9,21:15,12:3,15:6,15:3,21:9,21:6] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 125:] 
          )
      )
#<>#
0
#<>#
    <>0
len(samps) = 2
(frozenset({2010.5, 2012.25, 2012.5, 2013.25, 2013.5, 2014.5, 2009.75, 2010.75, 2011.75, 2012.0, 2013.0, 2014.0, 2015.0}), frozenset({2010.25, 2011.25, 2011.5, 2009.0, 2009.25, 2014.25, 2009.5, 2010.0, 2011.0, 2012.75, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (120, 2)
train = (1.4480693847807415, 0.61547111290228407)
scores = (0.44592798133149053, 0.32055936330883705)
score = 0.38324367232016376
holdout = (0.7514806568126802, 0.45179838990894594)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (103, 2)
train = (1.483985200718007, 0.58620779514176302)
scores = (0.5198896458345611, 0.33062101247895526)
score = 0.4252553291567582
holdout = (0.7762635415657497, 0.4385775708004351)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (4, 382)
train = (0.77011186584295754, 1.0778167153485763)
scores = (0.43774728727237117, 0.43837145788406412)
score = 0.43805937257821764
holdout = (0.5450171786724334, 0.667519543989467)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (4, 382)
train = (0.77011186584295754, 1.0778167153485763)
scores = (0.43774728727237117, 0.43837145788406412)
score = 0.43805937257821764
holdout = (0.5450171786724334, 0.667519543989467)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (70, 313)
train = (1.4478592299099091, 1.2036241867904269)
scores = (0.44217062561649961, 0.45727140367905167)
score = 0.44972101464777564
holdout = (0.7475105493440445, 0.6753168878274934)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (158, 517)
train = (1.7775425133450404, 1.6269755703413109)
scores = (0.53363090219499243, 0.48506146037086018)
score = 0.5093461812829263
holdout = (0.7963070019920928, 0.733326501041786)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (79, 289)
train = (1.3530474446173402, 1.1220868648815858)
scores = (0.47998122982246333, 0.4385868887303031)
score = 0.4592840592763832
holdout = (0.7379173281374918, 0.6757191683287975)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (158, 517)
train = (1.7775425133450404, 1.6269755703413109)
scores = (0.53363090219499243, 0.48506146037086018)
score = 0.5093461812829263
holdout = (0.7963070019920928, 0.733326501041786)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (55, 315)
train = (1.4952792055934583, 1.2918271264535577)
scores = (0.47165845190627165, 0.46124147353501443)
score = 0.46644996272064304
holdout = (0.7684953606386873, 0.6923764089215192)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (104, 359)
train = (1.8033947333593867, 1.7006401494238892)
scores = (0.52426589863147954, 0.46998007286491666)
score = 0.49712298574819813
holdout = (0.790128562101081, 0.7403732996225337)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (87, 308)
train = (1.4576779318651421, 1.1861784395344497)
scores = (0.50033565056954399, 0.46320203543058525)
score = 0.4817688430000646
holdout = (0.7672941853125979, 0.6962964030496369)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (104, 359)
train = (1.8033947333593867, 1.7006401494238892)
scores = (0.52426589863147954, 0.46998007286491666)
score = 0.49712298574819813
holdout = (0.790128562101081, 0.7403732996225337)
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (119, 253)
train = (1.6685263273824025, 1.3255517363420108)
scores = (0.48664989239715739, 0.49217998634130722)
score = 0.4894149393692323
holdout = (0.7872151516308452, 0.7089554263821406)
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (72, 275)
train = (1.8693715912232762, 1.7762559330584158)
scores = (0.517897031370818, 0.46760694886270965)
score = 0.49275199011676385
holdout = (0.7967310582695597, 0.7466724302356079)
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (68, 312)
train = (1.4487881814312138, 1.2576406314093893)
scores = (0.48622300179806666, 0.44290759867882634)
score = 0.4645653002384465
holdout = (0.7684626809899258, 0.7019852517499046)
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (72, 275)
train = (1.8693715912232762, 1.7762559330584158)
scores = (0.517897031370818, 0.46760694886270965)
score = 0.49275199011676385
holdout = (0.7967310582695597, 0.7466724302356079)
>>> t = 2502 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 142
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo)
            & index[1,2, 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:])} 
            & (
                | Drawdown[1:,20:,20:10] 
                | Since{Min&index[0,5]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[0,10]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [20:] 
      }
    | 
        <>Return{pure&~dd} & VP[10:] 
        | FracRec[21:,62:,125:,250:] 
    | 
        Time{ short}
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp1dd)
            & [3:,9:,12:,15:,18:,9:3,12:6,            15:9,21:15,12:3,15:6,15:3,21:9,21:6] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 125:] 
          )
      )
#<>#
0
#<>#
    <>0
len(samps) = 2
(frozenset({2010.25, 2010.0, 2011.25, 2012.75, 2009.0, 2013.0, 2009.5, 2010.75, 2011.75, 2012.5, 2013.75, 2014.25, 2015.0}), frozenset({2011.5, 2012.25, 2009.75, 2013.5, 2014.5, 2014.0, 2009.25, 2010.5, 2011.0, 2012.0, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (111, 1)
train = (1.0422996492517269, 0.67669117169028958)
scores = (0.392898889232001, 0.30979098894529178)
score = 0.3513449390886464
holdout = (0.6227368746489781, 0.4476042103668955)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (194, 1)
train = (1.2138183328473029, 0.52313555357629438)
scores = (0.40900628554615032, 0.27138278037418984)
score = 0.3401945329601701
holdout = (0.666495392715278, 0.36918171871269095)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (177, 184)
train = (1.1262198416758877, 1.0768877887436803)
scores = (0.40645954227926828, 0.35790520540182313)
score = 0.3821823738405457
holdout = (0.64627269439057, 0.64611164345342)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (177, 184)
train = (1.1262198416758877, 1.0768877887436803)
scores = (0.40645954227926828, 0.35790520540182313)
score = 0.3821823738405457
holdout = (0.64627269439057, 0.64611164345342)
>>> t = 2600 ===================================================================================================
(pair) len(F.columns) = 63
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 123
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 10:5] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [5:,10:,20:] 
      }
    | 
        <>FaceValue{ Open} 
        | Return{mix[1,3,4,5,6,7,11,16,17,18]}
        | Return{ af} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [3:,6:,9:,12:,15:,18:,6:3,9:6,15:12,18:12,12:3,21:12] 
          }
      )
    | 
        | FracRec[62:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2012.75, 2013.0, 2013.75, 2014.0, 2014.5, 2009.75, 2010.5, 2011.5, 2012.5, 2013.5, 2014.75, 2015.0}), frozenset({2010.25, 2011.25, 2011.75, 2012.25, 2009.0, 2009.25, 2009.5, 2010.0, 2011.0, 2012.0, 2013.25, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 60)
train = (0.72905648883917706, 0.90307181380359935)
scores = (0.22913617174492656, 0.39948800055219769)
score = 0.3143120861485621
holdout = (0.4788406905482062, 0.5834972111724192)
>>> t = 2601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 123
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 10:5] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 125:, 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & ( Volatility)
        & [5:,10:,20:] 
      }
    | 
        <>FaceValue{ Open} 
        | Return{mix[1,3,4,5,6,7,11,16,17,18]}
        | Return{ af} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [3:,6:,9:,12:,15:,18:,6:3,9:6,15:12,18:12,12:3,21:12] 
          }
      )
    | 
        | FracRec[62:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2011.25, 2011.5, 2012.25, 2009.0, 2013.75, 2014.0, 2009.25, 2015.0, 2011.0, 2012.0, 2013.0, 2014.5, 2015.25}), frozenset({2010.25, 2010.5, 2010.75, 2012.75, 2009.75, 2013.5, 2014.25, 2009.5, 2010.0, 2011.75, 2012.5, 2013.25, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (210, 157)
train = (1.2911628164675186, 1.1698670563866098)
scores = (0.43122299043870421, 0.33081386918311273)
score = 0.3810184298109085
holdout = (0.6599578807888818, 0.6526233552015933)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (182, 6)
train = (1.341975856380113, 0.76657565196231503)
scores = (0.44244704056798601, 0.28146080599975482)
score = 0.36195392328387044
holdout = (0.6658952360247681, 0.49962268107383956)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (193, 420)
train = (1.2509705568966285, 1.4423354271869797)
scores = (0.40177800193662028, 0.40664972082551631)
score = 0.4042138613810683
holdout = (0.6663571266726579, 0.7288807581958142)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (193, 420)
train = (1.2509705568966285, 1.4423354271869797)
scores = (0.40177800193662028, 0.40664972082551631)
score = 0.4042138613810683
holdout = (0.6663571266726579, 0.7288807581958142)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (136, 234)
train = (1.3524680801759719, 1.5494642033058847)
scores = (0.44306717187814226, 0.3692123046073128)
score = 0.40613973824272753
holdout = (0.6783576725642425, 0.7454387386679948)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (154, 4)
train = (1.5348864608164468, 0.96992335045189981)
scores = (0.46603528557306739, 0.33632602996667593)
score = 0.40118065776987166
holdout = (0.6938260531161811, 0.6032612622047867)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (177, 370)
train = (1.3287003319759321, 1.532582883720284)
scores = (0.39718536422624162, 0.41907927995721989)
score = 0.4081323220917308
holdout = (0.6771424618093581, 0.7512738080320833)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (177, 370)
train = (1.3287003319759321, 1.532582883720284)
scores = (0.39718536422624162, 0.41907927995721989)
score = 0.4081323220917308
holdout = (0.6771424618093581, 0.7512738080320833)
>>> t = 2700 ===================================================================================================
(pair) len(F.columns) = 44
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 62
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo|doc|daoc|vp1dd)
            & index[1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd)
            & [18:,6:3,9:6,15:12,21:18,            15:9,12:3,15:6,18:9,15:3,18:6,18:3,21:6] 
          }
      )
    | 
        <>AssetEnc{InUni} 
    | 
        Time{ short}
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(vp1dd)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{dd} & VP[1:, 10:] 
            & (
                | Drawdown[ 10:5] 
                | Since{Max & index[0,5,10]} 
                | Drawup[20:10] 
                | Since{Min & index[20]} 
              )
            & Since[21:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[1:,10:, 10:5,20:10] 
                | Since{Max & index[5]} 
                | Drawup[1:,20:] 
                | Since{Min & index[5,10]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return)
        & [1:,10:,60:] 
      }
    | 
        Time{long| short}
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.5, 2010.75, 2011.75, 2011.25, 2012.25, 2013.0, 2013.25, 2009.5, 2015.0, 2011.0, 2012.0, 2013.75, 2015.25}), frozenset({2010.0, 2012.75, 2009.25, 2009.75, 2014.5, 2014.25, 2014.0, 2009.0, 2010.25, 2011.5, 2012.5, 2013.5, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (455, 21)
train = (1.397951073008475, 0.6032390256346698)
scores = (0.47173331662314255, 0.22099783862780273)
score = 0.34636557762547265
holdout = (0.739892471484757, 0.3903015599662941)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (244, 43)
train = (1.2987021713798461, 0.69600222029133008)
scores = (0.47548912114875336, 0.21928983974698313)
score = 0.3473894804478682
holdout = (0.7209993214219903, 0.435374006220943)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (412, 59)
train = (1.2390001477749355, 0.66232196309003122)
scores = (0.42659134510489016, 0.21898662735279587)
score = 0.322788986228843
holdout = (0.6845796894132996, 0.4141067255043445)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (244, 43)
train = (1.2987021713798461, 0.69600222029133008)
scores = (0.47548912114875336, 0.21928983974698313)
score = 0.3473894804478682
holdout = (0.7209993214219903, 0.435374006220943)
>>> t = 2701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 62
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo|doc|daoc|vp1dd)
            & index[1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd)
            & [18:,6:3,9:6,15:12,21:18,            15:9,12:3,15:6,18:9,15:3,18:6,18:3,21:6] 
          }
      )
    | 
        <>AssetEnc{InUni} 
    | 
        Time{ short}
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(vp1dd)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | ( 
            <>Return{dd} & VP[1:, 10:] 
            & (
                | Drawdown[ 10:5] 
                | Since{Max & index[0,5,10]} 
                | Drawup[20:10] 
                | Since{Min & index[20]} 
              )
            & Since[21:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[1:,10:, 10:5,20:10] 
                | Since{Max & index[5]} 
                | Drawup[1:,20:] 
                | Since{Min & index[5,10]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return)
        & [1:,10:,60:] 
      }
    | 
        Time{long| short}
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[1]
      }
len(samps) = 2
(frozenset({2011.75, 2009.0, 2009.25, 2013.5, 2013.0, 2014.25, 2009.75, 2010.25, 2011.5, 2012.5, 2013.25, 2014.0, 2015.0}), frozenset({2010.5, 2010.75, 2011.25, 2012.25, 2012.75, 2014.5, 2009.5, 2010.0, 2011.0, 2012.0, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (4, 17)
train = (0.52093674952769453, 0.56547437261011113)
scores = (0.27961204433773301, 0.21670626713664864)
score = 0.24815915573719083
holdout = (0.3529159536211402, 0.3964223138263631)
>>> t = 2800 ===================================================================================================
(pair) len(F.columns) = 51
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 111
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [12:,15:,9:6,9:3,            15:9,21:15,12:3,15:3,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Max & index[10]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [12:,15:,9:6,9:3,            15:9,21:15,12:3,15:3,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Max & index[10]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp1dd|vp5dd)
            & [3:,6:,12:9,15:12,18:15,9:3,            15:9,18:12,12:3,21:12,18:6,21:9,18:3] 
          }
        | ( 
            <>Return{dd} & VP[1:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 10:5,20:10] 
                | Since{Max & index[0,5]} 
                | Since{Min & index[0,5,10]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| Volatility)
        & [60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.5, 2010.0, 2010.75, 2012.0, 2012.75, 2009.0, 2014.25, 2014.5, 2009.75, 2010.25, 2011.75, 2012.5, 2014.75}), frozenset({2011.25, 2011.5, 2009.25, 2013.25, 2013.5, 2013.75, 2009.5, 2015.0, 2011.0, 2012.25, 2013.0, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 13)
train = (0.59375750445371878, 0.6456837680569778)
scores = (0.38169794099852311, 0.3554719388195598)
score = 0.36858493990904145
holdout = (0.4631470491316971, 0.47011826559502606)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (28, 40)
train = (0.76634296033449689, 0.67898665950015358)
scores = (0.36791098898652069, 0.27833293166966233)
score = 0.3231219603280915
holdout = (0.5332649640187277, 0.4501700937885025)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (107, 50)
train = (0.9141353697846728, 0.71423459553402113)
scores = (0.38639831650601214, 0.39280043907845685)
score = 0.3895993777922345
holdout = (0.5863543805276857, 0.5105187674876434)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (107, 50)
train = (0.9141353697846728, 0.71423459553402113)
scores = (0.38639831650601214, 0.39280043907845685)
score = 0.3895993777922345
holdout = (0.5863543805276857, 0.5105187674876434)
>>> t = 2801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 111
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [12:,15:,9:6,9:3,            15:9,21:15,12:3,15:3,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Max & index[10]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [12:,15:,9:6,9:3,            15:9,21:15,12:3,15:3,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[20]} 
              )
            & Since[21:, 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Max & index[10]} 
                | Since{Min & index[0,10]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp1dd|vp5dd)
            & [3:,6:,12:9,15:12,18:15,9:3,            15:9,18:12,12:3,21:12,18:6,21:9,18:3] 
          }
        | ( 
            <>Return{dd} & VP[1:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 10:5,20:10] 
                | Since{Max & index[0,5]} 
                | Since{Min & index[0,5,10]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| Volatility)
        & [60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.25, 2011.75, 2012.0, 2012.5, 2009.0, 2013.75, 2009.5, 2010.0, 2011.0, 2012.25, 2013.5, 2014.75, 2015.25}), frozenset({2010.5, 2011.5, 2009.75, 2013.25, 2014.25, 2014.0, 2009.25, 2010.75, 2011.25, 2012.75, 2013.0, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (160, 4)
train = (0.96832847135841493, 0.61408030484345688)
scores = (0.3879947458817305, 0.40313378644558795)
score = 0.39556426616365925
holdout = (0.6051665461375658, 0.4984227002997085)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (56, 2)
train = (0.85214004675454014, 0.52899144478539462)
scores = (0.38288427417703308, 0.37211957326127898)
score = 0.37750192371915603
holdout = (0.5616054462165154, 0.45311392303071746)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 3)
train = (0.54791995001014693, 0.61915350564294636)
scores = (0.38963699947077329, 0.40103366670725149)
score = 0.39533533308901236
holdout = (0.44459703366813214, 0.48438723557423197)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (160, 4)
train = (0.96832847135841493, 0.61408030484345688)
scores = (0.3879947458817305, 0.40313378644558795)
score = 0.39556426616365925
holdout = (0.6051665461375658, 0.4984227002997085)
>>> t = 2900 ===================================================================================================
(pair) len(F.columns) = 36
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 60
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo)
            & index[0,2, 0:1,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:] 
                | Since{Max&index[10]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        | Return{ it} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|acc|dcc|vp1dd)
            & index[2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd)
            & [3:,6:,9:,12:,18:,6:3,9:6,12:9,21:18,9:3,12:6,12:3,15:6,21:12,15:3,18:3,21:6,21:3] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.5, 2011.0, 2012.0, 2012.25, 2009.25, 2013.25, 2014.75, 2009.5, 2010.75, 2011.5, 2012.75, 2013.75, 2014.0}), frozenset({2010.25, 2015.0, 2011.75, 2009.75, 2013.5, 2014.25, 2009.0, 2010.0, 2011.25, 2012.5, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (111, 294)
train = (0.81013757720473711, 0.8682805492643646)
scores = (0.42723830310857552, 0.27937993060044847)
score = 0.353309116854512
holdout = (0.5844609155530602, 0.5233371873447323)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (72, 159)
train = (0.75419685614033904, 0.76180567716811431)
scores = (0.41293892652241032, 0.28995916517431952)
score = 0.3514490458483649
holdout = (0.557099678892844, 0.49957640901885125)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (139, 308)
train = (0.83043486552358003, 0.83218824103570121)
scores = (0.42374801191501504, 0.28278217832221159)
score = 0.3532650951186133
holdout = (0.5803078666805787, 0.5018826524790565)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (111, 294)
train = (0.81013757720473711, 0.8682805492643646)
scores = (0.42723830310857552, 0.27937993060044847)
score = 0.353309116854512
holdout = (0.5844609155530602, 0.5233371873447323)
>>> t = 2901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 60
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo)
            & index[0,2, 0:1,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:] 
                | Since{Max&index[10]} 
                | Since{Min&index[0]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
        | Return{ it} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|acc|dcc|vp1dd)
            & index[2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd)
            & [3:,6:,9:,12:,18:,6:3,9:6,12:9,21:18,9:3,12:6,12:3,15:6,21:12,15:3,18:3,21:6,21:3] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.25, 2009.5, 2009.0, 2013.25, 2014.75, 2014.0, 2009.25, 2010.0, 2011.25, 2012.5, 2013.0, 2014.25, 2015.0}), frozenset({2010.5, 2011.5, 2011.75, 2012.25, 2012.75, 2013.75, 2009.75, 2010.75, 2011.0, 2012.0, 2013.5, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (356, 174)
train = (0.8237499481079873, 1.0399006637151795)
scores = (0.38304258207681396, 0.42823952257379339)
score = 0.4056410523253037
holdout = (0.5581772393231332, 0.6281797076006407)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (170, 89)
train = (0.76449014386545466, 1.0127122298764411)
scores = (0.37106565980472839, 0.41346716647254222)
score = 0.3922664131386353
holdout = (0.5300365409334793, 0.6155354748323794)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (219, 298)
train = (0.71067020312650953, 1.0283184511014549)
scores = (0.381224045359428, 0.41056681602124145)
score = 0.3958954306903347
holdout = (0.5203403379319623, 0.6170157936980476)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (356, 174)
train = (0.8237499481079873, 1.0399006637151795)
scores = (0.38304258207681396, 0.42823952257379339)
score = 0.4056410523253037
holdout = (0.5581772393231332, 0.6281797076006407)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (71, 246)
train = (0.71791657304570977, 1.3405987595245734)
scores = (0.37136059479007211, 0.42838758321350723)
score = 0.39987408900178967
holdout = (0.5205356208391855, 0.7073580964445814)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (121, 93)
train = (0.84651136995794962, 1.3369502891140737)
scores = (0.38711176582153156, 0.40814535217740849)
score = 0.39762855899947
holdout = (0.558715235888956, 0.7044978983071651)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (171, 333)
train = (0.7369514945995812, 1.193461953385951)
scores = (0.38309715553321361, 0.42314152280837364)
score = 0.4031193391707936
holdout = (0.5314500903595456, 0.6711946195881874)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (171, 333)
train = (0.7369514945995812, 1.193461953385951)
scores = (0.38309715553321361, 0.42314152280837364)
score = 0.4031193391707936
holdout = (0.5314500903595456, 0.6711946195881874)
>>> t = 3000 ===================================================================================================
(pair) len(F.columns) = 137
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 160
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doc|daoc|vp1dd)
            & index[0,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|Volatility)
            & [9:,6:3,15:12,18:15,21:18,12:6,            15:9,18:12,12:3,15:6,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 10:5,20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 125:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo)
            & index[0,1,2,1:2,0:2] 
          }
        | ( 
            <> Volatility[20:] 
            | Volatility[10:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[0,5,10]} 
                | Drawup[ 5:,10:, 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.5, 2015.25, 2012.0, 2009.0, 2009.5, 2014.75, 2014.25, 2014.5, 2009.25, 2010.75, 2012.75, 2014.0, 2015.0}), frozenset({2010.0, 2011.25, 2011.5, 2011.75, 2012.5, 2013.25, 2013.5, 2013.75, 2009.75, 2010.25, 2011.0, 2012.25, 2013.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (677, 248)
train = (1.0394908309211055, 1.6216272136754422)
scores = (0.41462359652171005, 0.27971806198296734)
score = 0.34717082925233866
holdout = (0.609374640856149, 0.664412043350436)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (331, 199)
train = (0.95628475241149113, 1.6334320801351196)
scores = (0.39217848946607525, 0.26794354656753194)
score = 0.3300610180168036
holdout = (0.5711136299461744, 0.6854638479967814)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (399, 154)
train = (0.93247740507743271, 1.3075414516363042)
scores = (0.40726140314965031, 0.26886494899278768)
score = 0.338063176071219
holdout = (0.5920564935712792, 0.5946277944023668)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (677, 248)
train = (1.0394908309211055, 1.6216272136754422)
scores = (0.41462359652171005, 0.27971806198296734)
score = 0.34717082925233866
holdout = (0.609374640856149, 0.664412043350436)
>>> t = 3001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 160
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doc|daoc|vp1dd)
            & index[0,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|Volatility)
            & [9:,6:3,15:12,18:15,21:18,12:6,            15:9,18:12,12:3,15:6,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 10:5,20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 125:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo)
            & index[0,1,2,1:2,0:2] 
          }
        | ( 
            <> Volatility[20:] 
            | Volatility[10:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[0,5,10]} 
                | Drawup[ 5:,10:, 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.5, 2010.25, 2009.25, 2013.75, 2014.25, 2014.5, 2009.0, 2010.75, 2011.5, 2012.5, 2013.0, 2014.75, 2015.25}), frozenset({2011.0, 2011.25, 2012.25, 2012.75, 2009.75, 2013.5, 2009.5, 2010.0, 2011.75, 2012.0, 2013.25, 2014.0, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (217, 50)
train = (0.91999715044952213, 1.0246285632263854)
scores = (0.29597543106065283, 0.33328079354113388)
score = 0.3146281123008934
holdout = (0.5466158401991582, 0.581089718400177)
>>> t = 3100 ===================================================================================================
(pair) len(F.columns) = 20
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 42
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doc)
            & index[0,1, 0:1,0:2] 
          }
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP| Volatility)
        & [10:,20:,60:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.75, 2011.0, 2012.75, 2012.25, 2009.0, 2013.5, 2009.75, 2010.0, 2011.75, 2012.0, 2013.75, 2015.25}), frozenset({2011.5, 2009.25, 2013.25, 2014.5, 2014.25, 2014.0, 2009.5, 2010.5, 2011.25, 2012.5, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (39, 3)
train = (0.59673472948512241, 0.52601763377686539)
scores = (0.21425672447596081, 0.24227364822944078)
score = 0.2282651863527008
holdout = (0.3631051422281618, 0.3284740442086748)
>>> t = 3101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 42
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doc)
            & index[0,1, 0:1,0:2] 
          }
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP| Volatility)
        & [10:,20:,60:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.75, 2010.0, 2011.5, 2012.25, 2012.5, 2009.0, 2009.5, 2009.75, 2010.5, 2011.0, 2012.0, 2013.75, 2014.75}), frozenset({2015.0, 2011.75, 2013.25, 2013.5, 2014.25, 2014.0, 2009.25, 2010.25, 2011.25, 2012.75, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (27, 15)
train = (0.53983520763460624, 0.56935529864565015)
scores = (0.24621203351597229, 0.20184470332529347)
score = 0.2240283684206329
holdout = (0.3540155248124373, 0.30016163906317994)
>>> t = 3200 ===================================================================================================
(pair) len(F.columns) = 61
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 107
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|acc|doc)
            & index[0,2, 0:1,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[1:,10:,20:,20:10] 
                | Since{Min&index[20]} 
              )
            & Since[21:] 
          )
        | ( 
            <>Return{dd} & VP[1:, 10:] 
            & (
                | Drawdown[1:,20:] 
                | Since{Max & index[10,20]} 
                | Since{Min & index[0,5]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [5:] 
      }
    | 
        | FracRec[21:] 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doc|vp1dd)
            & index[0, 0:1,1:2,0:2] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|doo|daoc)
            & index[ 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo)
            & [10:,15:,10:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Min&index[20]} 
              )
            & Since[21:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[20]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| Volatility)
        & [5:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2011.0, 2009.5, 2013.0, 2013.5, 2014.75, 2014.5, 2009.75, 2010.0, 2011.25, 2012.5, 2013.25, 2014.0, 2015.0}), frozenset({2010.25, 2010.75, 2011.75, 2012.25, 2012.75, 2009.25, 2009.0, 2010.5, 2011.5, 2012.0, 2013.75, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (164, 34)
train = (1.0775423729363656, 0.54478195377669647)
scores = (0.24921205657628626, 0.36102878116330051)
score = 0.30512041886979335
holdout = (0.5490428052470981, 0.43768368199783275)
>>> t = 3201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 107
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|acc|doc)
            & index[0,2, 0:1,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                | Drawdown[1:,10:,20:,20:10] 
                | Since{Min&index[20]} 
              )
            & Since[21:] 
          )
        | ( 
            <>Return{dd} & VP[1:, 10:] 
            & (
                | Drawdown[1:,20:] 
                | Since{Max & index[10,20]} 
                | Since{Min & index[0,5]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [5:] 
      }
    | 
        | FracRec[21:] 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doc|vp1dd)
            & index[0, 0:1,1:2,0:2] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|doo|daoc)
            & index[ 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo)
            & [10:,15:,10:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Min&index[20]} 
              )
            & Since[21:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[20]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| Volatility)
        & [5:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.5, 2010.25, 2011.25, 2011.5, 2012.25, 2012.5, 2013.25, 2009.75, 2010.0, 2011.0, 2012.0, 2013.0, 2014.5}), frozenset({2015.0, 2009.0, 2009.25, 2013.75, 2014.25, 2014.0, 2009.5, 2010.75, 2011.75, 2012.75, 2013.5, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (97, 1)
train = (0.93702804019207364, 0.53201427814449498)
scores = (0.32444620903747534, 0.31395468432893808)
score = 0.3192004466832067
holdout = (0.5288236749585671, 0.4049152532990549)
>>> t = 3300 ===================================================================================================
(pair) len(F.columns) = 95
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 130
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|daoc|vp1dd)
            & index[0,1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd)
            & [9:,15:,9:3,            15:9,21:15,15:6,18:9,21:12,18:6,21:9,18:3,21:6,21:3] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Min & index[10]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo|doo|daoc|vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                | Drawdown[10:,20:, 10:5,20:10] 
                | Drawup[1:] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                <>Drawdown[20:10] 
                | Drawup[20:] 
                | Since{Min & index[5]} 
              )
            & Since[ 62:, 125:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo)
            & [6:,9:,15:,18:,9:6,15:12,9:3,12:6,12:3,15:6,18:3,21:6,21:3] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:] 
                | Since{Max & index[5]} 
                | Drawup[20:] 
                | Since{Min & index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:,10:] 
      }
    | 
        | FracRec[21:,62:,125:,250:] 
#<>#
    <>0
    | Corr & Corr{ 
        <>[62]
        & ay[1,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2012.5, 2012.25, 2009.75, 2009.25, 2009.0, 2013.25, 2009.5, 2010.25, 2011.75, 2012.0, 2013.75, 2014.25, 2015.25}), frozenset({2010.5, 2010.75, 2011.25, 2011.5, 2013.5, 2014.5, 2014.0, 2010.0, 2011.0, 2012.75, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (141, 170)
train = (0.89238149025814062, 1.1584613781647846)
scores = (0.47127019160295514, 0.22094377860945255)
score = 0.34610698510620386
holdout = (0.547319828985217, 0.5844123228332045)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (158, 2)
train = (0.94968346371492618, 0.61924335973199118)
scores = (0.52158664042420799, 0.16684090481122366)
score = 0.3442137726177158
holdout = (0.5564670063632166, 0.3814246872231261)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (16, 3)
train = (0.72575514026287746, 0.57001425625022051)
scores = (0.39904443423834668, 0.15437261555706477)
score = 0.2767085248977057
holdout = (0.5129639597543642, 0.31013358451920925)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (141, 170)
train = (0.89238149025814062, 1.1584613781647846)
scores = (0.47127019160295514, 0.22094377860945255)
score = 0.34610698510620386
holdout = (0.547319828985217, 0.5844123228332045)
>>> t = 3301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 130
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|daoc|vp1dd)
            & index[0,1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd)
            & [9:,15:,9:3,            15:9,21:15,15:6,18:9,21:12,18:6,21:9,18:3,21:6,21:3] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Min & index[10]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo|doo|daoc|vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                | Drawdown[10:,20:, 10:5,20:10] 
                | Drawup[1:] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                <>Drawdown[20:10] 
                | Drawup[20:] 
                | Since{Min & index[5]} 
              )
            & Since[ 62:, 125:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo)
            & [6:,9:,15:,18:,9:6,15:12,9:3,12:6,12:3,15:6,18:3,21:6,21:3] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:] 
                | Since{Max & index[5]} 
                | Drawup[20:] 
                | Since{Min & index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:,10:] 
      }
    | 
        | FracRec[21:,62:,125:,250:] 
#<>#
    <>0
    | Corr & Corr{ 
        <>[62]
        & ay[1,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.0, 2012.75, 2009.25, 2013.5, 2013.25, 2014.75, 2009.0, 2010.25, 2011.25, 2012.0, 2013.0, 2014.5, 2015.0}), frozenset({2010.75, 2011.5, 2011.75, 2012.5, 2009.75, 2014.0, 2009.5, 2010.5, 2011.0, 2012.25, 2013.75, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (4, 126)
train = (0.62414531411486107, 1.5082940951808437)
scores = (0.23080791185910701, 0.41307232488490742)
score = 0.3219401183720072
holdout = (0.43636720900714204, 0.7148532837631055)
>>> t = 3400 ===================================================================================================
(pair) len(F.columns) = 38
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 77
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|aoo|acc|dcc|daoc)
            & index[0,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|Volatility)
            & [12:,9:6,            15:9,18:12,21:15,12:3,15:6,18:9,15:3,18:6,18:3,21:6] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:])} 
            & (
                | Drawdown[ 5:,10:,20:10] 
                | Since{Max&index[0]} 
                | Drawup[ 5:] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.5, 2015.0, 2012.75, 2009.0, 2013.25, 2013.5, 2009.5, 2010.0, 2011.75, 2012.25, 2013.75, 2014.5, 2015.25}), frozenset({2010.75, 2011.25, 2011.5, 2012.5, 2009.75, 2014.25, 2014.0, 2009.25, 2010.25, 2011.0, 2012.0, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (18, 13)
train = (0.76218941866947088, 0.53774198390450412)
scores = (0.3142688867078266, 0.34939570133432474)
score = 0.33183229402107567
holdout = (0.485398480993479, 0.3927907195687954)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (6, 191)
train = (0.73970521815411983, 1.1288781599598701)
scores = (0.30314339677006924, 0.31170348969982881)
score = 0.307423443234949
holdout = (0.4733530227684581, 0.6081996181928057)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (154, 51)
train = (0.93996974453117965, 0.74545779867591766)
scores = (0.33717904776784241, 0.43528492032064581)
score = 0.3862319840442441
holdout = (0.5763308945186348, 0.5236772782181256)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (154, 51)
train = (0.93996974453117965, 0.74545779867591766)
scores = (0.33717904776784241, 0.43528492032064581)
score = 0.3862319840442441
holdout = (0.5763308945186348, 0.5236772782181256)
>>> t = 3401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 77
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|aoo|acc|dcc|daoc)
            & index[0,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|Volatility)
            & [12:,9:6,            15:9,18:12,21:15,12:3,15:6,18:9,15:3,18:6,18:3,21:6] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:])} 
            & (
                | Drawdown[ 5:,10:,20:10] 
                | Since{Max&index[0]} 
                | Drawup[ 5:] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2011.25, 2011.0, 2012.25, 2012.0, 2014.5, 2009.25, 2010.75, 2011.5, 2012.75, 2013.5, 2014.0, 2015.0}), frozenset({2010.5, 2009.0, 2009.75, 2013.25, 2013.75, 2014.25, 2009.5, 2010.25, 2011.75, 2012.5, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (316, 217)
train = (1.393725134118956, 1.0137123313783623)
scores = (0.40975395217676741, 0.3976755659912718)
score = 0.4037147590840196
holdout = (0.7111851813991066, 0.628342760576523)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (286, 410)
train = (1.3902625954641428, 1.2333773387194122)
scores = (0.40264883639375965, 0.39008134916614173)
score = 0.3963650927799507
holdout = (0.7112133270003155, 0.6678618725124754)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (174, 237)
train = (1.205389067568952, 0.9768296646176885)
scores = (0.47020511023947159, 0.40098905574868776)
score = 0.4355970829940797
holdout = (0.6417629309021372, 0.6239433308800191)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (174, 237)
train = (1.205389067568952, 0.9768296646176885)
scores = (0.47020511023947159, 0.40098905574868776)
score = 0.4355970829940797
holdout = (0.6417629309021372, 0.6239433308800191)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (242, 215)
train = (1.4908861588937901, 1.1350079726731108)
scores = (0.43077420501278163, 0.41334562375948719)
score = 0.42205991438613444
holdout = (0.7416489520146512, 0.6697478728465525)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (245, 299)
train = (1.5920247517808264, 1.3523931342030817)
scores = (0.4058270780051339, 0.38293447403397235)
score = 0.3943807760195531
holdout = (0.745770731777948, 0.6898112718728944)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (321, 184)
train = (1.4778870381700828, 1.0222838608077676)
scores = (0.50571145492394542, 0.407263153292173)
score = 0.4564873041080592
holdout = (0.7440244782630513, 0.6398496226089676)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (321, 184)
train = (1.4778870381700828, 1.0222838608077676)
scores = (0.50571145492394542, 0.407263153292173)
score = 0.4564873041080592
holdout = (0.7440244782630513, 0.6398496226089676)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (5, 336)
train = (0.92597783653261945, 1.3392554478379231)
scores = (0.36536679849930193, 0.41858430181549683)
score = 0.3919755501573994
holdout = (0.5180362501653549, 0.713988798159048)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (205, 173)
train = (1.7524259920781304, 1.3663506101480354)
scores = (0.43366752808460557, 0.38597432825807093)
score = 0.40982092817133825
holdout = (0.7730178520984343, 0.6914246809177338)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (273, 228)
train = (1.5380573096017296, 1.1584539024166534)
scores = (0.50608524919198972, 0.4189846005409007)
score = 0.4625349248664452
holdout = (0.7569073934011973, 0.6827607152462793)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (273, 228)
train = (1.5380573096017296, 1.1584539024166534)
scores = (0.50608524919198972, 0.4189846005409007)
score = 0.4625349248664452
holdout = (0.7569073934011973, 0.6827607152462793)
>>> t = 3402 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 77
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|aoo|acc|dcc|daoc)
            & index[0,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|Volatility)
            & [12:,9:6,            15:9,18:12,21:15,12:3,15:6,18:9,15:3,18:6,18:3,21:6] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[10:])} 
            & (
                | Drawdown[ 5:,10:,20:10] 
                | Since{Max&index[0]} 
                | Drawup[ 5:] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.75, 2012.25, 2012.5, 2009.0, 2014.75, 2009.5, 2010.25, 2011.0, 2012.75, 2013.25, 2014.0, 2015.0}), frozenset({2011.5, 2011.75, 2009.75, 2013.5, 2013.75, 2014.25, 2009.25, 2010.5, 2011.25, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (144, 12)
train = (0.98272528178456031, 0.63899729117450488)
scores = (0.28499303245760049, 0.34787032274182794)
score = 0.31643167759971425
holdout = (0.5531140408020783, 0.4424630370053206)
>>> t = 3500 ===================================================================================================
(pair) len(F.columns) = 33
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 51
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo|dcc)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [5:,10:,15:,15:10,15:5,20:10,20:5] 
          }
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|daoc|vp1dd)
            & index[2, 0:1,0:2] 
          }
      )
    | 
        <>Return{mix[1,5,8,9,11,12,14,15]}
        | Return{rr} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.0, 2012.25, 2009.25, 2009.75, 2013.5, 2013.75, 2009.5, 2010.25, 2011.0, 2012.75, 2013.25, 2014.0, 2015.0}), frozenset({2010.75, 2011.5, 2011.75, 2012.5, 2014.5, 2014.25, 2009.0, 2010.5, 2011.25, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (229, 159)
train = (0.92933035320222634, 0.8038638565715398)
scores = (0.32701289815496043, 0.37199140065835457)
score = 0.34950214940665747
holdout = (0.5185519636909203, 0.5485386552772391)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (168, 176)
train = (1.0082803839975674, 0.84151763233607391)
scores = (0.32220689833603272, 0.39819316474492683)
score = 0.36020003154047975
holdout = (0.5521990470886764, 0.5678734963833589)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (292, 230)
train = (0.82336782272330988, 0.75147131490203256)
scores = (0.34087550407673356, 0.3904868113894453)
score = 0.3656811577330894
holdout = (0.49250688017963495, 0.5308922288287928)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (292, 230)
train = (0.82336782272330988, 0.75147131490203256)
scores = (0.34087550407673356, 0.3904868113894453)
score = 0.3656811577330894
holdout = (0.49250688017963495, 0.5308922288287928)
>>> t = 3501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 51
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo|dcc)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [5:,10:,15:,15:10,15:5,20:10,20:5] 
          }
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|daoc|vp1dd)
            & index[2, 0:1,0:2] 
          }
      )
    | 
        <>Return{mix[1,5,8,9,11,12,14,15]}
        | Return{rr} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.25, 2015.25, 2011.75, 2011.5, 2011.0, 2013.25, 2013.75, 2010.0, 2011.25, 2012.25, 2013.5, 2014.75, 2015.0}), frozenset({2010.75, 2012.5, 2012.75, 2009.0, 2009.25, 2009.75, 2014.25, 2014.0, 2009.5, 2010.5, 2012.0, 2013.0, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (452, 27)
train = (1.1401554109311758, 0.47775332694769057)
scores = (0.23701881485485973, 0.42593602053747193)
score = 0.33147741769616584
holdout = (0.5427630149783641, 0.42563633774774445)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (353, 34)
train = (1.2512867818354592, 0.4932583170842581)
scores = (0.23676585753414831, 0.41828714033347997)
score = 0.32752649893381414
holdout = (0.5900573391985099, 0.420310845533251)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (253, 97)
train = (0.85818734305550537, 0.57197796759176156)
scores = (0.21019394435754571, 0.44356858721127534)
score = 0.3268812657844105
holdout = (0.4530184415455182, 0.46606571527052826)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (452, 27)
train = (1.1401554109311758, 0.47775332694769057)
scores = (0.23701881485485973, 0.42593602053747193)
score = 0.33147741769616584
holdout = (0.5427630149783641, 0.42563633774774445)
>>> t = 3600 ===================================================================================================
(pair) len(F.columns) = 20
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 59
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doo|daoc|vp1dd)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | ( 
            | Volatility[10:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[5]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doo|daoc|vp1dd)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | ( 
            | Volatility[10:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[5]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[62]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.75, 2012.5, 2009.25, 2013.25, 2013.75, 2013.5, 2009.0, 2010.25, 2011.5, 2012.75, 2013.0, 2015.0}), frozenset({2011.25, 2011.75, 2012.25, 2009.75, 2014.5, 2014.25, 2014.0, 2009.5, 2010.5, 2011.0, 2012.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 77)
train = (0.49123092405539875, 0.99455412252719699)
scores = (0.32719278799805462, 0.35249848029864939)
score = 0.339845634148352
holdout = (0.33046672398695515, 0.5220862711898345)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (7, 22)
train = (0.50839261474555342, 0.77352264089158973)
scores = (0.34338343712808733, 0.27798098385612013)
score = 0.31068221049210376
holdout = (0.3394899122705568, 0.43849026016110015)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (24, 21)
train = (0.59256132724439492, 0.78004512076830701)
scores = (0.26728083173843675, 0.27014444575947366)
score = 0.26871263874895523
holdout = (0.3584426943871077, 0.3862739005531698)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (3, 77)
train = (0.49123092405539875, 0.99455412252719699)
scores = (0.32719278799805462, 0.35249848029864939)
score = 0.339845634148352
holdout = (0.33046672398695515, 0.5220862711898345)
>>> t = 3601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 59
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doo|daoc|vp1dd)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | ( 
            | Volatility[10:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[5]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc|doo|daoc|vp1dd)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | ( 
            | Volatility[10:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[5]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[62]
        & ay[1,20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.75, 2011.5, 2012.5, 2014.75, 2014.5, 2009.25, 2010.5, 2011.25, 2012.25, 2013.5, 2014.25, 2015.25}), frozenset({2011.75, 2012.75, 2009.0, 2009.75, 2013.25, 2013.75, 2009.5, 2010.25, 2011.0, 2012.0, 2013.0, 2014.0, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (43, 621)
train = (0.81080683213189653, 1.1405771180767972)
scores = (0.31823890583516001, 0.32541327135785525)
score = 0.32182608859650763
holdout = (0.46228031778579, 0.5770938564729043)
>>> t = 3700 ===================================================================================================
(pair) len(F.columns) = 14
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 39
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [10:,15:,10:5,15:10,15:5,20:10,20:5] 
          }
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,10:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
    | 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.5, 2010.0, 2011.25, 2011.0, 2012.5, 2013.5, 2009.75, 2010.75, 2011.5, 2012.0, 2013.25, 2014.0, 2015.25}), frozenset({2012.75, 2009.0, 2009.25, 2013.75, 2014.5, 2014.25, 2009.5, 2010.25, 2011.75, 2012.25, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (150, 28)
train = (1.0286152141596336, 0.67680118719413074)
scores = (0.37765452608336891, 0.34986832524630318)
score = 0.36376142566483605
holdout = (0.5974871693793282, 0.48831577290862216)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (100, 27)
train = (1.0554386217527145, 0.73195016303048077)
scores = (0.38154664745597827, 0.36327911040289596)
score = 0.3724128789294371
holdout = (0.6199132512112602, 0.5065971101312866)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (320, 69)
train = (1.0788585036734675, 0.63319313422983692)
scores = (0.40826010440471472, 0.40015209999554202)
score = 0.40420610220012837
holdout = (0.623340383545471, 0.4961830741125498)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (320, 69)
train = (1.0788585036734675, 0.63319313422983692)
scores = (0.40826010440471472, 0.40015209999554202)
score = 0.40420610220012837
holdout = (0.623340383545471, 0.4961830741125498)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (345, 3)
train = (1.2977507158323216, 0.63535899872081258)
scores = (0.38459843238291808, 0.36466397684411089)
score = 0.3746312046135145
holdout = (0.7009238289027274, 0.46109155088916187)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (86, 26)
train = (1.2316706535931006, 0.87159361955504178)
scores = (0.37595153322281677, 0.36369206013403926)
score = 0.369821796678428
holdout = (0.6792052238601239, 0.5588662876544297)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (250, 9)
train = (1.1079140106300356, 0.58306024087373853)
scores = (0.40793612930546747, 0.38501247356149937)
score = 0.3964743014334834
holdout = (0.637944935915283, 0.460292659471417)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (250, 9)
train = (1.1079140106300356, 0.58306024087373853)
scores = (0.40793612930546747, 0.38501247356149937)
score = 0.3964743014334834
holdout = (0.637944935915283, 0.460292659471417)
>>> t = 3701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 39
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [10:,15:,10:5,15:10,15:5,20:10,20:5] 
          }
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,10:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
    | 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.5, 2010.0, 2011.5, 2009.0, 2013.0, 2013.5, 2013.75, 2009.5, 2010.75, 2011.75, 2012.0, 2013.25, 2014.75}), frozenset({2015.0, 2011.25, 2012.5, 2012.75, 2009.75, 2014.25, 2014.0, 2009.25, 2010.25, 2011.0, 2012.25, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (202, 29)
train = (0.90426974085912304, 0.65683629856281966)
scores = (0.36441966571062956, 0.37224796665240395)
score = 0.3683338161815167
holdout = (0.5776612420609083, 0.4931554965474565)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (417, 37)
train = (1.1477357673434023, 0.76615242131956829)
scores = (0.40784978781538056, 0.37430481443919617)
score = 0.39107730112728833
holdout = (0.6685647665774078, 0.5404013968490361)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (84, 61)
train = (0.70826717458388144, 0.66357870414694531)
scores = (0.33304055290612711, 0.39030259205685014)
score = 0.3616715724814886
holdout = (0.4865244953481663, 0.5067413498846239)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (417, 37)
train = (1.1477357673434023, 0.76615242131956829)
scores = (0.40784978781538056, 0.37430481443919617)
score = 0.39107730112728833
holdout = (0.6685647665774078, 0.5404013968490361)
>>> t = 3800 ===================================================================================================
(pair) len(F.columns) = 83
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 118
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|acc|daoc)
            & index[0,1, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:,10:5,15:5,20:10,20:5] 
          }
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( VP)
        & [1:,10:,20:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|dcc|vp1dd)
            & index[2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [9:,12:,15:,18:,6:3,12:9,15:12,18:15,9:3,12:6,18:12,21:15,12:3,15:6,18:9,21:12,18:3,21:6] 
          }
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Since{Min & index[0]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp1dd)
            & [15:,15:10,20:10,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Since{Max & index[0,5,10,20]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| Volatility)
        & [1:,20:,60:] 
      }
    | 
        Time{long| short}
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.5, 2011.75, 2011.5, 2009.25, 2013.0, 2014.0, 2009.5, 2010.25, 2011.0, 2012.5, 2013.5, 2014.25, 2015.25}), frozenset({2010.0, 2012.25, 2012.75, 2009.75, 2013.75, 2014.5, 2009.0, 2010.75, 2011.25, 2012.0, 2013.25, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 349)
train = (0.48463237789553471, 1.0542927283436514)
scores = (0.36065847879827201, 0.33358616224495474)
score = 0.3471223205216134
holdout = (0.3847078568346275, 0.6157235230209965)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 516)
train = (0.52359986985154883, 1.0985486266389701)
scores = (0.34259882807090319, 0.35015045197573441)
score = 0.3463746400233188
holdout = (0.3911789256684461, 0.6213315710070156)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 430)
train = (0.45118683338815246, 1.0474111398743338)
scores = (0.34982646883727192, 0.34967734663831396)
score = 0.34975190773779297
holdout = (0.3652916119044336, 0.6255388960078518)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (1, 430)
train = (0.45118683338815246, 1.0474111398743338)
scores = (0.34982646883727192, 0.34967734663831396)
score = 0.34975190773779297
holdout = (0.3652916119044336, 0.6255388960078518)
>>> t = 3801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 118
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|acc|daoc)
            & index[0,1, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:,10:5,15:5,20:10,20:5] 
          }
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( VP)
        & [1:,10:,20:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|dcc|vp1dd)
            & index[2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [9:,12:,15:,18:,6:3,12:9,15:12,18:15,9:3,12:6,18:12,21:15,12:3,15:6,18:9,21:12,18:3,21:6] 
          }
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:, 10:5] 
                | Since{Max & index[0]} 
                | Since{Min & index[0]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp1dd)
            & [15:,15:10,20:10,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Since{Max & index[0,5,10,20]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| Volatility)
        & [1:,20:,60:] 
      }
    | 
        Time{long| short}
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2011.0, 2011.25, 2009.0, 2009.25, 2013.0, 2009.5, 2013.25, 2009.75, 2010.5, 2011.75, 2012.0, 2013.75, 2015.0}), frozenset({2010.25, 2010.75, 2012.5, 2012.75, 2014.5, 2014.25, 2014.0, 2010.0, 2011.5, 2012.25, 2013.5, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (66, 1)
train = (0.72314199500934562, 0.60496418890395876)
scores = (0.29352856591607984, 0.15719397522074746)
score = 0.22536127056841365
holdout = (0.4651758049625073, 0.33584849076865175)
>>> t = 3900 ===================================================================================================
(pair) len(F.columns) = 97
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 204
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:5,15:10,15:5,20:5] 
          }
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
                | Drawup[1:,20:10] 
                | Since{Min & index[5,10]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.25, 2011.75, 2012.5, 2009.0, 2014.0, 2009.5, 2010.75, 2011.5, 2009.75, 2013.0, 2014.25, 2015.25}), frozenset({2010.0, 2012.25, 2012.75, 2013.5, 2013.75, 2014.5, 2009.25, 2010.5, 2011.0, 2012.0, 2013.25, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (99, 3)
train = (0.95942079265256353, 0.72121488808334566)
scores = (0.33389799159450445, 0.20919741188918292)
score = 0.2715477017418437
holdout = (0.5857269416792372, 0.40278970946622394)
>>> t = 3901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 204
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [5:,10:5,15:10,15:5,20:5] 
          }
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
                | Drawup[1:,20:10] 
                | Since{Min & index[5,10]} 
              )
            & Since[21:, 62:] 
          )
      )
    | 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2015.0, 2011.5, 2011.0, 2012.5, 2014.0, 2014.25, 2014.5, 2009.0, 2010.0, 2011.75, 2009.5, 2014.75, 2015.25}), frozenset({2010.25, 2010.75, 2012.25, 2012.75, 2009.75, 2013.25, 2013.5, 2013.75, 2009.25, 2010.5, 2011.25, 2012.0, 2013.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (145, 63)
train = (0.99468830563593658, 0.98916063534699172)
scores = (0.32437403628838868, 0.34605770991079954)
score = 0.3352158730995941
holdout = (0.5904701437741855, 0.6059624522106198)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (74, 91)
train = (0.93001960573098319, 1.0957100333934657)
scores = (0.28485303952234831, 0.30646016686630284)
score = 0.2956566031943256
holdout = (0.551387098615256, 0.6165179654815277)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (250, 90)
train = (1.0467639450060662, 1.0124834821122783)
scores = (0.32668556442434954, 0.38623742988255866)
score = 0.3564614971534541
holdout = (0.6056511018928656, 0.6316409245789631)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (250, 90)
train = (1.0467639450060662, 1.0124834821122783)
scores = (0.32668556442434954, 0.38623742988255866)
score = 0.3564614971534541
holdout = (0.6056511018928656, 0.6316409245789631)
>>> t = 4000 ===================================================================================================
(pair) len(F.columns) = 17
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 66
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [9:,12:,12:9,15:12,12:6,            15:9,18:12,21:15,12:3,15:6,18:9,21:12,18:6,21:6] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,5]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP| Volatility)
        & [60:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [9:,12:,12:9,15:12,12:6,            15:9,18:12,21:15,12:3,15:6,18:9,21:12,18:6,21:6] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,5]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP| Volatility)
        & [60:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [9:,12:,12:9,15:12,12:6,            15:9,18:12,21:15,12:3,15:6,18:9,21:12,18:6,21:6] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,5]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP| Volatility)
        & [60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.75, 2011.0, 2011.5, 2013.5, 2013.0, 2014.25, 2009.25, 2010.5, 2011.75, 2013.75, 2014.75, 2015.25}), frozenset({2012.25, 2012.5, 2012.75, 2009.0, 2009.75, 2014.0, 2009.5, 2010.0, 2011.25, 2012.0, 2013.25, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 15)
train = (0.54009461699482564, 0.56590469955448064)
scores = (0.26803011696754919, 0.28604126236205324)
score = 0.2770356896648012
holdout = (0.3994209036271015, 0.4144724446967537)
>>> t = 4001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 66
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [9:,12:,12:9,15:12,12:6,            15:9,18:12,21:15,12:3,15:6,18:9,21:12,18:6,21:6] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,5]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP| Volatility)
        & [60:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [9:,12:,12:9,15:12,12:6,            15:9,18:12,21:15,12:3,15:6,18:9,21:12,18:6,21:6] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,5]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP| Volatility)
        & [60:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [9:,12:,12:9,15:12,12:6,            15:9,18:12,21:15,12:3,15:6,18:9,21:12,18:6,21:6] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[0,5]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| VP| Volatility)
        & [60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[62,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.75, 2010.25, 2015.25, 2011.0, 2012.75, 2009.5, 2014.5, 2009.0, 2010.0, 2011.5, 2009.25, 2014.0, 2015.0}), frozenset({2011.75, 2012.25, 2012.5, 2013.25, 2013.5, 2013.75, 2014.25, 2009.75, 2010.5, 2011.25, 2012.0, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (11, 2)
train = (0.56478359668295275, 0.58895167220429023)
scores = (0.31390191615185548, 0.29130739410030632)
score = 0.3026046551260809
holdout = (0.44002794678192303, 0.4284247465284759)
>>> t = 4100 ===================================================================================================
(pair) len(F.columns) = 127
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 149
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doc)
            & index[0,1, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp5dd)
            & [20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:] 
                | Since{Max & index[0]} 
                | Drawup[20:10] 
                | Since{Min & index[0,10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | 
        | FracRec[62:,250:] 
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|doo|doc)
            & index[0,2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd)
            & [10:,15:,15:10,15:5] 
          }
        | ( 
            <> Volatility[20:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[20]} 
                | Drawup[ 5:, 10:5] 
                | Since{Min & index[5,10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2011.0, 2011.75, 2011.5, 2012.0, 2009.75, 2013.75, 2013.25, 2009.25, 2011.25, 2009.0, 2013.0, 2014.75, 2015.25}), frozenset({2010.25, 2010.5, 2010.75, 2012.5, 2012.75, 2014.25, 2014.0, 2009.5, 2010.0, 2012.25, 2013.5, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 5)
train = (0.68896124795674041, 0.63293868027662259)
scores = (0.33028445280714586, 0.24856217622493493)
score = 0.2894233145160404
holdout = (0.4593631677765371, 0.3612664439033479)
>>> t = 4101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 149
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doc)
            & index[0,1, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp5dd)
            & [20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:] 
                | Since{Max & index[0]} 
                | Drawup[20:10] 
                | Since{Min & index[0,10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | 
        | FracRec[62:,250:] 
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|acc|doo|doc)
            & index[0,2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp1dd|vp5dd)
            & [10:,15:,15:10,15:5] 
          }
        | ( 
            <> Volatility[20:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[20]} 
                | Drawup[ 5:, 10:5] 
                | Since{Min & index[5,10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.5, 2015.0, 2012.75, 2012.0, 2013.75, 2014.25, 2009.25, 2010.25, 2011.25, 2012.25, 2013.5, 2014.0, 2015.25}), frozenset({2010.75, 2011.5, 2011.75, 2009.0, 2009.75, 2013.25, 2014.5, 2009.5, 2010.0, 2011.0, 2012.5, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (64, 653)
train = (1.0001362258836428, 1.4466898107562809)
scores = (0.3657335523333049, 0.37398245675010588)
score = 0.36985800454170537
holdout = (0.5350585491206022, 0.6935485411520134)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (54, 430)
train = (1.0762858675125564, 1.4500870114148889)
scores = (0.36545369605433659, 0.32017316554110736)
score = 0.342813430797722
holdout = (0.5722818487165634, 0.6790264251565022)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (43, 15)
train = (0.71312382092549464, 0.6263237042767682)
scores = (0.36424731078621914, 0.26518377428840562)
score = 0.3147155425373124
holdout = (0.4515449055503472, 0.410618765838384)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (64, 653)
train = (1.0001362258836428, 1.4466898107562809)
scores = (0.3657335523333049, 0.37398245675010588)
score = 0.36985800454170537
holdout = (0.5350585491206022, 0.6935485411520134)
>>> t = 4200 ===================================================================================================
(pair) len(F.columns) = 38
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 75
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]}|aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[0]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| Volatility)
        & [60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|vp5dd)
            & [9:,12:,18:,21:18,            15:9,21:15,15:6,18:9,21:12,15:3,18:6] 
          }
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(Volatility)
            & [9:,15:,18:,            15:9,18:12,21:15,18:9,21:12,18:6,18:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                | Drawdown[ 5:,10:] 
                | Since{Max&index[0]} 
                | Drawup[20:10] 
                | Since{Min&index[5]} 
              )
            & Since[21:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2010.5, 2011.5, 2009.25, 2013.25, 2014.25, 2014.0, 2009.5, 2010.0, 2011.75, 2012.75, 2013.75, 2014.75}), frozenset({2015.0, 2011.25, 2012.25, 2012.5, 2009.75, 2013.5, 2009.0, 2010.25, 2011.0, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (145, 182)
train = (1.0062675056592609, 1.0040174556507415)
scores = (0.42676778612887672, 0.48965446594074963)
score = 0.4582111260348132
holdout = (0.6515753891451574, 0.6658964925792293)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (38, 240)
train = (0.8315229897578148, 1.1101840455051473)
scores = (0.40316714445097679, 0.50151440425769622)
score = 0.4523407743543365
holdout = (0.5871092012631398, 0.6786312378470561)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (137, 2)
train = (0.93103079725136106, 0.6179815663038245)
scores = (0.40160007669680176, 0.43988359239947306)
score = 0.4207418345481374
holdout = (0.6114220173244891, 0.5081656221332206)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (145, 182)
train = (1.0062675056592609, 1.0040174556507415)
scores = (0.42676778612887672, 0.48965446594074963)
score = 0.4582111260348132
holdout = (0.6515753891451574, 0.6658964925792293)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (89, 143)
train = (1.057816077356633, 1.0754184691382791)
scores = (0.42418653991656874, 0.4979469893493757)
score = 0.46106676463297225
holdout = (0.6693395866507357, 0.6878465055644667)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (235, 157)
train = (1.4413912066563126, 1.1991179195268908)
scores = (0.39422936044439277, 0.50954349962787016)
score = 0.4518864300361315
holdout = (0.7422509250032302, 0.7027789868308739)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (92, 171)
train = (0.95294389281861569, 1.0552436161607577)
scores = (0.40814290391503211, 0.51248723289829046)
score = 0.46031506840666125
holdout = (0.6235460595232457, 0.7024859928080355)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (89, 143)
train = (1.057816077356633, 1.0754184691382791)
scores = (0.42418653991656874, 0.4979469893493757)
score = 0.46106676463297225
holdout = (0.6693395866507357, 0.6878465055644667)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (105, 164)
train = (1.1903480135320601, 1.1802117039500972)
scores = (0.42520450657754005, 0.50895463655332818)
score = 0.4670795715654341
holdout = (0.7076053414929887, 0.7204245717635608)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (62, 87)
train = (1.2703632061422006, 1.2214163695877127)
scores = (0.38297553293580616, 0.5032004061551395)
score = 0.4430879695454728
holdout = (0.7046708440089865, 0.7079944201186239)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (109, 295)
train = (1.0575226738858678, 1.2198145082533582)
scores = (0.41678593984746543, 0.54387193594982552)
score = 0.4803289378986455
holdout = (0.6591118686562197, 0.7544760149206226)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (109, 295)
train = (1.0575226738858678, 1.2198145082533582)
scores = (0.41678593984746543, 0.54387193594982552)
score = 0.4803289378986455
holdout = (0.6591118686562197, 0.7544760149206226)
>>> t = 4201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 75
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]}|aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[0]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| Volatility)
        & [60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|vp5dd)
            & [9:,12:,18:,21:18,            15:9,21:15,15:6,18:9,21:12,15:3,18:6] 
          }
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(Volatility)
            & [9:,15:,18:,            15:9,18:12,21:15,18:9,21:12,18:6,18:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                | Drawdown[ 5:,10:] 
                | Since{Max&index[0]} 
                | Drawup[20:10] 
                | Since{Min&index[5]} 
              )
            & Since[21:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.5, 2010.75, 2012.25, 2009.5, 2014.5, 2014.75, 2009.0, 2010.0, 2011.75, 2012.0, 2013.5, 2014.0, 2015.25}), frozenset({2011.0, 2011.5, 2012.75, 2009.75, 2013.25, 2013.75, 2009.25, 2010.25, 2011.25, 2012.5, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 3)
train = (0.70984108498603893, 0.65899775582949383)
scores = (0.38320017508509235, 0.409265092021313)
score = 0.3962326335532027
holdout = (0.5286761658659771, 0.5107905919874524)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (29, 1)
train = (0.77960883561148075, 0.55732166695240881)
scores = (0.3638530443125042, 0.42917271673150065)
score = 0.3965128805220024
holdout = (0.5492760437434699, 0.4776793655119315)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 2)
train = (0.72624454101049385, 0.57077908943480415)
scores = (0.37393105100966634, 0.39038383677301919)
score = 0.38215744389134276
holdout = (0.5335865457135391, 0.4699088947655861)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (29, 1)
train = (0.77960883561148075, 0.55732166695240881)
scores = (0.3638530443125042, 0.42917271673150065)
score = 0.3965128805220024
holdout = (0.5492760437434699, 0.4776793655119315)
>>> t = 4202 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 75
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[1:]|oo{.&[10:]}|aoo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[0]} 
              )
            & Since[21:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| Volatility)
        & [60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|vp5dd)
            & [9:,12:,18:,21:18,            15:9,21:15,15:6,18:9,21:12,15:3,18:6] 
          }
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(Volatility)
            & [9:,15:,18:,            15:9,18:12,21:15,18:9,21:12,18:6,18:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                | Drawdown[ 5:,10:] 
                | Since{Max&index[0]} 
                | Drawup[20:10] 
                | Since{Min&index[5]} 
              )
            & Since[21:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2010.25, 2011.25, 2012.0, 2009.75, 2013.25, 2009.25, 2010.5, 2011.5, 2012.25, 2013.0, 2014.75, 2015.25}), frozenset({2011.75, 2012.75, 2009.0, 2013.75, 2014.25, 2014.0, 2009.5, 2010.75, 2011.0, 2012.5, 2013.5, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (10, 24)
train = (0.69331200498169399, 0.73962780575159393)
scores = (0.4194225169457021, 0.31029797419976529)
score = 0.36486024557273367
holdout = (0.5350254341940976, 0.5205294817230747)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (15, 27)
train = (0.66327047603785994, 0.75837708309726592)
scores = (0.42026828286192836, 0.30959098379029004)
score = 0.36492963332610917
holdout = (0.519214136357366, 0.5289407610410276)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (13, 41)
train = (0.67188532963437186, 0.7996368617804307)
scores = (0.39763789862373217, 0.30620187090660261)
score = 0.3519198847651674
holdout = (0.5141022473707698, 0.534387220342856)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (15, 27)
train = (0.66327047603785994, 0.75837708309726592)
scores = (0.42026828286192836, 0.30959098379029004)
score = 0.36492963332610917
holdout = (0.519214136357366, 0.5289407610410276)
>>> t = 4300 ===================================================================================================
(pair) len(F.columns) = 130
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 174
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|dcc)
            & index[0,1,2, 0:1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(doo|Volatility)
            & [5:,15:,10:5,15:10,20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[ 5:,20:, 10:5] 
                | Since{Max&index[5]} 
                | Since{Min&index[0]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Since{Max & index[0]} 
                | Drawup[1,20:] 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [10:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [10:,15:,15:10,20:15,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:,20:10] 
                | Since{Max&index[0,10]} 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 62:, 125:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        <>Return{mix[1,3,4,5,13,15,16,17,18]}
        | Return{ af} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|doc)
            & index[1, 0:1,1:2,0:2] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Drawup[20:10] 
                | Since{Min & index[5,10]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,5:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.5, 2010.25, 2011.25, 2009.0, 2009.25, 2014.0, 2014.5, 2009.75, 2010.75, 2011.75, 2012.25, 2014.75, 2015.0}), frozenset({2011.5, 2012.5, 2012.75, 2013.25, 2013.5, 2013.75, 2009.5, 2010.0, 2011.0, 2012.0, 2013.0, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (235, 140)
train = (0.98514710592667165, 1.2723583160834964)
scores = (0.53138321734383731, 0.46286332601012808)
score = 0.49712327167698267
holdout = (0.6417399920948454, 0.7211699009230327)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (169, 95)
train = (0.9696002789281909, 1.3290406500584584)
scores = (0.52639311524942933, 0.4591898572383934)
score = 0.49279148624391134
holdout = (0.6350917176465921, 0.7356627197771853)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (128, 142)
train = (0.86327174674005513, 1.1807036847410204)
scores = (0.51740321332472061, 0.48682571961402443)
score = 0.5021144664693725
holdout = (0.6225000905585373, 0.6956097879236667)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (128, 142)
train = (0.86327174674005513, 1.1807036847410204)
scores = (0.51740321332472061, 0.48682571961402443)
score = 0.5021144664693725
holdout = (0.6225000905585373, 0.6956097879236667)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (167, 83)
train = (1.0863585484812215, 1.2597044307114256)
scores = (0.54182460496671025, 0.45906697699839893)
score = 0.5004457909825546
holdout = (0.6816633370125522, 0.7199185212499446)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (193, 117)
train = (1.1839419633267694, 1.6247143252966814)
scores = (0.54233661393078858, 0.45058490876701307)
score = 0.4964607613489008
holdout = (0.6821282669219108, 0.7982075806725509)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (158, 137)
train = (1.0053684037570625, 1.2889505868350255)
scores = (0.52792695603361028, 0.48105651142196676)
score = 0.5044917337277885
holdout = (0.6697134445460634, 0.7249952719058468)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (158, 137)
train = (1.0053684037570625, 1.2889505868350255)
scores = (0.52792695603361028, 0.48105651142196676)
score = 0.5044917337277885
holdout = (0.6697134445460634, 0.7249952719058468)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (132, 134)
train = (1.120173444477401, 1.5012636264805854)
scores = (0.54751246541555343, 0.46072234531465611)
score = 0.5041174053651047
holdout = (0.6944051546750113, 0.7799098657761572)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (18, 163)
train = (0.88351038961319717, 1.8929875885795144)
scores = (0.50293768029602848, 0.48015900482302121)
score = 0.49154834255952484
holdout = (0.5991178563921399, 0.8326880375460861)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (229, 75)
train = (1.1590522570268258, 1.1785455621674601)
scores = (0.55137393791479605, 0.48592098337465101)
score = 0.5186474606447236
holdout = (0.7108509696183706, 0.699929839081742)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (229, 75)
train = (1.1590522570268258, 1.1785455621674601)
scores = (0.55137393791479605, 0.48592098337465101)
score = 0.5186474606447236
holdout = (0.7108509696183706, 0.699929839081742)
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (178, 143)
train = (1.266459509849466, 1.5777286118414926)
scores = (0.53091457071211379, 0.46001790709767243)
score = 0.4954662389048931
holdout = (0.7213992795252843, 0.7941721335473245)
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (143, 326)
train = (1.4622408174965116, 2.217978745705921)
scores = (0.55055687734088221, 0.49005375703478238)
score = 0.5203053171878322
holdout = (0.7372044741868555, 0.8400124113082955)
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (179, 65)
train = (1.1417822338562571, 1.1590015850473698)
scores = (0.55117644772584407, 0.48586907776833715)
score = 0.5185227627470906
holdout = (0.7126255308049928, 0.6960763720516238)
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (143, 326)
train = (1.4622408174965116, 2.217978745705921)
scores = (0.55055687734088221, 0.49005375703478238)
score = 0.5203053171878322
holdout = (0.7372044741868555, 0.8400124113082955)
>>> t = 4301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 174
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|dcc)
            & index[0,1,2, 0:1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(doo|Volatility)
            & [5:,15:,10:5,15:10,20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[ 5:,20:, 10:5] 
                | Since{Max&index[5]} 
                | Since{Min&index[0]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Since{Max & index[0]} 
                | Drawup[1,20:] 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [10:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [10:,15:,15:10,20:15,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:,20:10] 
                | Since{Max&index[0,10]} 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 62:, 125:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        <>Return{mix[1,3,4,5,13,15,16,17,18]}
        | Return{ af} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|doc)
            & index[1, 0:1,1:2,0:2] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Drawup[20:10] 
                | Since{Min & index[5,10]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,5:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2010.0, 2012.25, 2012.0, 2009.0, 2014.0, 2009.25, 2010.25, 2011.25, 2012.75, 2013.5, 2014.25, 2015.0}), frozenset({2011.5, 2011.75, 2009.75, 2013.25, 2013.75, 2014.5, 2009.5, 2010.5, 2011.0, 2012.5, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (186, 240)
train = (0.96200295989209894, 1.3147095112435809)
scores = (0.44925521641875837, 0.47738904488806078)
score = 0.46332213065340955
holdout = (0.6309602420287705, 0.7433386770499274)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (262, 233)
train = (1.0791707900591758, 1.4045561672970921)
scores = (0.48694897861336695, 0.47615120023757135)
score = 0.4815500894254692
holdout = (0.6614090597641124, 0.7674875423084636)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (186, 187)
train = (0.9439900464441312, 1.1314867853271682)
scores = (0.44975000288307082, 0.47046360132609594)
score = 0.4601068021045834
holdout = (0.6310902831184471, 0.6875125652083902)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (262, 233)
train = (1.0791707900591758, 1.4045561672970921)
scores = (0.48694897861336695, 0.47615120023757135)
score = 0.4815500894254692
holdout = (0.6614090597641124, 0.7674875423084636)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (178, 152)
train = (1.0545352259804832, 1.3686230589448047)
scores = (0.45518083433786871, 0.48618698108189201)
score = 0.47068390770988033
holdout = (0.6542364632226456, 0.7643838505263699)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (238, 289)
train = (1.2461424878008807, 1.8208029480654995)
scores = (0.49200883140494656, 0.50210509277819759)
score = 0.4970569620915721
holdout = (0.6924644787369051, 0.8331059039303116)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (166, 199)
train = (1.0047596206511353, 1.2593227665048012)
scores = (0.44947484089621753, 0.48252299981393726)
score = 0.4659989203550774
holdout = (0.6458508846237312, 0.7249765004935022)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (238, 289)
train = (1.2461424878008807, 1.8208029480654995)
scores = (0.49200883140494656, 0.50210509277819759)
score = 0.4970569620915721
holdout = (0.6924644787369051, 0.8331059039303116)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (131, 134)
train = (1.0822944126849681, 1.4428885709362542)
scores = (0.45198339201675641, 0.49523503728972751)
score = 0.47360921465324196
holdout = (0.6628161998749983, 0.7864187342311129)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (247, 164)
train = (1.4320085129791746, 1.8447328771015088)
scores = (0.50573932769114194, 0.49494420177263032)
score = 0.5003417647318862
holdout = (0.7218876350093214, 0.840352142559032)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (390, 173)
train = (1.2185109028322525, 1.2976106850614717)
scores = (0.46462085751715709, 0.48228567309471276)
score = 0.4734532653059349
holdout = (0.6976476041485997, 0.7343554994225431)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (247, 164)
train = (1.4320085129791746, 1.8447328771015088)
scores = (0.50573932769114194, 0.49494420177263032)
score = 0.5003417647318862
holdout = (0.7218876350093214, 0.840352142559032)
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (139, 142)
train = (1.1686863804422598, 1.5442470524361158)
scores = (0.47455616965172909, 0.50555646844789259)
score = 0.49005631904981084
holdout = (0.6919502895276832, 0.8076845040007484)
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (157, 449)
train = (1.439553928076029, 2.4858315456057252)
scores = (0.48706982915498559, 0.54285536810859758)
score = 0.5149625986317916
holdout = (0.7203283252369671, 0.8740972995273935)
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (194, 142)
train = (1.1566687877853494, 1.2731998223027408)
scores = (0.46856605851061428, 0.48049212076656445)
score = 0.47452908963858936
holdout = (0.6932991255424353, 0.7278893109728743)
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (157, 449)
train = (1.439553928076029, 2.4858315456057252)
scores = (0.48706982915498559, 0.54285536810859758)
score = 0.5149625986317916
holdout = (0.7203283252369671, 0.8740972995273935)
>>> t = 4302 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 174
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|dcc)
            & index[0,1,2, 0:1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(doo|Volatility)
            & [5:,15:,10:5,15:10,20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[ 5:,20:, 10:5] 
                | Since{Max&index[5]} 
                | Since{Min&index[0]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Since{Max & index[0]} 
                | Drawup[1,20:] 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [10:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [10:,15:,15:10,20:15,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:,20:10] 
                | Since{Max&index[0,10]} 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 62:, 125:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        <>Return{mix[1,3,4,5,13,15,16,17,18]}
        | Return{ af} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|doc)
            & index[1, 0:1,1:2,0:2] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Drawup[20:10] 
                | Since{Min & index[5,10]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,5:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2015.0, 2011.75, 2009.25, 2013.0, 2014.0, 2014.25, 2009.5, 2010.75, 2011.25, 2012.75, 2013.5, 2014.75, 2015.25}), frozenset({2010.0, 2010.5, 2011.5, 2012.25, 2012.5, 2009.75, 2013.75, 2009.0, 2010.25, 2011.0, 2012.0, 2013.25, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (15, 1)
train = (0.67581484434024786, 0.64325716611482897)
scores = (0.40213726567401098, 0.42592896623633769)
score = 0.41403311595517434
holdout = (0.5244524017985194, 0.5211961207072434)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (146, 88)
train = (1.067937158891278, 0.92666676394320602)
scores = (0.41619260557073851, 0.39767042683984533)
score = 0.4069315162052919
holdout = (0.668540635892244, 0.6062853623844751)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (16, 102)
train = (0.68034314449152655, 0.90364146579861093)
scores = (0.43787868064478269, 0.45416147335628743)
score = 0.44602007700053503
holdout = (0.5408605103304192, 0.6217434920528907)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (16, 102)
train = (0.68034314449152655, 0.90364146579861093)
scores = (0.43787868064478269, 0.45416147335628743)
score = 0.44602007700053503
holdout = (0.5408605103304192, 0.6217434920528907)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (133, 73)
train = (1.1128926415726093, 1.0025607123252822)
scores = (0.44334747040584921, 0.43617229074076097)
score = 0.43975988057330506
holdout = (0.691871755813933, 0.6443239985503209)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (339, 237)
train = (1.5964767718028203, 1.3694927926816227)
scores = (0.45337093825873875, 0.43505623623841017)
score = 0.44421358724857446
holdout = (0.7765791524525993, 0.7179746564240101)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (21, 115)
train = (0.77452681084059927, 1.0384697228011053)
scores = (0.44368911757022972, 0.46302486935015325)
score = 0.4533569934601915
holdout = (0.5769959054408585, 0.6697385426610789)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (21, 115)
train = (0.77452681084059927, 1.0384697228011053)
scores = (0.44368911757022972, 0.46302486935015325)
score = 0.4533569934601915
holdout = (0.5769959054408585, 0.6697385426610789)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (97, 110)
train = (1.1431199256972469, 1.2088622846743988)
scores = (0.44553219864810206, 0.42558214816718626)
score = 0.43555717340764416
holdout = (0.703690348439175, 0.6989095385078365)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (580, 186)
train = (2.0743875543689194, 1.4720407510045783)
scores = (0.49446293087325277, 0.45047447572237143)
score = 0.4724687032978121
holdout = (0.8289040734476979, 0.7349343703699462)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (9, 120)
train = (0.71290523227944891, 1.1165018025893838)
scores = (0.45092092851452598, 0.46554460231290001)
score = 0.458232765413713
holdout = (0.5532174812004687, 0.692953275497025)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (580, 186)
train = (2.0743875543689194, 1.4720407510045783)
scores = (0.49446293087325277, 0.45047447572237143)
score = 0.4724687032978121
holdout = (0.8289040734476979, 0.7349343703699462)
>>> t = 4303 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 174
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|dcc)
            & index[0,1,2, 0:1] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(doo|Volatility)
            & [5:,15:,10:5,15:10,20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(doo[1:]|oo{.&[10:]})} 
            & (
                | Drawdown[ 5:,20:, 10:5] 
                | Since{Max&index[5]} 
                | Since{Min&index[0]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Since{Max & index[0]} 
                | Drawup[1,20:] 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [10:] 
      }
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [10:,15:,15:10,20:15,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:,20:10] 
                | Since{Max&index[0,10]} 
                | Drawup[20:10] 
                | Since{Min&index[20]} 
              )
            & Since[ 62:, 125:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[10]} 
                | Since{Min & index[5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | 
        <>Return{mix[1,3,4,5,13,15,16,17,18]}
        | Return{ af} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|doo|doc)
            & index[1, 0:1,1:2,0:2] 
          }
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Drawup[20:10] 
                | Since{Min & index[5,10]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [1:,5:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.5, 2011.75, 2012.5, 2009.25, 2014.25, 2009.5, 2010.0, 2011.0, 2009.0, 2013.5, 2014.75, 2015.0}), frozenset({2010.5, 2012.25, 2012.75, 2013.25, 2013.75, 2014.0, 2009.75, 2010.75, 2011.25, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (308, 1)
train = (1.1198089588381526, 0.86390022241174524)
scores = (0.41850343955916264, 0.38673573029142699)
score = 0.4026195849252948
holdout = (0.6418909318531103, 0.5586719399376552)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (446, 2)
train = (1.2947960819168398, 0.87875936024231749)
scores = (0.45238803511109726, 0.34919963330912313)
score = 0.40079383421011017
holdout = (0.673400792969198, 0.5649766147059394)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (597, 115)
train = (1.1777278309353414, 1.2239360770366703)
scores = (0.4243518272448446, 0.42905232138258365)
score = 0.4267020743137141
holdout = (0.6601693493681142, 0.7053945169394082)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (597, 115)
train = (1.1777278309353414, 1.2239360770366703)
scores = (0.4243518272448446, 0.42905232138258365)
score = 0.4267020743137141
holdout = (0.6601693493681142, 0.7053945169394082)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (360, 1)
train = (1.2914478924314816, 1.000554226378469)
scores = (0.44247568192971021, 0.40536273289427804)
score = 0.4239192074119941
holdout = (0.6863743572085794, 0.6110456952288066)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (371, 338)
train = (1.4685658128626697, 1.87435062392924)
scores = (0.48028317846202867, 0.48904585803113176)
score = 0.4846645182465802
holdout = (0.7092482293872299, 0.8434632875529857)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (417, 340)
train = (1.2029246507402678, 1.5943140193729908)
scores = (0.42727020306466845, 0.44207435631226377)
score = 0.4346722796884661
holdout = (0.6680616088341872, 0.8049607086683999)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (371, 338)
train = (1.4685658128626697, 1.87435062392924)
scores = (0.48028317846202867, 0.48904585803113176)
score = 0.4846645182465802
holdout = (0.7092482293872299, 0.8434632875529857)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (478, 1)
train = (1.4672242601785406, 1.0424911430135546)
scores = (0.46185075472968251, 0.41060307326516138)
score = 0.436226913997422
holdout = (0.7156771729135868, 0.6280777947895335)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (155, 202)
train = (1.4155039349016048, 1.892986540222714)
scores = (0.48584411834509478, 0.50539892393040409)
score = 0.49562152113774943
holdout = (0.7087740877697601, 0.8444353245188678)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (222, 122)
train = (1.1248948523270039, 1.4045970942097412)
scores = (0.42098498121031974, 0.42153525410024351)
score = 0.4212601176552816
holdout = (0.6559319591697177, 0.7504171688431315)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (155, 202)
train = (1.4155039349016048, 1.892986540222714)
scores = (0.48584411834509478, 0.50539892393040409)
score = 0.49562152113774943
holdout = (0.7087740877697601, 0.8444353245188678)
>>> t = 4400 ===================================================================================================
(pair) len(F.columns) = 22
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 24
0
#<>#
    <>~Market & (
        | ( 
            <>Return{(aoo[1:]|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:] 
                | Since{Min&index[10]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| Volatility)
        & [20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.0, 2010.75, 2011.0, 2009.0, 2013.75, 2013.0, 2009.25, 2010.25, 2011.5, 2012.75, 2013.5, 2014.25, 2015.25}), frozenset({2011.75, 2012.25, 2012.5, 2009.75, 2014.5, 2014.0, 2009.5, 2010.5, 2011.25, 2012.0, 2013.25, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 177)
train = (0.51066334127610225, 0.94954272004425555)
scores = (0.26172786538071663, 0.45041229459590665)
score = 0.35607007998831164
holdout = (0.38696824345631986, 0.6156953652680989)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (99, 147)
train = (0.66637558979866152, 1.0141487585392781)
scores = (0.2788220039077563, 0.41818427058877605)
score = 0.3485031372482662
holdout = (0.45616933818692995, 0.620870816035392)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (7, 396)
train = (0.58712694760629303, 1.0315411570685784)
scores = (0.27655718036780813, 0.45509962371485529)
score = 0.3658284020413317
holdout = (0.4116979022510977, 0.6428582054438526)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (7, 396)
train = (0.58712694760629303, 1.0315411570685784)
scores = (0.27655718036780813, 0.45509962371485529)
score = 0.3658284020413317
holdout = (0.4116979022510977, 0.6428582054438526)
>>> t = 4401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 24
0
#<>#
    <>~Market & (
        | ( 
            <>Return{(aoo[1:]|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:] 
                | Since{Min&index[10]} 
              )
            & Since[21:, 62:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| Volatility)
        & [20:,60:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.25, 2010.75, 2011.75, 2011.0, 2012.75, 2009.25, 2009.5, 2013.75, 2009.75, 2010.0, 2011.25, 2012.25, 2013.0}), frozenset({2015.0, 2012.5, 2013.5, 2014.5, 2014.25, 2014.0, 2009.0, 2010.5, 2011.5, 2012.0, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (18, 2)
train = (0.69094630179373762, 0.51400518148601537)
scores = (0.26830755250539201, 0.25260715000957024)
score = 0.26045735125748115
holdout = (0.42541165950818705, 0.3744997962744281)
>>> t = 4500 ===================================================================================================
(pair) len(F.columns) = 129
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 238
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:, 10:5] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[1:,10:] 
                | Since{Max & index[20]} 
                | Drawup[1:,20:10] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|dcc|vp1dd)
            & index[1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [3:,6:,9:,12:,15:,6:3,21:18,9:3,12:6,21:15,12:3,15:6,18:9,21:12,21:9,21:3] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.5, 2011.0, 2009.5, 2013.25, 2013.5, 2014.25, 2009.0, 2010.75, 2011.75, 2012.0, 2013.75, 2014.0, 2015.25}), frozenset({2010.0, 2011.5, 2012.5, 2012.75, 2009.75, 2014.5, 2009.25, 2010.25, 2011.25, 2012.25, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (17, 2)
train = (0.73905818856727956, 0.64108156962023233)
scores = (0.3387508242347973, 0.23683941466494904)
score = 0.2877951194498732
holdout = (0.5021463856858009, 0.4363570577622787)
>>> t = 4501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 238
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:, 10:5] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[1:,10:] 
                | Since{Max & index[20]} 
                | Drawup[1:,20:10] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|dcc|vp1dd)
            & index[1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [3:,6:,9:,12:,15:,6:3,21:18,9:3,12:6,21:15,12:3,15:6,18:9,21:12,21:9,21:3] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2011.5, 2011.25, 2011.75, 2013.75, 2014.25, 2009.5, 2015.25, 2011.0, 2012.0, 2013.5, 2014.0, 2015.0}), frozenset({2010.0, 2010.5, 2012.5, 2012.75, 2009.25, 2009.75, 2013.25, 2014.5, 2009.0, 2010.25, 2012.25, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (83, 330)
train = (1.2495306046570853, 1.1465608170229022)
scores = (0.42266363640911386, 0.44707221384685819)
score = 0.434867925127986
holdout = (0.6941755933623334, 0.6519630744768403)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (183, 217)
train = (1.5204812347010312, 1.1162280603176162)
scores = (0.41669307662286892, 0.40670928057098277)
score = 0.41170117859692584
holdout = (0.746196219328362, 0.6265567864366662)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (185, 381)
train = (1.3235151156734986, 1.0916037461703276)
scores = (0.43631011424278576, 0.42414591989623113)
score = 0.4302280170695084
holdout = (0.716450814579187, 0.6422376689602906)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (83, 330)
train = (1.2495306046570853, 1.1465608170229022)
scores = (0.42266363640911386, 0.44707221384685819)
score = 0.434867925127986
holdout = (0.6941755933623334, 0.6519630744768403)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (65, 23)
train = (1.3003031313570346, 0.87153087686721764)
scores = (0.43124751190190219, 0.34121540496516828)
score = 0.38623145843353524
holdout = (0.7180882096230017, 0.5605497027008257)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (41, 343)
train = (1.4369739831942396, 1.5606214868475075)
scores = (0.43269393091007735, 0.43568675866998285)
score = 0.4341903447900301
holdout = (0.7418683956298391, 0.7084655021795949)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (176, 448)
train = (1.4194089995069106, 1.2176315276478624)
scores = (0.46664266346572369, 0.45257123486684336)
score = 0.45960694916628353
holdout = (0.7487551458054381, 0.6797358644968642)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (176, 448)
train = (1.4194089995069106, 1.2176315276478624)
scores = (0.46664266346572369, 0.45257123486684336)
score = 0.45960694916628353
holdout = (0.7487551458054381, 0.6797358644968642)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (67, 18)
train = (1.3852175430888916, 0.97368100656126977)
scores = (0.46307453230667567, 0.34584599479356043)
score = 0.40446026355011805
holdout = (0.750984751073435, 0.6041308796926519)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (65, 168)
train = (1.6356315863598896, 1.4870323679162158)
scores = (0.47930890997629488, 0.43726701111823302)
score = 0.45828796054726395
holdout = (0.7707359624625733, 0.6990202984251763)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (185, 222)
train = (1.4905234948643464, 1.1608822260830771)
scores = (0.46336933828016053, 0.42394259520423722)
score = 0.44365596674219887
holdout = (0.7640236144714003, 0.6688801318391668)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (65, 168)
train = (1.6356315863598896, 1.4870323679162158)
scores = (0.47930890997629488, 0.43726701111823302)
score = 0.45828796054726395
holdout = (0.7707359624625733, 0.6990202984251763)
>>> t = 4502 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 238
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:, 10:5] 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[1:,10:] 
                | Since{Max & index[20]} 
                | Drawup[1:,20:10] 
                | Since{Min & index[10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|dcc|vp1dd)
            & index[1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [3:,6:,9:,12:,15:,6:3,21:18,9:3,12:6,21:15,12:3,15:6,18:9,21:12,21:9,21:3] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2011.5, 2011.75, 2012.5, 2012.25, 2009.5, 2013.75, 2009.0, 2010.25, 2011.0, 2012.0, 2013.25, 2014.25, 2015.0}), frozenset({2010.5, 2010.75, 2009.75, 2013.5, 2014.5, 2014.0, 2009.25, 2010.0, 2011.25, 2012.75, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (17, 4)
train = (0.78900609552183487, 0.6663091809435242)
scores = (0.32927379637451859, 0.28965035924229748)
score = 0.30946207780840806
holdout = (0.5006376833278077, 0.4474613441939594)
>>> t = 4600 ===================================================================================================
(pair) len(F.columns) = 140
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 273
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|aoo|doo|dcc)
            & index[0,1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [6:,9:,12:,15:12,12:6,            15:9,12:3,15:6,18:6,21:9,21:6,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:,20:10] 
                | Drawup[1:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[10,20]} 
                | Drawup[20:,20:10] 
                | Since{Min & index[0]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Drawup[20:10] 
                | Since{Min & index[5]} 
              )
            & Since[21:, 125:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[1:,20:,60:] 
        | FracRec[21:,125:] 
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doc)
            & index[1,2,0:2] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[10,20]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 125:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.0, 2012.5, 2012.25, 2013.75, 2013.5, 2014.75, 2009.75, 2010.75, 2011.5, 2012.75, 2013.0, 2014.0, 2015.0}), frozenset({2010.5, 2011.25, 2011.75, 2009.0, 2009.25, 2014.25, 2009.5, 2010.25, 2011.0, 2012.0, 2013.25, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (238, 187)
train = (1.5082241629355189, 1.0343903373403329)
scores = (0.39453698085926231, 0.40423978390651533)
score = 0.3993883823828888
holdout = (0.7264814919681919, 0.6159209218961572)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (175, 224)
train = (1.5370846515042031, 1.1828988470515867)
scores = (0.42680227176578533, 0.40208830724533667)
score = 0.41444528950556103
holdout = (0.7375308674783733, 0.6416638661711246)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (403, 246)
train = (1.6229225681750141, 1.0447834756217995)
scores = (0.42441695205554447, 0.40945559498018191)
score = 0.4169362735178632
holdout = (0.7510500587290294, 0.6267374306402231)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (403, 246)
train = (1.6229225681750141, 1.0447834756217995)
scores = (0.42441695205554447, 0.40945559498018191)
score = 0.4169362735178632
holdout = (0.7510500587290294, 0.6267374306402231)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (629, 206)
train = (2.2045903391207697, 1.1956804426350367)
scores = (0.46901941845024736, 0.41822480259367711)
score = 0.4436221105219622
holdout = (0.8179279623771161, 0.6558254464062684)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (230, 205)
train = (2.0948854699304453, 1.3686677602391852)
scores = (0.48223509803589615, 0.40361162935278144)
score = 0.4429233636943388
holdout = (0.800411475743277, 0.6741183897187397)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (216, 233)
train = (1.5530423617743343, 1.13023446735249)
scores = (0.41284969241733133, 0.43305772605252113)
score = 0.42295370923492626
holdout = (0.7312589475881516, 0.6583255954121249)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (629, 206)
train = (2.2045903391207697, 1.1956804426350367)
scores = (0.46901941845024736, 0.41822480259367711)
score = 0.4436221105219622
holdout = (0.8179279623771161, 0.6558254464062684)
>>> t = 4601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 273
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|aoo|doo|dcc)
            & index[0,1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [6:,9:,12:,15:12,12:6,            15:9,12:3,15:6,18:6,21:9,21:6,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:,20:10] 
                | Drawup[1:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[10,20]} 
                | Drawup[20:,20:10] 
                | Since{Min & index[0]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Drawup[20:10] 
                | Since{Min & index[5]} 
              )
            & Since[21:, 125:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[1:,20:,60:] 
        | FracRec[21:,125:] 
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doc)
            & index[1,2,0:2] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[10,20]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 125:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.75, 2012.25, 2012.5, 2012.75, 2013.25, 2014.75, 2014.25, 2009.75, 2010.0, 2009.5, 2013.0, 2014.5, 2015.25}), frozenset({2010.25, 2011.0, 2011.25, 2011.75, 2009.25, 2013.75, 2009.0, 2010.5, 2011.5, 2012.0, 2013.5, 2014.0, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (182, 33)
train = (1.2192859676945818, 0.75756157927513712)
scores = (0.45768148227915606, 0.49196787885279736)
score = 0.4748246805659767
holdout = (0.6975024719769798, 0.5151866443265681)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (94, 24)
train = (1.1565576242190441, 0.77709069386627583)
scores = (0.47135479895775156, 0.47109893404827657)
score = 0.47122686650301404
holdout = (0.6774992293237574, 0.49234962712561375)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 56)
train = (0.72373042279088307, 0.87074256336225975)
scores = (0.36480848022234497, 0.49813418658544861)
score = 0.43147133340389676
holdout = (0.51333403559614, 0.5854057901547832)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (182, 33)
train = (1.2192859676945818, 0.75756157927513712)
scores = (0.45768148227915606, 0.49196787885279736)
score = 0.4748246805659767
holdout = (0.6975024719769798, 0.5151866443265681)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (130, 84)
train = (1.3206672002182596, 1.0632551758350053)
scores = (0.47476592458024319, 0.46668994629821542)
score = 0.4707279354392293
holdout = (0.7248312808026635, 0.6156767126224345)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (127, 17)
train = (1.5445841276792238, 0.83010416970399337)
scores = (0.50421907381909481, 0.48107000961291219)
score = 0.49264454171600347
holdout = (0.7522526244268181, 0.5007703077848918)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (213, 58)
train = (1.3377199159896105, 0.97479384857825502)
scores = (0.49500806719558049, 0.49326567713514247)
score = 0.4941368721653615
holdout = (0.7442382295403731, 0.615728386067331)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (213, 58)
train = (1.3377199159896105, 0.97479384857825502)
scores = (0.49500806719558049, 0.49326567713514247)
score = 0.4941368721653615
holdout = (0.7442382295403731, 0.615728386067331)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (176, 49)
train = (1.5414314858032065, 1.0520253943779574)
scores = (0.45288783462591758, 0.48712802603641919)
score = 0.4700079303311684
holdout = (0.7561229250408533, 0.6217516276250536)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (10, 11)
train = (1.2160688609729513, 0.83942980799675315)
scores = (0.48864735979416607, 0.4849985793889009)
score = 0.4868229695915335
holdout = (0.6825485667862703, 0.4943311622261229)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (179, 38)
train = (1.3843896828375322, 1.0254281965826841)
scores = (0.4813040466237769, 0.47735595365891087)
score = 0.47933000014134386
holdout = (0.7487334285438073, 0.6386936021365487)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (10, 11)
train = (1.2160688609729513, 0.83942980799675315)
scores = (0.48864735979416607, 0.4849985793889009)
score = 0.4868229695915335
holdout = (0.6825485667862703, 0.4943311622261229)
>>> t = 4602 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 273
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|aoo|doo|dcc)
            & index[0,1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [6:,9:,12:,15:12,12:6,            15:9,12:3,15:6,18:6,21:9,21:6,21:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:,20:10] 
                | Drawup[1:] 
                | Since{Min&index[0]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[10,20]} 
                | Drawup[20:,20:10] 
                | Since{Min & index[0]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                | Drawup[20:10] 
                | Since{Min & index[5]} 
              )
            & Since[21:, 125:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[1:,20:,60:] 
        | FracRec[21:,125:] 
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doc)
            & index[1,2,0:2] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[10,20]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 125:] 
          )
      )
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.75, 2012.5, 2012.0, 2013.25, 2013.75, 2014.75, 2010.75, 2011.5, 2012.25, 2013.5, 2014.5, 2015.25}), frozenset({2010.5, 2011.25, 2009.0, 2009.25, 2009.75, 2014.0, 2009.5, 2010.0, 2011.0, 2012.75, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (181, 208)
train = (1.4267062878284333, 1.1066333699356403)
scores = (0.45414848275940611, 0.37317297749764833)
score = 0.4136607301285272
holdout = (0.721296470973653, 0.6138334674700034)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (106, 86)
train = (1.4102941038882664, 0.98882532514814714)
scores = (0.41124002705611701, 0.34243513897013311)
score = 0.3768375830131251
holdout = (0.7033378662143182, 0.5650905862541902)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (219, 274)
train = (1.407481496976255, 1.0887878199687291)
scores = (0.45850783779623439, 0.38666633972481634)
score = 0.42258708876052536
holdout = (0.721971780728161, 0.6238057564564724)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (219, 274)
train = (1.407481496976255, 1.0887878199687291)
scores = (0.45850783779623439, 0.38666633972481634)
score = 0.42258708876052536
holdout = (0.721971780728161, 0.6238057564564724)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (181, 128)
train = (1.607761369096002, 1.1307730562506115)
scores = (0.45517568393442354, 0.37983895814092411)
score = 0.41750732103767385
holdout = (0.7490336802407008, 0.6226299998329586)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (98, 43)
train = (1.637743392762337, 0.99615211668437698)
scores = (0.40251276233974598, 0.44867742400593502)
score = 0.4255950931728405
holdout = (0.727138434186347, 0.578562877859675)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (166, 19)
train = (1.4639797907936904, 0.75098943925402539)
scores = (0.45239343737822973, 0.30324334269429321)
score = 0.3778183900362615
holdout = (0.7350395402108011, 0.4838584703143845)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (98, 43)
train = (1.637743392762337, 0.99615211668437698)
scores = (0.40251276233974598, 0.44867742400593502)
score = 0.4255950931728405
holdout = (0.727138434186347, 0.578562877859675)
>>> t = 4700 ===================================================================================================
(pair) len(F.columns) = 129
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 154
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|daoc)
            & index[0,1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|Volatility)
            & [10:,15:10,20:10] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|daoc)
            & index[0,1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|Volatility)
            & [10:,15:10,20:10] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo)
            & index[0] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(Volatility)
            & [5:,10:5,20:15,15:5,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|aoo[10:]|doo[10:])} 
            & (
                | Drawdown[ 5:,20:, 10:5,20:10] 
                | Since{Max&index[10]} 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,62:,125:,250:] 
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.25, 2010.75, 2011.0, 2012.75, 2012.25, 2014.5, 2009.25, 2010.5, 2011.75, 2009.75, 2013.5, 2014.75, 2015.25}), frozenset({2011.5, 2012.5, 2009.0, 2013.25, 2013.75, 2014.0, 2009.5, 2010.0, 2011.25, 2012.0, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (134, 130)
train = (0.9757653662474719, 0.989072291885151)
scores = (0.41121238202022276, 0.42075562261052474)
score = 0.41598400231537375
holdout = (0.6147014262011835, 0.6117697582693478)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (219, 153)
train = (1.0664935410623402, 0.92985593776634123)
scores = (0.38802698427531757, 0.4260977285674003)
score = 0.4070623564213589
holdout = (0.6335458780212194, 0.592430748035943)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (216, 205)
train = (1.0287482065513363, 1.0772905463602023)
scores = (0.43451823816290364, 0.43382390644809493)
score = 0.4341710723054993
holdout = (0.6462683125362212, 0.6422773828157093)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (216, 205)
train = (1.0287482065513363, 1.0772905463602023)
scores = (0.43451823816290364, 0.43382390644809493)
score = 0.4341710723054993
holdout = (0.6462683125362212, 0.6422773828157093)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (158, 129)
train = (1.1624061765047309, 1.1536245694466902)
scores = (0.4151055771253544, 0.42663238007622656)
score = 0.4208689786007905
holdout = (0.6739675872151457, 0.663624111510405)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (160, 95)
train = (1.23306955299577, 1.0217770783507827)
scores = (0.37667412514830906, 0.43247985810519396)
score = 0.40457699162675154
holdout = (0.6705494289715559, 0.6209267726052621)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (158, 226)
train = (1.0483086183237911, 1.1782935782389254)
scores = (0.43540807452390867, 0.43788670113900896)
score = 0.43664738783145884
holdout = (0.6529871609177501, 0.6726768671828959)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (158, 226)
train = (1.0483086183237911, 1.1782935782389254)
scores = (0.43540807452390867, 0.43788670113900896)
score = 0.43664738783145884
holdout = (0.6529871609177501, 0.6726768671828959)
>>> t = 4701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 154
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|daoc)
            & index[0,1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|Volatility)
            & [10:,15:10,20:10] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|daoc)
            & index[0,1,2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(vp1dd|Volatility)
            & [10:,15:10,20:10] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo)
            & index[0] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(Volatility)
            & [5:,10:5,20:15,15:5,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|aoo[10:]|doo[10:])} 
            & (
                | Drawdown[ 5:,20:, 10:5,20:10] 
                | Since{Max&index[10]} 
                | Since{Min&index[0,10]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | 
        | FracRec[21:,62:,125:,250:] 
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.0, 2010.75, 2009.25, 2013.0, 2013.75, 2014.25, 2014.5, 2009.5, 2010.25, 2011.75, 2012.5, 2013.5, 2014.0}), frozenset({2015.0, 2011.0, 2011.5, 2012.25, 2012.75, 2009.75, 2009.0, 2010.5, 2011.25, 2012.0, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (264, 382)
train = (1.1744517470169702, 1.1058993317205463)
scores = (0.39614261286912389, 0.42874677259947686)
score = 0.4124446927343004
holdout = (0.653650589941085, 0.6414554254994048)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (152, 279)
train = (1.0451899973816392, 0.9830480096459725)
scores = (0.38092692592037652, 0.42545149053958387)
score = 0.40318920822998017
holdout = (0.6162618865171666, 0.594003650782028)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (255, 318)
train = (1.09563363307143, 1.083741100957228)
scores = (0.39258536703302149, 0.43224414034424397)
score = 0.41241475368863273
holdout = (0.6199402700986645, 0.6462559052011463)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (264, 382)
train = (1.1744517470169702, 1.1058993317205463)
scores = (0.39614261286912389, 0.42874677259947686)
score = 0.4124446927343004
holdout = (0.653650589941085, 0.6414554254994048)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (206, 328)
train = (1.2966928554766104, 1.2234027926880913)
scores = (0.40853991251095573, 0.45147428724355082)
score = 0.4300070998772533
holdout = (0.6865601845416314, 0.673256543428298)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (191, 224)
train = (1.3585813100053927, 1.1319506731535001)
scores = (0.40601194037664834, 0.43685893625541616)
score = 0.42143543831603225
holdout = (0.6966680587215581, 0.6282245603370227)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (82, 220)
train = (0.94694146598637519, 1.1126897174279466)
scores = (0.37758630238339635, 0.43109174647526605)
score = 0.40433902442933123
holdout = (0.5652339552836224, 0.6558684812718316)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (206, 328)
train = (1.2966928554766104, 1.2234027926880913)
scores = (0.40853991251095573, 0.45147428724355082)
score = 0.4300070998772533
holdout = (0.6865601845416314, 0.673256543428298)
>>> t = 4800 ===================================================================================================
(pair) len(F.columns) = 66
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 133
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|daoc|vp1dd)
            & index[1,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|vp5dd)
            & [3:,9:,12:,15:,15:12,21:18,12:6,18:9,21:12,18:6,18:3,21:6,21:3] 
          }
        | ( 
            <>Return{(oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[10]} 
              )
            & Since[21:, 62:, 125:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:,10:,20:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[10]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.5, 2010.0, 2011.75, 2012.75, 2012.0, 2013.0, 2013.25, 2009.5, 2010.25, 2011.25, 2009.25, 2013.5, 2015.0}), frozenset({2011.5, 2012.5, 2009.75, 2014.5, 2014.25, 2014.0, 2009.0, 2010.75, 2011.0, 2012.25, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (161, 458)
train = (1.0930311937382495, 1.3342806799939919)
scores = (0.27501238947224377, 0.28699733898301583)
score = 0.2810048642276298
holdout = (0.5979684289765625, 0.6521991618740454)
>>> t = 4801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 133
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|daoc|vp1dd)
            & index[1,2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|vp5dd)
            & [3:,9:,12:,15:,15:12,21:18,12:6,18:9,21:12,18:6,18:3,21:6,21:3] 
          }
        | ( 
            <>Return{(oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[10]} 
              )
            & Since[21:, 62:, 125:] 
          )
      )
    | Market{.& 
        <>(~Weight)
        & (Return| VP)
        & [1:,10:,20:] 
      }
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[10]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.0, 2011.75, 2012.5, 2013.25, 2013.5, 2014.0, 2009.75, 2010.5, 2011.25, 2012.75, 2013.75, 2014.75, 2015.0}), frozenset({2010.75, 2011.5, 2012.25, 2009.0, 2009.25, 2014.25, 2009.5, 2010.25, 2011.0, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (389, 204)
train = (1.4527960858746816, 0.87678402433253078)
scores = (0.31460924002609447, 0.39923005964616154)
score = 0.356919649836128
holdout = (0.6985416037100857, 0.5444982303003422)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (297, 287)
train = (1.4774488516967852, 1.0583413905979944)
scores = (0.34466458931832489, 0.45067447565993662)
score = 0.39766953248913073
holdout = (0.7157696097651601, 0.5955158525765912)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (238, 160)
train = (1.1881930632737048, 0.80687085407669845)
scores = (0.28028722053366606, 0.37879232336906316)
score = 0.32953977195136464
holdout = (0.618612460624229, 0.5375652860145346)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (297, 287)
train = (1.4774488516967852, 1.0583413905979944)
scores = (0.34466458931832489, 0.45067447565993662)
score = 0.39766953248913073
holdout = (0.7157696097651601, 0.5955158525765912)
>>> t = 4900 ===================================================================================================
(pair) len(F.columns) = 56
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 165
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|vp1dd)
            & index[2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [5:,10:5,20:10] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            | Volatility[10:, 20:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| Volatility)
        & [1:,60:] 
      }
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|vp1dd)
            & index[2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [5:,10:5,20:10] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            | Volatility[10:, 20:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| Volatility)
        & [1:,60:] 
      }
#<>#
0
#<>#
    <>0
len(samps) = 2
(frozenset({2010.25, 2011.25, 2011.5, 2013.25, 2014.25, 2014.5, 2009.0, 2010.0, 2011.75, 2009.5, 2013.75, 2014.75, 2015.0}), frozenset({2010.5, 2012.25, 2012.5, 2012.75, 2009.75, 2013.5, 2009.25, 2010.75, 2011.0, 2012.0, 2013.0, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (18, 3)
train = (0.70380150977983047, 0.74474704519063006)
scores = (0.23514565946242863, 0.33321102266368546)
score = 0.28417834106305706
holdout = (0.45945331744307927, 0.48570632869215435)
>>> t = 4901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 165
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|vp1dd)
            & index[2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [5:,10:5,20:10] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            | Volatility[10:, 20:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| Volatility)
        & [1:,60:] 
      }
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|vp1dd)
            & index[2,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [5:,10:5,20:10] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            | Volatility[10:, 20:]
            & (
                <>Drawdown[20:10] 
                | Since{Max & index[20]} 
                | Since{Min & index[0]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| Volatility)
        & [1:,60:] 
      }
#<>#
0
#<>#
    <>0
len(samps) = 2
(frozenset({2010.5, 2011.0, 2011.25, 2012.75, 2013.75, 2014.25, 2014.5, 2014.0, 2010.75, 2011.5, 2012.0, 2013.5, 2014.75}), frozenset({2010.25, 2015.0, 2012.5, 2009.0, 2009.25, 2013.25, 2009.75, 2009.5, 2010.0, 2011.75, 2012.25, 2013.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (12, 23)
train = (0.66673478182351553, 0.66017716419658234)
scores = (0.28608257151205108, 0.29679569648745507)
score = 0.2914391339997531
holdout = (0.4659887899112948, 0.4552831525040312)
>>> t = 5000 ===================================================================================================
(pair) len(F.columns) = 82
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 112
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Min&index[0,5]} 
              )
            & Since[ 62:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Drawup[20:10] 
                | Since{Min & index[0]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( VP)
        & [5:,20:] 
      }
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|dcc|vp1dd)
            & index[1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo|vp1dd|vp5dd|Volatility)
            & [3:,6:,12:,12:9,12:6,            15:9,12:3,15:6,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,20:10] 
                | Since{Max & index[20]} 
                | Drawup[20:] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.0, 2012.75, 2009.0, 2014.25, 2014.0, 2009.25, 2010.5, 2011.75, 2012.5, 2013.75, 2014.5, 2015.25}), frozenset({2011.25, 2011.5, 2012.25, 2009.75, 2013.25, 2013.5, 2009.5, 2010.75, 2011.0, 2012.0, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 291)
train = (0.53417353609488627, 1.4390921266226027)
scores = (0.31932728469137833, 0.44105654001896749)
score = 0.3801919123551729
holdout = (0.40180921553488586, 0.6994368799385685)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 335)
train = (0.53234398628532331, 1.5384524292318789)
scores = (0.34465542149846834, 0.43191534588484964)
score = 0.388285383691659
holdout = (0.4161727703772996, 0.709739200817092)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 144)
train = (0.59769631465448303, 1.0928140148076584)
scores = (0.30262460457730006, 0.40253734602709174)
score = 0.3525809753021959
holdout = (0.4207320377014906, 0.6151320656135524)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (1, 335)
train = (0.53234398628532331, 1.5384524292318789)
scores = (0.34465542149846834, 0.43191534588484964)
score = 0.388285383691659
holdout = (0.4161727703772996, 0.709739200817092)
>>> t = 5001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 112
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:10] 
                | Since{Min&index[0,5]} 
              )
            & Since[ 62:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,20]} 
                | Drawup[20:10] 
                | Since{Min & index[0]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( VP)
        & [5:,20:] 
      }
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|dcc|vp1dd)
            & index[1,2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo|vp1dd|vp5dd|Volatility)
            & [3:,6:,12:,12:9,12:6,            15:9,12:3,15:6,18:6,21:9,18:3,21:3] 
          }
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,20:10] 
                | Since{Max & index[20]} 
                | Drawup[20:] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                | Since{Max & index[20]} 
                | Since{Min & index[20]} 
              )
            & Since[21:, 62:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2012.75, 2012.0, 2009.5, 2013.75, 2013.25, 2013.0, 2014.75, 2014.25, 2009.0, 2010.25, 2012.25, 2013.5, 2014.0}), frozenset({2010.0, 2010.75, 2015.0, 2011.25, 2011.5, 2011.75, 2009.75, 2009.25, 2010.5, 2011.0, 2012.5, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (11, 16)
train = (0.73257826463140752, 0.62979064341786695)
scores = (0.36430538914272093, 0.24348341861339334)
score = 0.3038944038780571
holdout = (0.5143925090199306, 0.39222908393378847)
>>> t = 5100 ===================================================================================================
(pair) len(F.columns) = 41
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 112
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|vp1dd)
            & index[0,1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo)
            & [10:,15:,10:5,15:10,20:15,15:5,20:10,20:5] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|vp1dd)
            & index[0,1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo)
            & [10:,15:,10:5,15:10,20:15,15:5,20:10,20:5] 
          }
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo)
            & [5:,15:5,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:] 
                | Drawup[20:10] 
                | Since{Min&index[10]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.75, 2010.0, 2011.25, 2012.0, 2013.75, 2014.5, 2014.25, 2009.75, 2010.25, 2011.0, 2012.5, 2013.25, 2014.75}), frozenset({2015.0, 2011.75, 2012.75, 2009.0, 2009.25, 2013.5, 2009.5, 2010.5, 2011.5, 2012.25, 2013.0, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (30, 6)
train = (0.742334551868995, 0.47709503237732198)
scores = (0.29964392305358895, 0.29593245151431707)
score = 0.297788187283953
holdout = (0.47293222245872485, 0.38078984460085147)
>>> t = 5101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 112
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|vp1dd)
            & index[0,1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo)
            & [10:,15:,10:5,15:10,20:15,15:5,20:10,20:5] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|vp1dd)
            & index[0,1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|doo)
            & [10:,15:,10:5,15:10,20:15,15:5,20:10,20:5] 
          }
      )
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo)
            & [5:,15:5,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:] 
                | Drawup[20:10] 
                | Since{Min&index[10]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2015.25, 2012.25, 2009.5, 2009.0, 2013.25, 2013.0, 2014.25, 2009.75, 2010.75, 2012.5, 2013.5, 2014.75, 2015.0}), frozenset({2010.0, 2010.5, 2011.25, 2011.5, 2011.75, 2012.75, 2014.0, 2009.25, 2010.25, 2011.0, 2012.0, 2013.75, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (505, 126)
train = (0.90143772442922077, 0.8080434861706538)
scores = (0.49104536950736921, 0.35578670297000531)
score = 0.4234160362386873
holdout = (0.6105166097537963, 0.5235225025790441)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (319, 82)
train = (0.84936047422754013, 0.78635665427891543)
scores = (0.47958565038481477, 0.35553330260541266)
score = 0.4175594764951137
holdout = (0.5818983404873919, 0.5238028587099003)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (177, 131)
train = (0.72637545824831184, 0.77399824926478189)
scores = (0.47376020970829336, 0.35999232773537015)
score = 0.41687626872183176
holdout = (0.5555709583450155, 0.5059212021895054)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (505, 126)
train = (0.90143772442922077, 0.8080434861706538)
scores = (0.49104536950736921, 0.35578670297000531)
score = 0.4234160362386873
holdout = (0.6105166097537963, 0.5235225025790441)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (32, 129)
train = (0.68862062885061248, 0.92908347792973389)
scores = (0.4697299375712799, 0.37209647154185743)
score = 0.42091320455656867
holdout = (0.5420334993929278, 0.5700306621898631)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (169, 11)
train = (0.90953202128694532, 0.73867725241742554)
scores = (0.49706125847864779, 0.35383441754772871)
score = 0.42544783801318825
holdout = (0.6076068431273347, 0.5052491744650023)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (29, 310)
train = (0.61686271070137499, 0.97775264159418196)
scores = (0.45019435431939736, 0.378896246198899)
score = 0.41454530025914815
holdout = (0.5140557403930756, 0.5874650347617613)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (169, 11)
train = (0.90953202128694532, 0.73867725241742554)
scores = (0.49706125847864779, 0.35383441754772871)
score = 0.42544783801318825
holdout = (0.6076068431273347, 0.5052491744650023)
>>> t = 5200 ===================================================================================================
(pair) len(F.columns) = 32
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 63
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:] 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[ 5:,20:] 
              )
            & Since[21:, 125:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|vp1dd)
            & index[2, 0:1,1:2,0:2] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2011.5, 2012.25, 2012.5, 2013.75, 2014.0, 2009.75, 2010.25, 2011.0, 2012.0, 2013.0, 2014.25, 2015.0}), frozenset({2010.75, 2011.75, 2009.0, 2009.25, 2013.5, 2014.5, 2009.5, 2010.5, 2011.25, 2012.75, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (131, 218)
train = (1.1746804026518471, 1.042075987489808)
scores = (0.3318293718095639, 0.31203608391351167)
score = 0.3219327278615378
holdout = (0.6335820768024801, 0.5944692589393199)
>>> t = 5201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 63
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:] 
                | Since{Min&index[20]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[ 5:,20:] 
              )
            & Since[21:, 125:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|vp1dd)
            & index[2, 0:1,1:2,0:2] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.5, 2015.25, 2011.5, 2012.0, 2009.5, 2014.5, 2009.0, 2010.75, 2011.75, 2009.25, 2013.5, 2014.0, 2015.0}), frozenset({2010.25, 2011.25, 2012.5, 2012.75, 2013.25, 2013.75, 2014.25, 2009.75, 2010.0, 2011.0, 2012.25, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (86, 345)
train = (0.75777393993490283, 1.4229192768495706)
scores = (0.37690772523641408, 0.32660464246377363)
score = 0.3517561838500939
holdout = (0.5059652796324103, 0.6817636048309045)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (139, 155)
train = (0.93221611566276597, 1.2948479738050021)
scores = (0.38607870958191792, 0.28749480990152115)
score = 0.33678675974171957
holdout = (0.5633695326354331, 0.6504298946676755)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (151, 11)
train = (0.82576177665201012, 0.69673215978974323)
scores = (0.36077964166603937, 0.21605479104091785)
score = 0.2884172163534786
holdout = (0.5386161870767067, 0.3954405549999388)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (86, 345)
train = (0.75777393993490283, 1.4229192768495706)
scores = (0.37690772523641408, 0.32660464246377363)
score = 0.3517561838500939
holdout = (0.5059652796324103, 0.6817636048309045)
>>> t = 5300 ===================================================================================================
(pair) len(F.columns) = 20
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 44
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [10:,20:10] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:] 
                | Since{Max & index[0,10]} 
                | Drawup[1, 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[ 62:] 
          )
      )
    | 
        Time{long}
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2011.75, 2011.0, 2009.5, 2009.75, 2013.25, 2013.0, 2014.25, 2014.5, 2009.0, 2011.25, 2012.5, 2013.5, 2014.75}), frozenset({2010.0, 2010.5, 2010.75, 2015.0, 2012.25, 2012.75, 2009.25, 2010.25, 2011.5, 2012.0, 2013.75, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 70)
train = (0.60536928477920438, 0.98258340970205316)
scores = (0.19768794770203804, 0.26955820221386451)
score = 0.23362307495795126
holdout = (0.4033210417568381, 0.5153922048280577)
>>> t = 5301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 44
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [10:,20:10] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:] 
                | Since{Max & index[0,10]} 
                | Drawup[1, 10:5] 
                | Since{Min & index[20]} 
              )
            & Since[ 62:] 
          )
      )
    | 
        Time{long}
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2011.25, 2009.75, 2013.25, 2013.75, 2014.75, 2014.25, 2009.25, 2010.75, 2011.75, 2012.0, 2013.5, 2014.0, 2015.25}), frozenset({2010.25, 2010.5, 2011.5, 2012.5, 2012.75, 2009.0, 2009.5, 2010.0, 2011.0, 2012.25, 2013.0, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 53)
train = (0.58612683436241009, 0.81042863917460251)
scores = (0.24873966398495839, 0.27787380523107291)
score = 0.2633067346080157
holdout = (0.41096154524092293, 0.49508327064316515)
>>> t = 5400 ===================================================================================================
(pair) len(F.columns) = 53
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 112
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(dcc|vp1dd)
            & index[0,1, 0:1,1:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:,20:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[0,5]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                | Since{Max & index[0]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[0]} 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [20:] 
      }
    | 
        | Return{mix[4,5,8,9,11,12,14,17,18,19]}
        | Return{ af} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2012.0, 2013.0, 2013.25, 2014.75, 2014.5, 2009.5, 2015.25, 2011.25, 2012.5, 2013.75, 2014.0, 2015.0}), frozenset({2010.0, 2010.5, 2011.5, 2011.75, 2012.75, 2009.25, 2009.75, 2009.0, 2010.25, 2011.0, 2012.25, 2013.5, 2014.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (13, 139)
train = (0.7910694745950726, 0.9183975464197166)
scores = (0.30906836173409136, 0.3903927457164128)
score = 0.3497305537252521
holdout = (0.527815108638295, 0.5702192921471255)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (688, 149)
train = (1.6212610727434733, 0.95485706724038222)
scores = (0.49162040818854214, 0.41250987530135291)
score = 0.4520651417449475
holdout = (0.7685386323102965, 0.5735549034032242)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 208)
train = (0.6187313551737148, 0.97312418589090277)
scores = (0.30434093578238375, 0.39193626290830191)
score = 0.34813859934534286
holdout = (0.4573268072738854, 0.5849335760871386)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (688, 149)
train = (1.6212610727434733, 0.95485706724038222)
scores = (0.49162040818854214, 0.41250987530135291)
score = 0.4520651417449475
holdout = (0.7685386323102965, 0.5735549034032242)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (15, 103)
train = (0.90127037306299707, 0.94145477069523686)
scores = (0.31750223978847908, 0.39050554335544219)
score = 0.35400389157196066
holdout = (0.5758034209269767, 0.5704506260030607)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (7, 139)
train = (0.93393586264046813, 1.2036542771824841)
scores = (0.34479503856768956, 0.42742524172258478)
score = 0.38611014014513717
holdout = (0.584198458544333, 0.6439171011059187)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 177)
train = (0.68179397471592107, 1.0193839703624434)
scores = (0.31675118685212966, 0.40928728120171709)
score = 0.3630192340269234
holdout = (0.4850275793627727, 0.6103949908786128)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (7, 139)
train = (0.93393586264046813, 1.2036542771824841)
scores = (0.34479503856768956, 0.42742524172258478)
score = 0.38611014014513717
holdout = (0.584198458544333, 0.6439171011059187)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (14, 110)
train = (0.98648061035567391, 1.0496314827564506)
scores = (0.33397030212819112, 0.41535198171251481)
score = 0.37466114192035294
holdout = (0.608394335598392, 0.6180267511187685)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (6, 121)
train = (1.0796272388998043, 1.3748523861465769)
scores = (0.39284784499372982, 0.43758990941111109)
score = 0.41521887720242046
holdout = (0.6480318648725474, 0.67955813743716)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (3, 192)
train = (0.70904013060323989, 1.1081101504117923)
scores = (0.32445270137381316, 0.40572983724804645)
score = 0.36509126931092983
holdout = (0.4979048097587676, 0.6386186006061634)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (6, 121)
train = (1.0796272388998043, 1.3748523861465769)
scores = (0.39284784499372982, 0.43758990941111109)
score = 0.41521887720242046
holdout = (0.6480318648725474, 0.67955813743716)
>>> t = 5401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 112
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(dcc|vp1dd)
            & index[0,1, 0:1,1:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:,20:, 10:5,20:10] 
                | Since{Max&index[0]} 
                | Since{Min&index[0,5]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                | Since{Max & index[0]} 
                | Since{Min & index[0,10]} 
              )
            & Since[21:, 125:] 
          )
        | ( 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[0]} 
                | Since{Min & index[10]} 
              )
            & Since[21:, 125:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [20:] 
      }
    | 
        | Return{mix[4,5,8,9,11,12,14,17,18,19]}
        | Return{ af} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.0, 2010.75, 2011.0, 2013.5, 2013.75, 2009.25, 2015.0, 2011.25, 2012.75, 2013.25, 2014.25, 2015.25}), frozenset({2011.75, 2012.25, 2012.5, 2009.0, 2009.75, 2014.5, 2014.0, 2009.5, 2010.5, 2011.5, 2012.0, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (12, 124)
train = (0.74079097920211423, 1.0778597044360245)
scores = (0.31804865709086133, 0.44940335536152431)
score = 0.3837260062261928
holdout = (0.47987453247714174, 0.6300517568400437)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (45, 101)
train = (0.83495914487290412, 0.97723745619478075)
scores = (0.32559427131540514, 0.41063664492682261)
score = 0.3681154581211139
holdout = (0.5268021391352589, 0.5878414580250875)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (184, 41)
train = (1.1620087461286177, 0.82873149274911662)
scores = (0.4102053266514521, 0.43054744208168855)
score = 0.4203763843665703
holdout = (0.6573297641443827, 0.5633770687601205)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (184, 41)
train = (1.1620087461286177, 0.82873149274911662)
scores = (0.4102053266514521, 0.43054744208168855)
score = 0.4203763843665703
holdout = (0.6573297641443827, 0.5633770687601205)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (31, 77)
train = (0.99837418993916349, 1.0995659830431008)
scores = (0.33944009600698266, 0.45194108222683682)
score = 0.39569058911690974
holdout = (0.5791192057290059, 0.6396783908287386)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (125, 123)
train = (1.3581320221056512, 1.1859569730320834)
scores = (0.3552171531264065, 0.4075263308303953)
score = 0.3813717419784009
holdout = (0.6832443575210762, 0.6357295602767018)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (37, 37)
train = (1.0032012695153067, 0.92117557916249426)
scores = (0.38948541603578951, 0.4588783579837189)
score = 0.42418188700975423
holdout = (0.595406054471222, 0.6018790716272345)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (37, 37)
train = (1.0032012695153067, 0.92117557916249426)
scores = (0.38948541603578951, 0.4588783579837189)
score = 0.42418188700975423
holdout = (0.595406054471222, 0.6018790716272345)
>>> t = 5500 ===================================================================================================
(pair) len(F.columns) = 113
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 232
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp1dd|vp5dd|Volatility)
            & [10:,15:,10:5,20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:, 10:5] 
                | Since{Min&index[20]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[ 10:5] 
                | Since{Max & index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[60:] 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo)
            & index[0, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|vp5dd)
            & [15:,20:15,15:5,20:10,20:5] 
          }
      )
    | 
        | FracRec[250:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.25, 2010.0, 2012.5, 2012.0, 2014.0, 2014.5, 2009.25, 2015.25, 2011.75, 2012.25, 2013.75, 2014.75, 2015.0}), frozenset({2010.75, 2011.25, 2011.5, 2009.0, 2009.75, 2013.25, 2013.5, 2009.5, 2010.5, 2011.0, 2012.75, 2013.0, 2014.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (6, 69)
train = (0.67803648653996951, 0.87320881282680718)
scores = (0.43151988261566304, 0.37684205259955983)
score = 0.40418096760761146
holdout = (0.5234617700178695, 0.5863414555168075)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (12, 102)
train = (0.68590505182705441, 1.0210760948959583)
scores = (0.37768950873584811, 0.36244724747073281)
score = 0.37006837810329046
holdout = (0.5032559169022869, 0.6268308509524559)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (14, 269)
train = (0.73175192067480632, 1.1323395907026408)
scores = (0.45605332217935568, 0.38410626233940315)
score = 0.4200797922593794
holdout = (0.5446018866982053, 0.6706172188326361)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (14, 269)
train = (0.73175192067480632, 1.1323395907026408)
scores = (0.45605332217935568, 0.38410626233940315)
score = 0.4200797922593794
holdout = (0.5446018866982053, 0.6706172188326361)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (8, 65)
train = (0.88419895903121615, 1.018104165658579)
scores = (0.44358698231066285, 0.38044476780536812)
score = 0.4120158750580155
holdout = (0.6106294996204071, 0.6344837139895321)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (11, 229)
train = (0.86589833369939351, 1.541392462129157)
scores = (0.3887007472588152, 0.36206560627986967)
score = 0.3753831767693424
holdout = (0.5735176689298991, 0.7375185527890158)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (17, 202)
train = (0.80323639861040441, 1.1736377593629606)
scores = (0.45706646524882805, 0.38528130542865829)
score = 0.42117388533874317
holdout = (0.5705467995742116, 0.6875491805406225)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (17, 202)
train = (0.80323639861040441, 1.1736377593629606)
scores = (0.45706646524882805, 0.38528130542865829)
score = 0.42117388533874317
holdout = (0.5705467995742116, 0.6875491805406225)
>>> t = 5501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 232
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|vp1dd|vp5dd|Volatility)
            & [10:,15:,10:5,20:15,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[20:, 10:5] 
                | Since{Min&index[20]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <> Volatility[20:] 
            | Volatility[ 20:]
            & (
                <>Drawdown[ 10:5] 
                | Since{Max & index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        <>Return{pure&~dd} & VP[60:] 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo)
            & index[0, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp1dd|vp5dd)
            & [15:,20:15,15:5,20:10,20:5] 
          }
      )
    | 
        | FracRec[250:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.5, 2012.25, 2009.75, 2013.75, 2013.5, 2014.5, 2009.25, 2010.0, 2011.25, 2012.75, 2013.25, 2014.25, 2015.25}), frozenset({2010.75, 2011.5, 2011.75, 2012.5, 2009.0, 2014.0, 2009.5, 2010.25, 2011.0, 2012.0, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (115, 15)
train = (1.0160976767088727, 0.71118136610894767)
scores = (0.3508637083815272, 0.39499440787305024)
score = 0.3729290581272887
holdout = (0.6245719749754031, 0.5153963543961724)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (393, 19)
train = (1.6425676680486827, 0.73583325055129389)
scores = (0.37549597039006, 0.37602132737149252)
score = 0.37575864888077626
holdout = (0.7875866635598483, 0.5198842227946652)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (350, 17)
train = (1.3030376218180231, 0.68024741986353976)
scores = (0.38406118054927679, 0.40415379473152369)
score = 0.39410748764040027
holdout = (0.7216086188015574, 0.5038785633514464)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (350, 17)
train = (1.3030376218180231, 0.68024741986353976)
scores = (0.38406118054927679, 0.40415379473152369)
score = 0.39410748764040027
holdout = (0.7216086188015574, 0.5038785633514464)
>>> t = 5600 ===================================================================================================
(pair) len(F.columns) = 21
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 46
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|doo|vp1dd)
            & index[1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [5:,10:,10:5,15:10,20:15] 
          }
      )
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2011.0, 2011.25, 2012.75, 2012.0, 2009.25, 2014.5, 2009.0, 2010.75, 2011.5, 2012.25, 2013.75, 2014.25, 2015.0}), frozenset({2010.25, 2010.5, 2009.75, 2013.25, 2013.5, 2014.0, 2009.5, 2010.0, 2011.75, 2012.5, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (20, 43)
train = (0.67148532853073617, 0.68367475777916697)
scores = (0.39980836535170738, 0.26084944763012924)
score = 0.3303289064909183
holdout = (0.49750193657442493, 0.43146312640047074)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (17, 56)
train = (0.6888352714609246, 0.82819157860464399)
scores = (0.3931446589032459, 0.27893237341904048)
score = 0.3360385161611432
holdout = (0.49876564890291997, 0.49847575267799077)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (188, 290)
train = (0.88548397550931579, 0.8245669404971574)
scores = (0.40533372315734045, 0.26979695307502899)
score = 0.3375653381161847
holdout = (0.5856069345719511, 0.4757252257624226)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (188, 290)
train = (0.88548397550931579, 0.8245669404971574)
scores = (0.40533372315734045, 0.26979695307502899)
score = 0.3375653381161847
holdout = (0.5856069345719511, 0.4757252257624226)
>>> t = 5601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 46
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|aoo|doo|vp1dd)
            & index[1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp5dd)
            & [5:,10:,10:5,15:10,20:15] 
          }
      )
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.0, 2011.75, 2009.75, 2013.75, 2013.5, 2014.0, 2009.5, 2010.75, 2011.25, 2012.25, 2013.25, 2014.25}), frozenset({2010.5, 2015.0, 2012.5, 2012.75, 2009.25, 2014.5, 2009.0, 2010.0, 2011.5, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1252, 35)
train = (1.7177878963305167, 0.62440177964995636)
scores = (0.38134694987565715, 0.45457666101032063)
score = 0.4179618054429889
holdout = (0.7554949801771952, 0.4812797192265814)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (349, 60)
train = (1.5017874195193914, 0.69005336147795693)
scores = (0.35619202497598679, 0.45263592997612256)
score = 0.4044139774760547
holdout = (0.7068438389522779, 0.5041926958241187)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1028, 71)
train = (1.4332216706427718, 0.59521754262579174)
scores = (0.36903545204624194, 0.43707527496070059)
score = 0.40305536350347126
holdout = (0.6768255697575996, 0.4755506507182907)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (1252, 35)
train = (1.7177878963305167, 0.62440177964995636)
scores = (0.38134694987565715, 0.45457666101032063)
score = 0.4179618054429889
holdout = (0.7554949801771952, 0.4812797192265814)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (693, 25)
train = (1.7115565510060646, 0.65932317596025014)
scores = (0.37372010451625498, 0.45441024133134572)
score = 0.41406517292380035
holdout = (0.7512476020846796, 0.5003654724608151)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (541, 34)
train = (1.8736501471621989, 0.73680233597042433)
scores = (0.39178237472430633, 0.45115907776025338)
score = 0.4214707262422799
holdout = (0.7824528833769663, 0.5166948690573615)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1612, 9)
train = (1.7689156120371134, 0.45452653118967379)
scores = (0.40073126685407773, 0.43756811303024534)
score = 0.4191496899421615
holdout = (0.7648408754220072, 0.4071104170170747)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (541, 34)
train = (1.8736501471621989, 0.73680233597042433)
scores = (0.39178237472430633, 0.45115907776025338)
score = 0.4214707262422799
holdout = (0.7824528833769663, 0.5166948690573615)
>>> t = 5700 ===================================================================================================
(pair) len(F.columns) = 80
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 156
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo)
            & index[0,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd|Volatility)
            & [5:,10:5,15:10,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|aoo[10:])} 
            & (
                | Drawdown[1:,10:, 10:5] 
                | Drawup[10:,20:] 
                | Since{Min&index[10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| Volatility)
        & [5:,10:] 
      }
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo)
            & index[1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [5:,10:,15:,15:10,15:5] 
          }
        | ( 
            <>Return{(oo{.&[10:]})} 
            & (
                | Drawdown[1:, 5:] 
                | Since{Min&index[0,5,20]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | FracRec[62:] 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.25, 2015.0, 2009.25, 2009.5, 2013.0, 2009.0, 2009.75, 2010.0, 2011.5, 2012.75, 2013.5, 2014.25, 2015.25}), frozenset({2010.5, 2011.25, 2011.75, 2012.25, 2012.5, 2013.75, 2014.5, 2014.0, 2010.75, 2011.0, 2012.0, 2013.25, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (308, 5)
train = (1.0450123688427968, 0.75076970808435961)
scores = (0.42720422572723338, 0.38178353441453078)
score = 0.40449388007088205
holdout = (0.629319870192623, 0.5374927934859268)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (216, 201)
train = (1.0810156737207037, 1.4304433211222394)
scores = (0.4398759453600532, 0.41152304680645019)
score = 0.4256994960832517
holdout = (0.6341034743573934, 0.7622166550104251)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (201, 9)
train = (0.90709368625612774, 0.67320694190332686)
scores = (0.39969209938745864, 0.33649048049137981)
score = 0.3680912899394192
holdout = (0.5872226649795987, 0.49137043833631505)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (216, 201)
train = (1.0810156737207037, 1.4304433211222394)
scores = (0.4398759453600532, 0.41152304680645019)
score = 0.4256994960832517
holdout = (0.6341034743573934, 0.7622166550104251)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (142, 6)
train = (1.0161595355973017, 0.8549490159864731)
scores = (0.41834953557674559, 0.37188457550727916)
score = 0.3951170555420124
holdout = (0.6200964928382106, 0.5747971499396143)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (115, 15)
train = (1.1150993999620957, 0.9423624783273804)
scores = (0.42527015983677979, 0.37966188252667366)
score = 0.4024660211817267
holdout = (0.6428782485731378, 0.6111379115671793)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (197, 352)
train = (1.0002497897535043, 1.4579537563710305)
scores = (0.39766894882325904, 0.42527734722656779)
score = 0.4114731480249134
holdout = (0.6168432817526779, 0.7519424909369408)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (197, 352)
train = (1.0002497897535043, 1.4579537563710305)
scores = (0.39766894882325904, 0.42527734722656779)
score = 0.4114731480249134
holdout = (0.6168432817526779, 0.7519424909369408)
>>> t = 5701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 156
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo)
            & index[0,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd|Volatility)
            & [5:,10:5,15:10,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|oo{.&[10:]}|aoo[10:])} 
            & (
                | Drawdown[1:,10:, 10:5] 
                | Drawup[10:,20:] 
                | Since{Min&index[10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return| Volatility)
        & [5:,10:] 
      }
#<>#
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo)
            & index[1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|vp5dd|Volatility)
            & [5:,10:,15:,15:10,15:5] 
          }
        | ( 
            <>Return{(oo{.&[10:]})} 
            & (
                | Drawdown[1:, 5:] 
                | Since{Min&index[0,5,20]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | FracRec[62:] 
#<>#
    <>0
    | Corr & Corr{ 
        <>[21]
        & ay[10]
      }
len(samps) = 2
(frozenset({2010.75, 2010.0, 2012.75, 2009.25, 2013.25, 2013.5, 2009.0, 2010.25, 2011.0, 2009.75, 2013.0, 2014.5, 2015.25}), frozenset({2011.5, 2011.75, 2012.25, 2012.5, 2014.25, 2014.0, 2009.5, 2010.5, 2011.25, 2012.0, 2013.75, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (20, 14)
train = (0.65164111503681754, 0.75331425370570571)
scores = (0.334888362468167, 0.41268164424353693)
score = 0.37378500335585196
holdout = (0.48359468080388174, 0.5505981982468932)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (51, 13)
train = (0.81345741025105733, 0.73292044266041434)
scores = (0.33940612106607693, 0.44449797086320358)
score = 0.3919520459646403
holdout = (0.5429668715996716, 0.5622051262486812)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (21, 13)
train = (0.71251939170211953, 0.68474550320946881)
scores = (0.34654541773278108, 0.43347470204195848)
score = 0.3900100598873698
holdout = (0.5030947469506835, 0.5366758431798789)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (51, 13)
train = (0.81345741025105733, 0.73292044266041434)
scores = (0.33940612106607693, 0.44449797086320358)
score = 0.3919520459646403
holdout = (0.5429668715996716, 0.5622051262486812)
>>> t = 5800 ===================================================================================================
(pair) len(F.columns) = 33
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 47
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|doc|vp1dd)
            & index[0,2,1:2,0:2] 
          }
      )
    | Market{.& 
        <>(~Weight)
        & ( VP)
        & [60:] 
      }
#<>#
0
#<>#
    <>~Market & (
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Since{Max & index[0,10]} 
                | Drawup[1,20:] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return)
        & [10:,60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2011.75, 2011.25, 2009.0, 2013.0, 2014.75, 2014.25, 2014.0, 2009.5, 2010.75, 2011.0, 2009.75, 2013.5, 2014.5}), frozenset({2010.0, 2010.5, 2015.0, 2012.25, 2012.5, 2012.75, 2013.75, 2009.25, 2010.25, 2011.5, 2012.0, 2013.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (4, 30)
train = (0.42258175922195851, 0.97946995160571138)
scores = (0.11872013880952824, 0.14863511388477157)
score = 0.1336776263471499
holdout = (0.28122480719425513, 0.45298517978618646)
>>> t = 5801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 47
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|doc|vp1dd)
            & index[0,2,1:2,0:2] 
          }
      )
    | Market{.& 
        <>(~Weight)
        & ( VP)
        & [60:] 
      }
#<>#
0
#<>#
    <>~Market & (
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                | Since{Max & index[0,10]} 
                | Drawup[1,20:] 
                | Since{Min & index[20]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return)
        & [10:,60:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[1]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2011.5, 2012.25, 2009.75, 2009.5, 2014.75, 2014.25, 2009.25, 2010.25, 2011.0, 2012.5, 2013.25, 2014.5, 2015.0}), frozenset({2010.0, 2010.75, 2011.75, 2012.75, 2013.5, 2013.75, 2009.0, 2010.5, 2011.25, 2012.0, 2013.0, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (222, 47)
train = (1.1091782373528636, 0.84102077783662665)
scores = (0.23625448764800808, 0.19541902852249604)
score = 0.21583675808525205
holdout = (0.5678419469734324, 0.45955743642925334)
>>> t = 5900 ===================================================================================================
(pair) len(F.columns) = 95
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 150
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doc|vp1dd)
            & index[2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [3:,12:,15:,9:6,9:3,18:12,18:9,21:12,18:6] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                | Drawdown[20:, 10:5] 
                | Since{Max&index[10]} 
                | Drawup[20:10] 
                | Since{Min&index[5]} 
              )
            & Since[21:, 62:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                | Drawdown[20:10] 
                | Since{Max & index[5,20]} 
                | Drawup[20:10] 
                | Since{Min & index[0,20]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( VP| Volatility)
        & [5:,10:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|vp1dd)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo)
            & [10:,15:,10:5,15:10,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[1:,10:,20:] 
                | Since{Max&index[0]} 
                | Drawup[ 10:5] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max & index[0]} 
                | Drawup[20:10] 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | FracRec[250:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.25, 2010.75, 2009.5, 2013.25, 2013.75, 2014.25, 2009.75, 2015.25, 2011.75, 2009.25, 2013.5, 2014.0, 2015.0}), frozenset({2010.5, 2011.25, 2011.5, 2012.25, 2012.5, 2012.75, 2014.5, 2009.0, 2010.0, 2011.0, 2012.0, 2013.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (12, 652)
train = (0.74147791889103587, 1.4235865736531674)
scores = (0.31207046006546357, 0.41020089571089674)
score = 0.36113567788818013
holdout = (0.4828932956366829, 0.7031800065423282)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (13, 188)
train = (0.70218343488126844, 1.2109545409854103)
scores = (0.28003112067928232, 0.35101215324303459)
score = 0.3155216369611584
holdout = (0.4558160916231265, 0.6504426782956632)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (38, 24)
train = (0.81792718336184134, 0.75836930404653191)
scores = (0.31058638875729816, 0.38914611859669979)
score = 0.349866253676999
holdout = (0.5004599703528861, 0.5406785216552642)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (12, 652)
train = (0.74147791889103587, 1.4235865736531674)
scores = (0.31207046006546357, 0.41020089571089674)
score = 0.36113567788818013
holdout = (0.4828932956366829, 0.7031800065423282)
>>> t = 5901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 150
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doc|vp1dd)
            & index[2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [3:,12:,15:,9:6,9:3,18:12,18:9,21:12,18:6] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                | Drawdown[20:, 10:5] 
                | Since{Max&index[10]} 
                | Drawup[20:10] 
                | Since{Min&index[5]} 
              )
            & Since[21:, 62:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                | Drawdown[20:10] 
                | Since{Max & index[5,20]} 
                | Drawup[20:10] 
                | Since{Min & index[0,20]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( VP| Volatility)
        & [5:,10:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|vp1dd)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo)
            & [10:,15:,10:5,15:10,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[1:,10:,20:] 
                | Since{Max&index[0]} 
                | Drawup[ 10:5] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max & index[0]} 
                | Drawup[20:10] 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | FracRec[250:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.75, 2011.25, 2012.5, 2009.75, 2014.25, 2014.0, 2009.0, 2010.25, 2011.5, 2009.25, 2013.0, 2014.5, 2015.0}), frozenset({2010.5, 2011.75, 2012.25, 2012.75, 2013.5, 2013.75, 2009.5, 2010.0, 2011.0, 2012.0, 2013.25, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (473, 579)
train = (1.252501602405603, 1.5415482417885058)
scores = (0.56572254780307862, 0.49036841624176941)
score = 0.5280454820224241
holdout = (0.7081031382449838, 0.7872169731242973)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 168)
train = (0.48083518039015533, 1.2796406753025884)
scores = (0.44581649734111023, 0.47373058236626098)
score = 0.45977353985368563
holdout = (0.4392771265069055, 0.731781470729705)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 303)
train = (0.5461351726074829, 1.2952378444199002)
scores = (0.44180339609048552, 0.50469617822505675)
score = 0.4732497871577711
holdout = (0.47625795322165093, 0.7575281222014484)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (473, 579)
train = (1.252501602405603, 1.5415482417885058)
scores = (0.56572254780307862, 0.49036841624176941)
score = 0.5280454820224241
holdout = (0.7081031382449838, 0.7872169731242973)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 366)
train = (0.6633726399334281, 1.553573240120427)
scores = (0.44830617595714173, 0.47291304090102088)
score = 0.4606096084290813
holdout = (0.528509241934794, 0.7796875478371422)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (174, 196)
train = (1.2763955694756035, 1.5394995224544474)
scores = (0.53829945473132179, 0.46240167566338025)
score = 0.500350565197351
holdout = (0.6978697057854568, 0.7624056003812192)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 326)
train = (0.59639240755263179, 1.4107153755279236)
scores = (0.44921709564887385, 0.50077612573826558)
score = 0.4749966106935697
holdout = (0.4949273803525968, 0.7830791307019085)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (174, 196)
train = (1.2763955694756035, 1.5394995224544474)
scores = (0.53829945473132179, 0.46240167566338025)
score = 0.500350565197351
holdout = (0.6978697057854568, 0.7624056003812192)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 236)
train = (0.7645135614646511, 1.5392585458580461)
scores = (0.46399213763368113, 0.46616335778234225)
score = 0.4650777477080117
holdout = (0.5722385201241563, 0.778812645658733)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 158)
train = (0.74934585268933529, 1.6779594675633447)
scores = (0.47684816998332813, 0.47422750955730292)
score = 0.4755378397703155
holdout = (0.5433751153443522, 0.7860950993514082)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 268)
train = (0.59854727746599146, 1.4167780956553957)
scores = (0.44855865417655011, 0.49738252648678033)
score = 0.4729705903316652
holdout = (0.49518232206494944, 0.7783504707332032)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (1, 158)
train = (0.74934585268933529, 1.6779594675633447)
scores = (0.47684816998332813, 0.47422750955730292)
score = 0.4755378397703155
holdout = (0.5433751153443522, 0.7860950993514082)
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 200)
train = (0.79260165713571817, 1.560724165068645)
scores = (0.47010578070329606, 0.46043843790832012)
score = 0.4652721093058081
holdout = (0.5853099216361745, 0.7831711893460137)
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 209)
train = (0.92305811156325224, 1.9095573365738501)
scores = (0.50132742009224318, 0.48063170365899388)
score = 0.49097956187561853
holdout = (0.6034235071808141, 0.8018931679836335)
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (165, 366)
train = (1.2705598349446614, 1.5398983793853169)
scores = (0.54561224918265139, 0.50146006918088104)
score = 0.5235361591817662
holdout = (0.7352314331430889, 0.8020963512589849)
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (165, 366)
train = (1.2705598349446614, 1.5398983793853169)
scores = (0.54561224918265139, 0.50146006918088104)
score = 0.5235361591817662
holdout = (0.7352314331430889, 0.8020963512589849)
>>> t = 5902 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 150
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doc|vp1dd)
            & index[2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [3:,12:,15:,9:6,9:3,18:12,18:9,21:12,18:6] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                | Drawdown[20:, 10:5] 
                | Since{Max&index[10]} 
                | Drawup[20:10] 
                | Since{Min&index[5]} 
              )
            & Since[21:, 62:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                | Drawdown[20:10] 
                | Since{Max & index[5,20]} 
                | Drawup[20:10] 
                | Since{Min & index[0,20]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( VP| Volatility)
        & [5:,10:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|vp1dd)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo)
            & [10:,15:,10:5,15:10,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[1:,10:,20:] 
                | Since{Max&index[0]} 
                | Drawup[ 10:5] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max & index[0]} 
                | Drawup[20:10] 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | FracRec[250:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2015.25, 2011.25, 2009.5, 2009.75, 2013.5, 2013.75, 2013.25, 2009.25, 2010.5, 2011.75, 2012.75, 2013.0, 2015.0}), frozenset({2010.25, 2010.75, 2011.5, 2012.25, 2012.5, 2014.5, 2014.25, 2014.0, 2009.0, 2010.0, 2011.0, 2012.0, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (11, 225)
train = (0.67349736367290081, 1.1661860697962561)
scores = (0.36172699603252678, 0.40963732277823062)
score = 0.3856821594053787
holdout = (0.4816459833638635, 0.6665943315691836)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (10, 132)
train = (0.6149589241754827, 1.0083720950577817)
scores = (0.34874937022546121, 0.3840220592003219)
score = 0.36638571471289155
holdout = (0.45924155366832764, 0.6133798564132295)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (27, 260)
train = (0.77082987912092138, 1.1971842549611202)
scores = (0.39684471038899938, 0.40660828267982035)
score = 0.40172649653440984
holdout = (0.5290589536069829, 0.6713289384054308)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (27, 260)
train = (0.77082987912092138, 1.1971842549611202)
scores = (0.39684471038899938, 0.40660828267982035)
score = 0.40172649653440984
holdout = (0.5290589536069829, 0.6713289384054308)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (16, 184)
train = (0.86643454669042019, 1.2454561623714098)
scores = (0.36097200958198911, 0.39602164903694231)
score = 0.3784968293094657
holdout = (0.548381372969841, 0.682421937884252)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (10, 463)
train = (0.79700434975576395, 1.5836279770320654)
scores = (0.34192025345391863, 0.45714002249286462)
score = 0.39953013797339165
holdout = (0.5268545709348526, 0.728891457306287)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (6, 289)
train = (0.69832427471297032, 1.2960494249067804)
scores = (0.39751832271146986, 0.43049449780611765)
score = 0.41400641025879376
holdout = (0.502936540689318, 0.6982782691364826)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (6, 289)
train = (0.69832427471297032, 1.2960494249067804)
scores = (0.39751832271146986, 0.43049449780611765)
score = 0.41400641025879376
holdout = (0.502936540689318, 0.6982782691364826)
>>> t = 5903 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 150
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(cc|doc|vp1dd)
            & index[2, 0:1,1:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [3:,12:,15:,9:6,9:3,18:12,18:9,21:12,18:6] 
          }
        | ( 
            <>Return{(doo[10:])} 
            & (
                | Drawdown[20:, 10:5] 
                | Since{Max&index[10]} 
                | Drawup[20:10] 
                | Since{Min&index[5]} 
              )
            & Since[21:, 62:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[1:, 5:] 
            & (
                | Drawdown[20:10] 
                | Since{Max & index[5,20]} 
                | Drawup[20:10] 
                | Since{Min & index[0,20]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>(~Weight| Weight)
        & ( VP| Volatility)
        & [5:,10:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|dcc|vp1dd)
            & index[0,1, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo)
            & [10:,15:,10:5,15:10,20:10] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[1:,10:,20:] 
                | Since{Max&index[0]} 
                | Drawup[ 10:5] 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 5:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max & index[0]} 
                | Drawup[20:10] 
                | Since{Min & index[0,10,20]} 
              )
            & Since[ 125:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[10]} 
              )
            & Since[ 250:] 
          )
      )
    | 
        | FracRec[250:] 
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[250]
        & ay[10,20]
      }
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.75, 2010.5, 2012.75, 2012.25, 2009.0, 2014.25, 2009.5, 2010.25, 2011.25, 2012.0, 2013.25, 2014.5, 2015.0}), frozenset({2011.5, 2011.75, 2009.75, 2013.5, 2013.75, 2014.0, 2009.25, 2010.0, 2011.0, 2012.5, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (10, 135)
train = (0.69794490813596199, 1.1182746102011962)
scores = (0.41347300800752113, 0.31965012464135328)
score = 0.3665615663244372
holdout = (0.5193365973818606, 0.6269791400409639)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (14, 193)
train = (0.70583129953498158, 1.2829985816195393)
scores = (0.39665451567181415, 0.30496886565270659)
score = 0.35081169066226037
holdout = (0.5224916248358767, 0.6633554578090751)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (15, 119)
train = (0.69288450208188779, 1.0211716690302923)
scores = (0.41340053195201215, 0.34977557526922537)
score = 0.38158805361061876
holdout = (0.5218983097600653, 0.611403228347885)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (15, 119)
train = (0.69288450208188779, 1.0211716690302923)
scores = (0.41340053195201215, 0.34977557526922537)
score = 0.38158805361061876
holdout = (0.5218983097600653, 0.611403228347885)
>>> t = 6000 ===================================================================================================
(pair) len(F.columns) = 84
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 102
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [10:,15:,10:5,15:10,20:5] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc)
            & index[1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:] 
                | Since{Max&index[0]} 
                | Drawup[ 5:,20:10] 
                | Since{Min&index[20]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[1:, 5:] 
                | Since{Max & index[5,10]} 
                | Since{Min & index[5,10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.5, 2011.75, 2011.25, 2012.25, 2012.0, 2009.0, 2013.25, 2009.75, 2010.0, 2011.0, 2009.25, 2013.5, 2015.25}), frozenset({2010.75, 2012.75, 2013.75, 2014.5, 2014.25, 2014.0, 2009.5, 2010.25, 2011.5, 2012.5, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (24, 227)
train = (0.69064955409762507, 1.0823854131253732)
scores = (0.42481979823551269, 0.42502257814683325)
score = 0.42492118819117297
holdout = (0.5257159639170322, 0.6369968787483047)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (38, 96)
train = (0.65896439186269051, 1.0143989025621292)
scores = (0.37851863533849794, 0.43555275383991054)
score = 0.40703569458920424
holdout = (0.49241564585748043, 0.626464974835353)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (35, 324)
train = (0.68622332513767759, 1.0750015187950146)
scores = (0.4440447514122447, 0.42583673800129529)
score = 0.43494074470677
holdout = (0.5225782320671308, 0.635667706444655)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (35, 324)
train = (0.68622332513767759, 1.0750015187950146)
scores = (0.4440447514122447, 0.42583673800129529)
score = 0.43494074470677
holdout = (0.5225782320671308, 0.635667706444655)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 131)
train = (0.64334197566926221, 1.0910942079311274)
scores = (0.42816466840736661, 0.43002016688827616)
score = 0.42909241764782136
holdout = (0.49462027860506386, 0.6444619624886136)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (44, 93)
train = (0.79114885262126955, 1.2087889906419664)
scores = (0.36240112562470517, 0.44497600029741874)
score = 0.4036885629610619
holdout = (0.5356202205999943, 0.6927760115507231)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (35, 339)
train = (0.77241704137160627, 1.20168360055803)
scores = (0.44584174556127687, 0.44297697685472381)
score = 0.44440936120800034
holdout = (0.5584481138212282, 0.685380493569196)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (35, 339)
train = (0.77241704137160627, 1.20168360055803)
scores = (0.44584174556127687, 0.44297697685472381)
score = 0.44440936120800034
holdout = (0.5584481138212282, 0.685380493569196)
>>> t = 6001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 102
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|vp5dd)
            & [10:,15:,10:5,15:10,20:5] 
          }
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(acc)
            & index[1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|oo{.&[10:]}|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:,10:] 
                | Since{Max&index[0]} 
                | Drawup[ 5:,20:10] 
                | Since{Min&index[20]} 
              )
            & Since[21:, 250:] 
          )
        | ( 
            | Volatility[ 20:]
            & (
                <>Drawdown[1:, 5:] 
                | Since{Max & index[5,10]} 
                | Since{Min & index[5,10]} 
              )
            & Since[21:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.75, 2010.25, 2012.25, 2009.75, 2013.25, 2013.0, 2009.0, 2015.25, 2011.75, 2012.0, 2013.5, 2014.25, 2015.0}), frozenset({2010.5, 2011.25, 2011.5, 2012.75, 2009.25, 2014.5, 2014.0, 2009.5, 2010.0, 2011.0, 2012.5, 2013.75, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (43, 64)
train = (0.77003540671920734, 0.81169965096338093)
scores = (0.36905501564140092, 0.34254752256407073)
score = 0.3558012691027358
holdout = (0.5196703691234951, 0.5237329617595706)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (30, 55)
train = (0.71743374620653999, 0.81541495165449585)
scores = (0.34171023480293772, 0.32826397068074659)
score = 0.3349871027418422
holdout = (0.5032318054482877, 0.5319442392458731)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (21, 102)
train = (0.64987066054649001, 0.82989626275950601)
scores = (0.40616259880691513, 0.35952696362016023)
score = 0.3828447812135377
holdout = (0.4902257328536013, 0.5358344541970084)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (21, 102)
train = (0.64987066054649001, 0.82989626275950601)
scores = (0.40616259880691513, 0.35952696362016023)
score = 0.3828447812135377
holdout = (0.4902257328536013, 0.5358344541970084)
>>> t = 6100 ===================================================================================================
(pair) len(F.columns) = 25
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 33
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [3:,6:,9:,18:,15:12,12:6,18:12,15:6,21:12] 
          }
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[5]} 
                | Since{Min & index[10]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|vp1dd)
            & index[0,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd)
            & [3:,9:,15:,6:3,9:6,18:15,9:3,12:6,12:3,18:9,21:12,15:3,18:6,21:9] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[5]} 
                | Since{Min & index[5,20]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr{Uni} 
len(samps) = 2
(frozenset({2011.75, 2012.0, 2009.5, 2009.75, 2013.75, 2014.0, 2009.25, 2010.0, 2011.25, 2009.0, 2013.25, 2014.5, 2015.25}), frozenset({2010.5, 2010.75, 2011.5, 2012.5, 2012.75, 2013.5, 2014.25, 2010.25, 2011.0, 2012.25, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (46, 106)
train = (0.9330769120551976, 0.84458436711979434)
scores = (0.35467974725918461, 0.37588585761654114)
score = 0.3652828024378629
holdout = (0.5447252729549632, 0.5215791296927181)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (62, 81)
train = (0.95816041406382968, 0.93076695257964859)
scores = (0.34002153254664685, 0.36869849526646675)
score = 0.3543600139065568
holdout = (0.5713426020810128, 0.5575955871113749)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (54, 6)
train = (0.82036714563037072, 0.48593943976269749)
scores = (0.37026059339530354, 0.32296406015996632)
score = 0.3466123267776349
holdout = (0.5210065759051751, 0.36825603971441684)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (46, 106)
train = (0.9330769120551976, 0.84458436711979434)
scores = (0.35467974725918461, 0.37588585761654114)
score = 0.3652828024378629
holdout = (0.5447252729549632, 0.5215791296927181)
>>> t = 6101 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 33
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|Volatility)
            & [3:,6:,9:,18:,15:12,12:6,18:12,15:6,21:12] 
          }
        | ( 
            | Volatility[ 20:]
            & (
                | Since{Max & index[5]} 
                | Since{Min & index[10]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(doo|vp1dd)
            & index[0,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd)
            & [3:,9:,15:,6:3,9:6,18:15,9:3,12:6,12:3,18:9,21:12,15:3,18:6,21:9] 
          }
        | ( 
            <>Return{dd} & VP[ 5:, 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[5]} 
                | Since{Min & index[5,20]} 
              )
            & Since[ 62:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr{Uni} 
len(samps) = 2
(frozenset({2010.75, 2012.25, 2012.5, 2012.0, 2009.0, 2013.0, 2013.25, 2009.25, 2010.5, 2011.75, 2009.75, 2013.5, 2014.0}), frozenset({2010.25, 2015.0, 2011.25, 2011.5, 2014.5, 2014.25, 2009.5, 2010.0, 2011.0, 2012.75, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (24, 1)
train = (0.82088701586539492, 0.58423022283783999)
scores = (0.35806796073785035, 0.23475259881166663)
score = 0.2964102797747585
holdout = (0.4880395944895284, 0.38321732141467685)
>>> t = 6200 ===================================================================================================
(pair) len(F.columns) = 60
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 68
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [12:,15:,6:3,21:18,9:3,12:6,            15:9,18:12,12:3,21:12,15:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Drawup[1:, 5:] 
                | Since{Min&index[0,5,10]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max & index[10,20]} 
                | Drawup[1,10:] 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2011.75, 2009.75, 2013.25, 2013.0, 2014.25, 2009.5, 2010.25, 2011.5, 2012.5, 2013.5, 2014.0, 2015.0}), frozenset({2010.5, 2011.25, 2012.25, 2012.75, 2009.25, 2014.5, 2009.0, 2010.0, 2011.0, 2012.0, 2013.75, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 121)
train = (0.56821984714933016, 0.83167962258721573)
scores = (0.36338750235140982, 0.4682302654312665)
score = 0.4158088838913382
holdout = (0.4172986972098226, 0.574297467229061)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (130, 162)
train = (1.2554508193505671, 0.93398657136425667)
scores = (0.40888634752732184, 0.4546202628328318)
score = 0.4317533051800768
holdout = (0.6558819950089555, 0.5941249622371766)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (122, 82)
train = (0.81735994628581665, 0.7390865864485493)
scores = (0.3949667453644386, 0.46175687452143727)
score = 0.42836180994293793
holdout = (0.5154824970797126, 0.546077802868564)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (130, 162)
train = (1.2554508193505671, 0.93398657136425667)
scores = (0.40888634752732184, 0.4546202628328318)
score = 0.4317533051800768
holdout = (0.6558819950089555, 0.5941249622371766)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (226, 42)
train = (1.4132404803235508, 0.80378111008117537)
scores = (0.43358791155362381, 0.45549263424451603)
score = 0.44454027289906994
holdout = (0.6857998574160546, 0.5649266688369811)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (188, 178)
train = (1.8024076443137969, 1.104362207816457)
scores = (0.43127515599331984, 0.47004010425990622)
score = 0.45065763012661303
holdout = (0.7804384066514651, 0.6364410042242837)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (164, 78)
train = (1.0121157347732177, 0.81098147954655575)
scores = (0.40425300486096871, 0.47444225491645958)
score = 0.4393476298887141
holdout = (0.5716328436691038, 0.5777874592624898)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (188, 178)
train = (1.8024076443137969, 1.104362207816457)
scores = (0.43127515599331984, 0.47004010425990622)
score = 0.45065763012661303
holdout = (0.7804384066514651, 0.6364410042242837)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (254, 53)
train = (1.6546978959996745, 0.92764369188692308)
scores = (0.44402230537282483, 0.47526562128490379)
score = 0.4596439633288643
holdout = (0.7458331820433435, 0.6126488395937444)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (260, 1)
train = (2.1221931553724147, 0.78778460146723683)
scores = (0.4702405402956753, 0.44175076154625736)
score = 0.45599565092096633
holdout = (0.8302951366322874, 0.5494932450094782)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (115, 89)
train = (0.98080365537696057, 0.88011932369318124)
scores = (0.41012263697725765, 0.47990077598358843)
score = 0.44501170648042304
holdout = (0.56336598822022, 0.6002648917786748)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (254, 53)
train = (1.6546978959996745, 0.92764369188692308)
scores = (0.44402230537282483, 0.47526562128490379)
score = 0.4596439633288643
holdout = (0.7458331820433435, 0.6126488395937444)
>>> t = 6201 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 68
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [12:,15:,6:3,21:18,9:3,12:6,            15:9,18:12,12:3,21:12,15:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Drawup[1:, 5:] 
                | Since{Min&index[0,5,10]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max & index[10,20]} 
                | Drawup[1,10:] 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2011.25, 2012.5, 2009.0, 2009.75, 2014.75, 2014.5, 2009.25, 2015.0, 2011.0, 2012.0, 2014.0, 2015.25}), frozenset({2010.5, 2010.75, 2011.75, 2012.75, 2013.25, 2013.5, 2013.75, 2009.5, 2010.25, 2011.5, 2012.25, 2013.0, 2014.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (358, 95)
train = (1.0398297508643977, 0.94776531207588999)
scores = (0.41276721943218581, 0.41393228660202991)
score = 0.41334975301710786
holdout = (0.6253399250768759, 0.563008505531765)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (90, 50)
train = (0.87101730431063462, 0.98275217826983974)
scores = (0.39670735039706473, 0.38605462171012883)
score = 0.3913809860535968
holdout = (0.5696165447480692, 0.5636692962871928)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (181, 90)
train = (0.84625067848110402, 0.77766044425602021)
scores = (0.42146750388867565, 0.38825325115577131)
score = 0.4048603775222235
holdout = (0.5718323032559923, 0.5019379037665987)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (358, 95)
train = (1.0398297508643977, 0.94776531207588999)
scores = (0.41276721943218581, 0.41393228660202991)
score = 0.41334975301710786
holdout = (0.6253399250768759, 0.563008505531765)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (193, 93)
train = (1.0399171056248493, 1.1001855384039798)
scores = (0.41452629493996085, 0.41188793439230353)
score = 0.4132071146661322
holdout = (0.6274563480057708, 0.6050250439123709)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (263, 51)
train = (1.2213122737127675, 1.327790227299902)
scores = (0.43531707393020219, 0.39009294089808322)
score = 0.41270500741414273
holdout = (0.6554768396312957, 0.6632263499785328)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (195, 6)
train = (0.96250548722133411, 0.59480561542552324)
scores = (0.43057920456181464, 0.38145634640717674)
score = 0.4060177754844957
holdout = (0.6128846221846248, 0.44949420990095124)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (193, 93)
train = (1.0399171056248493, 1.1001855384039798)
scores = (0.41452629493996085, 0.41188793439230353)
score = 0.4132071146661322
holdout = (0.6274563480057708, 0.6050250439123709)
>>> t = 6202 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 68
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|vp5dd)
            & [12:,15:,6:3,21:18,9:3,12:6,            15:9,18:12,12:3,21:12,15:3] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:, 5:,10:,20:10] 
                | Since{Max&index[20]} 
                | Drawup[1:, 5:] 
                | Since{Min&index[0,5,10]} 
              )
            & Since[21:, 125:, 250:] 
          )
        | ( 
            <>Return{dd} & VP[1:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[1:] 
                | Since{Max & index[10,20]} 
                | Drawup[1,10:] 
                | Since{Min & index[0,5]} 
              )
            & Since[21:, 125:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.75, 2012.75, 2012.5, 2013.0, 2014.0, 2009.25, 2010.0, 2011.5, 2009.0, 2013.5, 2014.5, 2015.25}), frozenset({2011.25, 2011.75, 2012.25, 2009.75, 2013.75, 2014.25, 2009.5, 2010.5, 2011.0, 2012.0, 2013.25, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 58)
train = (0.55483897976348673, 0.88607400928776303)
scores = (0.30239351022060834, 0.44475955208457557)
score = 0.37357653115259193
holdout = (0.387059982365458, 0.5883209935963094)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 44)
train = (0.58644724635894696, 0.95763489077438479)
scores = (0.28780559598398398, 0.42445100253267071)
score = 0.35612829925832734
holdout = (0.40740008340839007, 0.609284676962157)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (93, 85)
train = (0.70399912489191507, 0.85710689026410658)
scores = (0.30244671170251042, 0.42057040974223431)
score = 0.36150856072237236
holdout = (0.4620269804789159, 0.5674718379809731)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (1, 58)
train = (0.55483897976348673, 0.88607400928776303)
scores = (0.30239351022060834, 0.44475955208457557)
score = 0.37357653115259193
holdout = (0.387059982365458, 0.5883209935963094)
>>> t = 6300 ===================================================================================================
(pair) len(F.columns) = 44
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 75
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[ 5:,20:] 
                | Drawup[ 10:5] 
                | Since{Min&index[0]} 
              )
            & Since[ 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[20]} 
                | Drawup[10:] 
                | Since{Min & index[0]} 
              )
            & Since[ 62:] 
          )
      )
    | 
        | FracRec[62:] 
    | 
        <>AssetEnc{InUni} 
    | 
        | Return{mix[1,3,5,7,8,14,18,19]}
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo)
            & [10:,10:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:, 10:5] 
                | Since{Max&index[5,20]} 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [10:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.5, 2010.75, 2011.0, 2011.5, 2012.5, 2013.75, 2014.0, 2009.75, 2010.25, 2011.75, 2012.75, 2013.0, 2014.75}), frozenset({2015.0, 2012.25, 2009.0, 2009.25, 2013.5, 2014.25, 2009.5, 2010.0, 2011.25, 2012.0, 2013.25, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (356, 13)
train = (1.4232489200590979, 0.63680030368731955)
scores = (0.39244919873149009, 0.46631217833001937)
score = 0.42938068853075473
holdout = (0.7017171059688113, 0.49547126888565257)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (320, 11)
train = (1.4271878473309649, 0.51249605893458905)
scores = (0.43365288261067764, 0.4560987324530551)
score = 0.4448758075318664
holdout = (0.7115995103277295, 0.42252640192330054)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (292, 108)
train = (1.2636167385019594, 0.92283713905053)
scores = (0.34960554260918181, 0.47461318877907471)
score = 0.41210936569412826
holdout = (0.6500361586422314, 0.6180203852892867)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (320, 11)
train = (1.4271878473309649, 0.51249605893458905)
scores = (0.43365288261067764, 0.4560987324530551)
score = 0.4448758075318664
holdout = (0.7115995103277295, 0.42252640192330054)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (237, 13)
train = (1.5019385222799231, 0.81206967113540052)
scores = (0.41540827138177461, 0.45598563539581088)
score = 0.4356969533887928
holdout = (0.7332464459935178, 0.5620355002043569)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (193, 16)
train = (1.601198744875256, 0.68841624230399945)
scores = (0.44830253930468311, 0.4625564322357264)
score = 0.45542948577020476
holdout = (0.7451234190604861, 0.4971619967392275)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (282, 40)
train = (1.4088329956694565, 0.90200161531559753)
scores = (0.35974240132586172, 0.46571249036439599)
score = 0.4127274458451289
holdout = (0.685461192845862, 0.5970802575568425)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (193, 16)
train = (1.601198744875256, 0.68841624230399945)
scores = (0.44830253930468311, 0.4625564322357264)
score = 0.45542948577020476
holdout = (0.7451234190604861, 0.4971619967392275)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (160, 15)
train = (1.5361764268050484, 0.91221996335959032)
scores = (0.40161813943438013, 0.4395671388671466)
score = 0.4205926391507634
holdout = (0.7379336091918476, 0.5956532126624855)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (198, 12)
train = (1.9221714806001144, 0.84753973910316072)
scores = (0.44169317345349757, 0.47824380282788181)
score = 0.4599684881406897
holdout = (0.7852823374306959, 0.5584476474551666)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (352, 42)
train = (1.5920727618490904, 0.97415437618793232)
scores = (0.39258795024071169, 0.47410472037918439)
score = 0.43334633530994804
holdout = (0.7317272110220263, 0.6258722652819828)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (198, 12)
train = (1.9221714806001144, 0.84753973910316072)
scores = (0.44169317345349757, 0.47824380282788181)
score = 0.4599684881406897
holdout = (0.7852823374306959, 0.5584476474551666)
>>> t = 6301 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 75
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[ 5:,20:] 
                | Drawup[ 10:5] 
                | Since{Min&index[0]} 
              )
            & Since[ 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[20]} 
                | Drawup[10:] 
                | Since{Min & index[0]} 
              )
            & Since[ 62:] 
          )
      )
    | 
        | FracRec[62:] 
    | 
        <>AssetEnc{InUni} 
    | 
        | Return{mix[1,3,5,7,8,14,18,19]}
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo)
            & [10:,10:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:, 10:5] 
                | Since{Max&index[5,20]} 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [10:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.75, 2011.5, 2011.25, 2009.75, 2013.75, 2014.0, 2009.0, 2010.0, 2011.0, 2012.75, 2013.5, 2014.5, 2015.25}), frozenset({2010.5, 2012.25, 2012.5, 2009.25, 2013.25, 2014.25, 2009.5, 2010.25, 2011.75, 2012.0, 2013.0, 2014.75, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (358, 16)
train = (1.3372671867954014, 0.6424426842449622)
scores = (0.38117286880366719, 0.41965915753039035)
score = 0.4004160131670288
holdout = (0.716341619841705, 0.4711492107167029)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (299, 9)
train = (1.2248743182288915, 0.52773497554768833)
scores = (0.37948079502351101, 0.34454270271835907)
score = 0.362011748870935
holdout = (0.6885470062041477, 0.39147458858694856)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (374, 24)
train = (1.4014943287212038, 0.70827584020991508)
scores = (0.36550772065751247, 0.4859840873387396)
score = 0.42574590399812606
holdout = (0.7175086212327443, 0.5144087656556822)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (374, 24)
train = (1.4014943287212038, 0.70827584020991508)
scores = (0.36550772065751247, 0.4859840873387396)
score = 0.42574590399812606
holdout = (0.7175086212327443, 0.5144087656556822)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (388, 26)
train = (1.4479873039373887, 0.83831957366584597)
scores = (0.38781367740392358, 0.42387674750244192)
score = 0.4058452124531827
holdout = (0.7386236887456313, 0.5570719018539656)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (219, 10)
train = (1.3049838991104312, 0.64672699133407252)
scores = (0.37611738797881072, 0.34442938537741846)
score = 0.3602733866781146
holdout = (0.6975521404209437, 0.4464145145038376)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (570, 43)
train = (1.5479153916054935, 0.82773982161504767)
scores = (0.37906535599822905, 0.50395331047836778)
score = 0.44150933323829844
holdout = (0.7582104351291437, 0.5806128911844487)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (570, 43)
train = (1.5479153916054935, 0.82773982161504767)
scores = (0.37906535599822905, 0.50395331047836778)
score = 0.44150933323829844
holdout = (0.7582104351291437, 0.5806128911844487)
>>> t = 6302 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 75
    <>~Market & (
        | ( 
            <>Return{(oo{.&[1:]}|doo[10:])} 
            & (
                | Drawdown[ 5:,20:] 
                | Drawup[ 10:5] 
                | Since{Min&index[0]} 
              )
            & Since[ 62:] 
          )
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                | Since{Max & index[20]} 
                | Drawup[10:] 
                | Since{Min & index[0]} 
              )
            & Since[ 62:] 
          )
      )
    | 
        | FracRec[62:] 
    | 
        <>AssetEnc{InUni} 
    | 
        | Return{mix[1,3,5,7,8,14,18,19]}
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo)
            & [10:,10:5,20:10] 
          }
        | ( 
            <>Return{(doo[1:]|doo[10:])} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[ 5:,10:,20:, 10:5] 
                | Since{Max&index[5,20]} 
                | Since{Min&index[0,10]} 
              )
            & Since[ 62:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [10:] 
      }
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.0, 2015.25, 2012.25, 2012.5, 2009.75, 2013.25, 2014.25, 2009.0, 2010.5, 2012.75, 2013.0, 2014.75, 2015.0}), frozenset({2010.75, 2011.25, 2011.5, 2011.75, 2009.25, 2013.75, 2014.0, 2009.5, 2010.25, 2011.0, 2012.0, 2013.5, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (157, 204)
train = (0.96717816907951548, 1.1880366314209589)
scores = (0.48627334855555454, 0.35548933626510193)
score = 0.42088134241032826
holdout = (0.6166165752246704, 0.6636560102155324)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (102, 81)
train = (0.87005729680695232, 1.0501005088832833)
scores = (0.4240806543065806, 0.30394311464737361)
score = 0.3640118844769771
holdout = (0.5572664912549945, 0.6043800910921521)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (260, 209)
train = (1.0767849850935416, 1.2038502107113984)
scores = (0.49221415945291103, 0.3709719587304825)
score = 0.43159305909169676
holdout = (0.6499348446184315, 0.6500204958922665)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (260, 209)
train = (1.0767849850935416, 1.2038502107113984)
scores = (0.49221415945291103, 0.3709719587304825)
score = 0.43159305909169676
holdout = (0.6499348446184315, 0.6500204958922665)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (246, 194)
train = (1.1864333411798964, 1.3285201564146787)
scores = (0.47945215651366246, 0.35443519883969571)
score = 0.41694367767667906
holdout = (0.6718694243856556, 0.7017613065215371)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (214, 217)
train = (1.2624549614637579, 1.481317002282051)
scores = (0.46249933972099638, 0.33030575556377556)
score = 0.39640254764238597
holdout = (0.6681562359072397, 0.7202506139338013)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (99, 201)
train = (0.98667118959253364, 1.3230191023887514)
scores = (0.46499297609592877, 0.38520505113036135)
score = 0.42509901361314506
holdout = (0.6148269998781539, 0.6894802330635627)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (99, 201)
train = (0.98667118959253364, 1.3230191023887514)
scores = (0.46499297609592877, 0.38520505113036135)
score = 0.42509901361314506
holdout = (0.6148269998781539, 0.6894802330635627)
>>> t = 6400 ===================================================================================================
(pair) len(F.columns) = 43
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 89
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [5:,10:,15:5,20:10] 
          }
        | ( 
            <>Return{(aoo[1:]|oo{.&[10:]}|aoo[10:])} 
            & (
                | Drawdown[1:, 5:] 
                | Since{Max&index[0]} 
                | Since{Min&index[0,5]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[0,10,20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [20:] 
      }
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd|Volatility)
            & [10:,15:,10:5,20:15,15:5,20:10] 
          }
      )
    | Market{.& 
        <>(~Weight)
        & (Return)
        & [20:] 
      }
    | 
        | Return{ it} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.75, 2010.25, 2012.5, 2009.25, 2009.75, 2013.75, 2014.5, 2009.5, 2010.0, 2011.75, 2012.75, 2013.5, 2014.25}), frozenset({2015.0, 2011.25, 2011.5, 2012.25, 2013.25, 2014.0, 2009.0, 2010.5, 2011.0, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (5, 2)
train = (0.70400552094503366, 0.61076240779556157)
scores = (0.36082076074129227, 0.45055807178492369)
score = 0.40568941626310795
holdout = (0.5192481455323634, 0.4675096730700243)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (110, 2)
train = (1.0909900986652044, 0.61107910249177599)
scores = (0.36319386925407116, 0.37747369263170194)
score = 0.37033378094288655
holdout = (0.6558488366533691, 0.4417810309571105)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (146, 41)
train = (0.96077496683556551, 0.80238170493574257)
scores = (0.38689320787288051, 0.44383090425768107)
score = 0.41536205606528076
holdout = (0.6163995929235191, 0.5798589123253616)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (146, 41)
train = (0.96077496683556551, 0.80238170493574257)
scores = (0.38689320787288051, 0.44383090425768107)
score = 0.41536205606528076
holdout = (0.6163995929235191, 0.5798589123253616)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (144, 32)
train = (1.2134998886920918, 0.8532675822803939)
scores = (0.37747837006252688, 0.4304250717973418)
score = 0.40395172092993437
holdout = (0.6965385261490422, 0.5812006358857829)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (194, 2)
train = (1.5488011001226891, 0.69289107762694813)
scores = (0.36805417923522049, 0.39127442320386852)
score = 0.37966430121954453
holdout = (0.7669369169783521, 0.4730988739344293)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (169, 26)
train = (1.1241950074078835, 0.77924914769489095)
scores = (0.38441454781157086, 0.42904581292290805)
score = 0.40673018036723946
holdout = (0.6659679135694725, 0.5582228422038489)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (169, 26)
train = (1.1241950074078835, 0.77924914769489095)
scores = (0.38441454781157086, 0.42904581292290805)
score = 0.40673018036723946
holdout = (0.6659679135694725, 0.5582228422038489)
>>> t = 6401 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 89
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [5:,10:,15:5,20:10] 
          }
        | ( 
            <>Return{(aoo[1:]|oo{.&[10:]}|aoo[10:])} 
            & (
                | Drawdown[1:, 5:] 
                | Since{Max&index[0]} 
                | Since{Min&index[0,5]} 
              )
            & Since[ 250:] 
          )
        | ( 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[0,10,20]} 
                | Since{Min & index[20]} 
              )
            & Since[ 250:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return| VP| Volatility)
        & [20:] 
      }
#<>#
0
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd|Volatility)
            & [10:,15:,10:5,20:15,15:5,20:10] 
          }
      )
    | Market{.& 
        <>(~Weight)
        & (Return)
        & [20:] 
      }
    | 
        | Return{ it} 
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10,20]
      }
len(samps) = 2
(frozenset({2010.0, 2012.75, 2012.0, 2009.5, 2013.75, 2014.0, 2014.75, 2009.25, 2010.5, 2012.25, 2013.0, 2014.25, 2015.0}), frozenset({2010.25, 2011.25, 2011.5, 2011.75, 2009.75, 2013.5, 2009.0, 2010.75, 2011.0, 2012.5, 2013.25, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (8, 169)
train = (0.65632766409131504, 1.0841212529022584)
scores = (0.36526590110837776, 0.30695274259519489)
score = 0.3361093218517863
holdout = (0.49141707625824854, 0.6084829504855038)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (6, 1)
train = (0.58044449141974619, 0.63664018504626707)
scores = (0.32074006111794168, 0.29608101126510566)
score = 0.3084105361915237
holdout = (0.4338614313799502, 0.4453385462673666)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (4, 1)
train = (0.69770587685622065, 0.6900945826825261)
scores = (0.3901258693265876, 0.31339479336182802)
score = 0.3517603313442078
holdout = (0.5011714388493823, 0.4697416749919564)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (4, 1)
train = (0.69770587685622065, 0.6900945826825261)
scores = (0.3901258693265876, 0.31339479336182802)
score = 0.3517603313442078
holdout = (0.5011714388493823, 0.4697416749919564)
>>> t = 6500 ===================================================================================================
(pair) len(F.columns) = 12
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 20
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo|daoc|vp1dd)
            & index[2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(doo|Volatility)
            & [5:,10:,10:5,15:5,20:5] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2011.5, 2012.5, 2012.25, 2012.75, 2014.0, 2014.5, 2009.0, 2010.75, 2011.75, 2009.75, 2013.75, 2014.25}), frozenset({2010.5, 2015.0, 2011.25, 2009.25, 2013.25, 2013.5, 2009.5, 2010.0, 2011.0, 2012.0, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (5, 55)
train = (0.44906547863811319, 0.56039473824945318)
scores = (0.15362393384626452, 0.21094576196575171)
score = 0.18228484790600813
holdout = (0.25250507501925906, 0.29120972328555234)
>>> t = 6501 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 20
0
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(aoo|daoc|vp1dd)
            & index[2, 0:1,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(doo|Volatility)
            & [5:,10:,10:5,15:5,20:5] 
          }
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62,250]
        & ay[1,10,20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.75, 2012.5, 2012.75, 2013.75, 2014.0, 2014.5, 2009.75, 2010.5, 2011.25, 2012.25, 2013.0, 2014.75}), frozenset({2015.0, 2011.5, 2011.75, 2009.0, 2009.25, 2013.5, 2009.5, 2010.0, 2011.0, 2012.0, 2013.25, 2014.25, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 1)
train = (0.25825904617101253, 0.33633245401416823)
scores = (-0.045484035843989537, 0.010975419968329509)
score = -0.017254307937830015
holdout = (0.10306825696510506, 0.12905477693709036)
>>> t = 6600 ===================================================================================================
(pair) len(F.columns) = 40
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 82
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|doc)
            & index[ 0:1,1:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|oo{.&[10:]}|aoo[10:]|doo[10:])} 
            & (
                | Drawdown[10:,20:] 
                | Drawup[20:10] 
                | Since{Min&index[0]} 
              )
            & Since[21:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:]
            & (
              )
            & Since[21:] 
          )
      )
    | 
        | Return{mix[1,4,5,8,11,12,14,15,16,18,19]}
        | Return{rr} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2012.75, 2009.25, 2013.0, 2013.75, 2014.5, 2014.25, 2014.0, 2009.5, 2011.25, 2012.5, 2013.5, 2014.75, 2015.25}), frozenset({2010.0, 2010.75, 2010.5, 2011.5, 2011.75, 2012.25, 2009.75, 2009.0, 2010.25, 2011.0, 2012.0, 2013.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (340, 110)
train = (1.0964557759806752, 0.84355916614798332)
scores = (0.34403864245164772, 0.32618517581948553)
score = 0.33511190913556665
holdout = (0.6226665024847494, 0.5386465910520408)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (294, 95)
train = (1.1285654514776833, 0.80788747972719022)
scores = (0.36812509230546314, 0.31639718737199624)
score = 0.3422611398387297
holdout = (0.63922858441357, 0.5210959621164414)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (909, 155)
train = (1.2963609103872744, 0.84036156690099484)
scores = (0.36460605033266202, 0.32939057611066858)
score = 0.3469983132216653
holdout = (0.6879961011530837, 0.539601519352571)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (909, 155)
train = (1.2963609103872744, 0.84036156690099484)
scores = (0.36460605033266202, 0.32939057611066858)
score = 0.3469983132216653
holdout = (0.6879961011530837, 0.539601519352571)
>>> t = 6601 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 82
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|acc|doo|doc)
            & index[ 0:1,1:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]}|aoo[1:]|oo{.&[10:]}|aoo[10:]|doo[10:])} 
            & (
                | Drawdown[10:,20:] 
                | Drawup[20:10] 
                | Since{Min&index[0]} 
              )
            & Since[21:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:]
            & (
              )
            & Since[21:] 
          )
      )
    | 
        | Return{mix[1,4,5,8,11,12,14,15,16,18,19]}
        | Return{rr} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[10]
      }
len(samps) = 2
(frozenset({2015.25, 2012.75, 2012.5, 2012.25, 2012.0, 2013.75, 2009.0, 2010.75, 2011.5, 2009.25, 2013.0, 2014.75, 2015.0}), frozenset({2010.25, 2010.5, 2011.25, 2011.75, 2013.5, 2014.25, 2014.0, 2009.5, 2010.0, 2011.0, 2009.75, 2013.25, 2014.5}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (70, 1)
train = (0.67679791618832053, 0.65038899221672553)
scores = (0.41039908382367152, 0.23413125193682943)
score = 0.3222651678802505
holdout = (0.47539148643475404, 0.38079514677563503)
>>> t = 6700 ===================================================================================================
(pair) len(F.columns) = 29
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 42
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [5:,10:,15:,15:10,20:10,20:5] 
          }
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return)
        & [10:] 
      }
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo|doc)
            & index[0,2, 0:1,1:2,0:2] 
          }
      )
#<>#
0
#<>#
    <>0
len(samps) = 2
(frozenset({2010.5, 2009.0, 2013.0, 2013.75, 2014.0, 2014.75, 2014.25, 2009.5, 2010.25, 2011.25, 2012.5, 2013.25, 2014.5}), frozenset({2010.0, 2015.0, 2011.5, 2011.75, 2012.25, 2012.75, 2009.75, 2009.25, 2010.75, 2011.0, 2012.0, 2013.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (496, 148)
train = (0.89878831572833617, 0.86000765844603322)
scores = (0.40163303468807515, 0.43783753169254647)
score = 0.41973528319031084
holdout = (0.5874832706236611, 0.5774454784662227)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (358, 3)
train = (0.8457105833223556, 0.65659135324329765)
scores = (0.38539137013024483, 0.40936516708001969)
score = 0.39737826860513226
holdout = (0.5589928158018159, 0.47708626183639036)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (592, 247)
train = (0.8787317821161772, 0.87508514719872288)
scores = (0.39054121607595349, 0.46070974984034735)
score = 0.4256254829581504
holdout = (0.5759029508931396, 0.5848865156056061)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (592, 247)
train = (0.8787317821161772, 0.87508514719872288)
scores = (0.39054121607595349, 0.46070974984034735)
score = 0.4256254829581504
holdout = (0.5759029508931396, 0.5848865156056061)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (407, 17)
train = (0.96471872565234573, 0.72573505284172057)
scores = (0.39924937476214556, 0.44250812473351386)
score = 0.4208787497478297
holdout = (0.6108337320026964, 0.5265636459593073)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (220, 4)
train = (0.92818300964910072, 0.7433088685403938)
scores = (0.38535809173437763, 0.42818077509131569)
score = 0.40676943341284666
holdout = (0.5894163742339171, 0.5328137096135037)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (726, 252)
train = (0.98092132457980719, 0.98035559915821668)
scores = (0.39917506777639578, 0.47725021448373695)
score = 0.43821264113006636
holdout = (0.613741474412073, 0.6312354677808385)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (726, 252)
train = (0.98092132457980719, 0.98035559915821668)
scores = (0.39917506777639578, 0.47725021448373695)
score = 0.43821264113006636
holdout = (0.613741474412073, 0.6312354677808385)
>>> t = 6701 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 42
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|doo|vp5dd)
            & [5:,10:,15:,15:10,20:10,20:5] 
          }
      )
    | Market{.& 
        <>(~Weight| Weight)
        & (Return)
        & [10:] 
      }
#<>#
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|doo|doc)
            & index[0,2, 0:1,1:2,0:2] 
          }
      )
#<>#
0
#<>#
    <>0
len(samps) = 2
(frozenset({2010.75, 2011.25, 2012.25, 2009.75, 2013.75, 2013.25, 2009.25, 2010.5, 2011.5, 2012.0, 2013.0, 2014.5, 2015.0}), frozenset({2010.25, 2011.75, 2012.75, 2009.0, 2014.25, 2014.0, 2009.5, 2010.0, 2011.0, 2012.5, 2013.5, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (25, 946)
train = (0.68080378957150767, 0.99498457579178756)
scores = (0.45808868229135957, 0.31709760689583744)
score = 0.3875931445935985
holdout = (0.5187819577102474, 0.5876588186162356)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (25, 347)
train = (0.73201202522767861, 0.84198524937657415)
scores = (0.40792955385295604, 0.30510992355701905)
score = 0.35651973870498754
holdout = (0.5235647168347926, 0.5378450376167386)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (46, 453)
train = (0.67958500141593414, 0.82552602979653467)
scores = (0.465776060772079, 0.2799959811977234)
score = 0.3728860209849012
holdout = (0.5283704125519633, 0.5072737443288552)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (25, 946)
train = (0.68080378957150767, 0.99498457579178756)
scores = (0.45808868229135957, 0.31709760689583744)
score = 0.3875931445935985
holdout = (0.5187819577102474, 0.5876588186162356)
>>> t = 6800 ===================================================================================================
(pair) len(F.columns) = 38
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 78
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|daoc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|Volatility)
            & [3:,6:,9:,12:,15:,6:3,9:6,21:18,18:12,21:15,18:3,21:6] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:, 10:5] 
                | Since{Max&index[0,5]} 
                | Since{Min&index[0]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[5,10]} 
                | Since{Min & index[0,5]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2010.25, 2011.75, 2011.25, 2012.25, 2013.75, 2014.0, 2009.25, 2010.75, 2011.5, 2012.0, 2013.25, 2014.75, 2015.25}), frozenset({2010.5, 2012.75, 2009.0, 2009.75, 2013.5, 2014.25, 2009.5, 2010.0, 2011.0, 2012.5, 2013.0, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (142, 85)
train = (1.0974428281844861, 0.8076466648205709)
scores = (0.31521573241964124, 0.36228398635329573)
score = 0.3387498593864685
holdout = (0.6334360676044962, 0.5248014916993222)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (12, 81)
train = (0.73049279334432693, 0.82676199672786643)
scores = (0.19312410295700683, 0.37362988657139629)
score = 0.28337699476420153
holdout = (0.4499836671321286, 0.5400774615548182)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (14, 19)
train = (0.73529134928976281, 0.66164152155421863)
scores = (0.38645269695087203, 0.36036997229891093)
score = 0.3734113346248915
holdout = (0.5267647459097348, 0.458678541848488)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (14, 19)
train = (0.73529134928976281, 0.66164152155421863)
scores = (0.38645269695087203, 0.36036997229891093)
score = 0.3734113346248915
holdout = (0.5267647459097348, 0.458678541848488)
>>> t = 6801 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 78
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|cc|daoc)
            & index[0,1,2, 0:1,1:2,0:2] 
          }
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(aoo|doo|Volatility)
            & [3:,6:,9:,12:,15:,6:3,9:6,21:18,18:12,21:15,18:3,21:6] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:, 10:5] 
                | Since{Max&index[0,5]} 
                | Since{Min&index[0]} 
              )
            & Since[ 250:] 
          )
        | ( 
            <> Volatility[ 60:] 
            | Volatility[10:, 20:]
            & (
                | Since{Max & index[5,10]} 
                | Since{Min & index[0,5]} 
              )
            & Since[ 250:] 
          )
      )
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[21,62]
        & ay[1,10]
      }
len(samps) = 2
(frozenset({2015.0, 2011.0, 2012.0, 2009.5, 2009.75, 2013.0, 2009.25, 2010.25, 2011.75, 2012.25, 2013.5, 2014.25, 2015.25}), frozenset({2010.0, 2010.75, 2011.5, 2012.75, 2013.75, 2014.5, 2014.0, 2009.0, 2010.5, 2011.25, 2012.5, 2013.25, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (218, 148)
train = (1.1645512195202687, 1.013408078959033)
scores = (0.26154501662658075, 0.30332613824271476)
score = 0.28243557743464776
holdout = (0.6164132603555816, 0.5900631176724362)
>>> t = 6900 ===================================================================================================
(pair) len(F.columns) = 58
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 88
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|doo|daoc|vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:,20:10] 
                | Drawup[10:] 
                | Since{Min&index[0]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [10:,20:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|Volatility)
            & [5:,10:,15:,10:5,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.5, 2011.0, 2011.25, 2012.0, 2009.0, 2009.5, 2014.5, 2009.75, 2010.0, 2011.75, 2012.5, 2014.75, 2015.25}), frozenset({2010.25, 2012.75, 2013.25, 2013.5, 2013.75, 2014.0, 2009.25, 2010.75, 2011.5, 2012.25, 2013.0, 2014.25, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (106, 142)
train = (0.87463560406081864, 1.0440131246933555)
scores = (0.3981236423231318, 0.49637398524444948)
score = 0.44724881378379067
holdout = (0.5956344572507883, 0.6791981524757388)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (269, 81)
train = (1.0440224680511334, 0.90058448077884568)
scores = (0.41835849571885392, 0.46664207539697056)
score = 0.4425002855579122
holdout = (0.6597494048742805, 0.6275928322642746)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (388, 393)
train = (1.0146408396469886, 1.2938062781682305)
scores = (0.42687014408378487, 0.58842917004688744)
score = 0.5076496570653362
holdout = (0.6585157339428412, 0.7945320722531503)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (388, 393)
train = (1.0146408396469886, 1.2938062781682305)
scores = (0.42687014408378487, 0.58842917004688744)
score = 0.5076496570653362
holdout = (0.6585157339428412, 0.7945320722531503)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (266, 184)
train = (1.1215914989337334, 1.3088798971280762)
scores = (0.42962731148571726, 0.5212739314841901)
score = 0.47545062148495365
holdout = (0.6840472923857726, 0.7616526214225161)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 128)
train = (0.82035932334254402, 1.3279264657950889)
scores = (0.3197687590227028, 0.4836187009621456)
score = 0.4016937299924242
holdout = (0.4911087589673454, 0.7413319485699733)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (470, 285)
train = (1.1143205336577235, 1.3674114816279954)
scores = (0.43894905443892845, 0.58067774193322175)
score = 0.5098133981860751
holdout = (0.6916291789841861, 0.8109191004651422)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (470, 285)
train = (1.1143205336577235, 1.3674114816279954)
scores = (0.43894905443892845, 0.58067774193322175)
score = 0.5098133981860751
holdout = (0.6916291789841861, 0.8109191004651422)
>>>  k = 8 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (345, 271)
train = (1.2377371935278414, 1.6205077648282569)
scores = (0.43306667300638635, 0.53135929626648726)
score = 0.4822129846364368
holdout = (0.7117584617547549, 0.823748319030042)
>>>  k = 9 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 92)
train = (0.98404988873243326, 1.4541238720987588)
scores = (0.31423066325912291, 0.4915244612084842)
score = 0.40287756223380355
holdout = (0.5609238265710451, 0.7675637058628483)
>>>  k = 10 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (412, 468)
train = (1.138114192396555, 1.6016175419578282)
scores = (0.44226912216297304, 0.59722452116252256)
score = 0.5197468216627478
holdout = (0.6981462200095828, 0.865673249645019)
>>>  k = 11 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 10, 'num_leaves': 1024}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (412, 468)
train = (1.138114192396555, 1.6016175419578282)
scores = (0.44226912216297304, 0.59722452116252256)
score = 0.5197468216627478
holdout = (0.6981462200095828, 0.865673249645019)
>>>  k = 12 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (360, 182)
train = (1.2871952774606865, 1.607241441819915)
scores = (0.43873120120937109, 0.53230302010906183)
score = 0.48551711065921643
holdout = (0.7235987620984632, 0.828492315233469)
>>>  k = 13 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (1, 117)
train = (1.0955731389045593, 1.7487482571558577)
scores = (0.34018536043030589, 0.50293501035248078)
score = 0.42156018539139334
holdout = (0.6017488341430554, 0.8067773842670931)
>>>  k = 14 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (382, 396)
train = (1.1749114725615437, 1.6337458443165365)
scores = (0.43988270248582179, 0.60442122348645366)
score = 0.5221519629861378
holdout = (0.706485785680753, 0.8712630682032363)
>>>  k = 15 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 12, 'num_leaves': 4096}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (382, 396)
train = (1.1749114725615437, 1.6337458443165365)
scores = (0.43988270248582179, 0.60442122348645366)
score = 0.5221519629861378
holdout = (0.706485785680753, 0.8712630682032363)
>>> t = 6901 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 88
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|doo|daoc|vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:,20:10] 
                | Drawup[10:] 
                | Since{Min&index[0]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [10:,20:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|Volatility)
            & [5:,10:,15:,10:5,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.5, 2010.0, 2012.75, 2013.0, 2014.5, 2014.25, 2009.5, 2015.0, 2011.25, 2009.75, 2013.75, 2014.0, 2015.25}), frozenset({2010.25, 2011.0, 2011.75, 2012.25, 2012.5, 2009.25, 2013.5, 2009.0, 2010.75, 2011.5, 2012.0, 2013.25, 2014.75}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 577)
train = (0.66994815804678387, 1.1707764262782849)
scores = (0.3808284448090361, 0.42662418923999851)
score = 0.40372631702451733
holdout = (0.46509497016159584, 0.6709124115709093)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (145, 374)
train = (1.2282640531885605, 1.1515093698440102)
scores = (0.37473496463614214, 0.45603011412042543)
score = 0.4153825393782838
holdout = (0.6548743374416223, 0.6585804604048027)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 274)
train = (0.60074411389734717, 0.90652812504764502)
scores = (0.38234748875285723, 0.38827791281384505)
score = 0.3853127007833511
holdout = (0.4498416512905968, 0.5908277116390405)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (145, 374)
train = (1.2282640531885605, 1.1515093698440102)
scores = (0.37473496463614214, 0.45603011412042543)
score = 0.4153825393782838
holdout = (0.6548743374416223, 0.6585804604048027)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 795)
train = (0.78048545187501306, 1.3669360984690633)
scores = (0.3761791890907169, 0.44232626414595289)
score = 0.4092527266183349
holdout = (0.4854488400827861, 0.7083246014468596)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (54, 413)
train = (1.194978918552702, 1.380085956994092)
scores = (0.37213425630219016, 0.44577726038095539)
score = 0.4089557583415728
holdout = (0.6477322353368912, 0.6940136512155118)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (26, 199)
train = (0.70970741874507581, 0.94523531301475838)
scores = (0.37965951931667452, 0.38532833053696341)
score = 0.382493924926819
holdout = (0.48875932222176555, 0.6019600508299727)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (2, 795)
train = (0.78048545187501306, 1.3669360984690633)
scores = (0.3761791890907169, 0.44232626414595289)
score = 0.4092527266183349
holdout = (0.4854488400827861, 0.7083246014468596)
>>> t = 6902 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 88
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|doo|daoc|vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:,20:10] 
                | Drawup[10:] 
                | Since{Min&index[0]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [10:,20:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|Volatility)
            & [5:,10:,15:,10:5,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[20]
      }
len(samps) = 2
(frozenset({2011.75, 2011.0, 2012.25, 2009.5, 2009.25, 2014.75, 2009.75, 2010.75, 2011.5, 2012.75, 2013.5, 2014.25, 2015.0}), frozenset({2010.0, 2010.5, 2012.5, 2013.25, 2013.75, 2014.0, 2009.0, 2010.25, 2011.25, 2012.0, 2013.0, 2014.5, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (9, 134)
train = (0.56361017634619004, 0.88075419103093866)
scores = (0.44587833384684256, 0.37300092298172161)
score = 0.40943962841428205
holdout = (0.48712766171466054, 0.5723834527563312)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (27, 1)
train = (0.64616058824189804, 0.66570456928623256)
scores = (0.40122709541851048, 0.18507647299357075)
score = 0.2931517842060406
holdout = (0.5085155360894724, 0.3516843683388387)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (12, 392)
train = (0.52839118130493601, 1.0105964359533468)
scores = (0.46149351369106928, 0.38964610293562069)
score = 0.425569808313345
holdout = (0.4851695329148538, 0.6249593532292731)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (12, 392)
train = (0.52839118130493601, 1.0105964359533468)
scores = (0.46149351369106928, 0.38964610293562069)
score = 0.425569808313345
holdout = (0.4851695329148538, 0.6249593532292731)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (8, 1)
train = (0.65671261157934946, 0.7691068330582056)
scores = (0.43877282018779601, 0.19721278729186967)
score = 0.31799280373983285
holdout = (0.5267549820632624, 0.39804369513879795)
>>> t = 6903 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 88
    <>~Market & (
        <>Return{.&pure&~digit&~TEN} & ~Since & Return{.& 
            <>(oo|aoo|doo|daoc|vp1dd)
            & index[0,1,2,1:2,0:2] 
          }
        | ( 
            <>Return{(oo{.&[1:]})} 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Drawdown[10:,20:,20:10] 
                | Drawup[10:] 
                | Since{Min&index[0]} 
              )
            & Since[ 125:] 
          )
      )
    | Market{.& 
        <>( Weight)
        & (Return)
        & [10:,20:] 
      }
    | 
        <>AssetEnc{InUni} 
#<>#
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo|aoo|vp1dd|Volatility)
            & [5:,10:,15:,10:5,15:5,20:10,20:5] 
          }
        | ( 
            <>Return{dd} & VP[ 10:] 
            & (
                <> ~Drawdown&~Drawup&~Since{Min}&~Since{Max} 
                | Since{Max & index[0,10]} 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62]
        & ay[20]
      }
len(samps) = 2
(frozenset({2010.25, 2010.5, 2012.75, 2009.0, 2014.25, 2014.75, 2009.75, 2010.0, 2011.25, 2012.5, 2013.0, 2014.5, 2015.0}), frozenset({2011.5, 2011.75, 2012.25, 2009.25, 2013.5, 2013.75, 2009.5, 2010.75, 2011.0, 2012.0, 2013.25, 2014.0, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (433, 81)
train = (1.0826618976151556, 0.87450995708665191)
scores = (0.36222795390800905, 0.44134400762942089)
score = 0.40178598076871497
holdout = (0.6416368610214996, 0.6144845174823848)
>>>  k = 1 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (150, 24)
train = (0.92585469837619661, 0.73371596993779831)
scores = (0.33902248360944814, 0.41631964482074124)
score = 0.37767106421509467
holdout = (0.5861601591229995, 0.5532116074727449)
>>>  k = 2 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 86)
train = (0.52481235365890588, 0.8337951243286944)
scores = (0.32819176367191993, 0.46655314085256933)
score = 0.3973724522622446
holdout = (0.421433851402013, 0.6130258674329255)
>>>  k = 3 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (433, 81)
train = (1.0826618976151556, 0.87450995708665191)
scores = (0.36222795390800905, 0.44134400762942089)
score = 0.40178598076871497
holdout = (0.6416368610214996, 0.6144845174823848)
>>>  k = 4 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (111, 165)
train = (0.93094100084426146, 1.1474003401853434)
scores = (0.34902868111976521, 0.46401781418861887)
score = 0.406523247654192
holdout = (0.5892889583682952, 0.7088177344880238)
>>>  k = 5 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 6.1, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (2, 2)
train = (0.70274521932910827, 0.81630954949911227)
scores = (0.30905432751717199, 0.41554945042182817)
score = 0.3623018889695001
holdout = (0.48738723515527277, 0.5745175934431455)
>>>  k = 6 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (232, 322)
train = (0.97775950966571623, 1.1797459583748802)
scores = (0.39484143675742245, 0.50464020910230756)
score = 0.449740822929865
holdout = (0.6192855229642644, 0.737855041184114)
>>>  k = 7 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 8, 'num_leaves': 256}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 150.0, 'lambda_l1': 0, 'lambda_l2': 0}
nboost = (232, 322)
train = (0.97775950966571623, 1.1797459583748802)
scores = (0.39484143675742245, 0.50464020910230756)
score = 0.449740822929865
holdout = (0.6192855229642644, 0.737855041184114)
>>> t = 7000 ===================================================================================================
(pair) len(F.columns) = 93
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......
(pair) putting together... (pair) done
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 188
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [5:,10:,20:10] 
          }
        | ( 
            <> Volatility[20:, 60:] 
            | Volatility[10:]
            & (
                <>Drawdown[1:] 
                | Since{Max & index[10]} 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.0, 2012.75, 2012.0, 2012.25, 2009.75, 2013.5, 2014.0, 2009.0, 2010.25, 2011.5, 2012.5, 2013.25, 2014.5}), frozenset({2010.75, 2015.0, 2011.25, 2011.75, 2013.75, 2014.25, 2009.5, 2010.5, 2011.0, 2009.25, 2013.0, 2014.75, 2015.25}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (144, 160)
train = (1.0959475868833644, 1.0422094503055039)
scores = (0.30255396029823112, 0.21203652085943586)
score = 0.25729524057883346
holdout = (0.6013843321851413, 0.5714371320985788)
>>> t = 7001 ===================================================================================================
setup_training %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
len(feats) = 188
    <>~Market & (
        | Return{.&pure&~index} & ~Since & Return{.& 
            <>(oo)
            & [5:,10:,20:10] 
          }
        | ( 
            <> Volatility[20:, 60:] 
            | Volatility[10:]
            & (
                <>Drawdown[1:] 
                | Since{Max & index[10]} 
                | Since{Min & index[10]} 
              )
            & Since[ 62:, 250:] 
          )
      )
    | 
        <>AssetEnc{InUni} 
#<>#
0
#<>#
0
#<>#
    <>0
    | Corr & Corr{ 
        <>[10,21,62,250]
        & ay[1]
      }
len(samps) = 2
(frozenset({2010.5, 2012.25, 2009.25, 2013.0, 2014.25, 2014.0, 2009.5, 2010.25, 2011.75, 2012.5, 2013.25, 2014.75, 2015.25}), frozenset({2010.0, 2011.0, 2011.5, 2012.75, 2009.75, 2013.75, 2009.0, 2010.75, 2011.25, 2012.0, 2013.5, 2014.5, 2015.0}))
>>>  k = 0 ---------------------------------------------------------------------------------------------------
{'learning_rate': 0.05, 'max_depth': 6, 'num_leaves': 64}
{'min_data_in_leaf': 120, 'min_sum_hessian_in_leaf': 50, 'lambda_l1': 0, 'lambda_l2': 0}
>>> training...
nboost = (341, 143)
train = (1.3109958879337611, 1.0733931337619012)
scores = (0.24656145350552033, 0.31512696153898762)
score = 0.280844207522254
holdout = (0.6363324986307277, 0.6086131551960916)
>>> t = 7100 ===================================================================================================
(pair) len(F.columns) = 151
(pair) generating [1064]0.........100.........200.........300.........400.........500.........600.........700.........800.........900.........1000......